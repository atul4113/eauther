<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Quiz" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isDefault="true" name="Questions" nameLabel="Quiz_property_Questions" type="list">
            <property isLocalized="true" name="Question" nameLabel="Quiz_property_Question" type="html"/>
            <property name="CorrectAnswer" nameLabel="Quiz_property_CorrectAnswer" type="string"/>
            <property name="WrongAnswer1" nameLabel="Quiz_property_WrongAnswer1" type="string"/>
            <property name="WrongAnswer2" nameLabel="Quiz_property_WrongAnswer2" type="string"/>
            <property name="WrongAnswer3" nameLabel="Quiz_property_WrongAnswer3" type="string"/>
            <property isLocalized="true" name="Hint" nameLabel="Quiz_property_hint" type="html"/>
        </property>
        <property name="TestMode" nameLabel="Quiz_property_TestMode" type="boolean"/>
        <property name="ShowHelpButtons" nameLabel="Quiz_property_ShowHelpButtons" type="boolean"/>
        <property name="NextAfterSelect" nameLabel="Quiz_property_NextAfterSelect" type="boolean"/>
        <property isLocalized="true" name="NextLabel" nameLabel="Quiz_property_NextLabel" type="string"/>
        <property isLocalized="true" name="GameLostMessage" nameLabel="Quiz_property_GameLostMessage" type="html"/>
        <property isLocalized="true" name="GameWonMessage" nameLabel="Quiz_property_GameWonMessage" type="html"/>
        <property name="ShowSummary" nameLabel="Quiz_property_Summary" type="boolean"/>
        <property isLocalized="true" name="GameSummaryMessage" nameLabel="Quiz_property_GameSummaryMessage" type="html"/>
        <property isLocalized="true" name="CorrectGameMessage" nameLabel="Quiz_property_CorrectGameMessage" type="html"/>
        <property isLocalized="true" name="WrongGameMessage" nameLabel="Quiz_property_WrongGameMessage" type="html"/>
        <property name="Center vertically" nameLabel="Quiz_property_center_vertically" type="boolean"/>
        <property name="isActivity" nameLabel="Quiz_property_isActivity" type="boolean"/>
    </model>
<css>.quiz-error-layer {&#13;
    color: #FF0000;&#13;
    background-color: #FFFFFF;&#13;
    width:100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.question-wrapper {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.question-wrapper .question-title {&#13;
    text-align: center;&#13;
    height: 33%;&#13;
}&#13;
&#13;
.question-wrapper .hint-button {&#13;
    background: url("resources/hint.svg") #c0c0c0 no-repeat center;&#13;
    width: 60px;&#13;
    height: 60px;&#13;
    cursor: pointer;&#13;
    float: right;&#13;
}&#13;
&#13;
.question-wrapper .fifty-fifty {&#13;
    background: url("resources/50-50.svg") #c0c0c0 no-repeat center;&#13;
    width: 60px;&#13;
    height: 60px;&#13;
    cursor: pointer;&#13;
    float: right;&#13;
}&#13;
&#13;
.question-wrapper .next-question-button {&#13;
    width: 60px;&#13;
    height: 60px;&#13;
    cursor: default;&#13;
    float: right;&#13;
    opacity: 0.5;&#13;
}&#13;
&#13;
.question-wrapper .next-question-button.active {&#13;
    cursor: pointer;&#13;
    opacity: 1;&#13;
}&#13;
&#13;
.question-wrapper .question-tips {&#13;
    display: inline-block;&#13;
    width: 80%;&#13;
    float: left;&#13;
    height: 34%;&#13;
}&#13;
&#13;
.question-wrapper .question-hint-buttons {&#13;
    display: block;&#13;
    width: 20%;&#13;
    float: right;&#13;
}&#13;
&#13;
.question-wrapper .question-hint-buttons .used {&#13;
    opacity: 0.5;&#13;
    cursor: default;&#13;
}&#13;
&#13;
.question-wrapper .removed {&#13;
    opacity: 0.5;&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip {&#13;
    display: inline-block;&#13;
    cursor: pointer;&#13;
    width: 50%;&#13;
    height: 50%;&#13;
}&#13;
&#13;
.headers-of-answers {&#13;
    display: inline-flex;&#13;
    font-weight: bold;&#13;
}&#13;
&#13;
.answers {&#13;
    width: 85%;&#13;
    display: inline-flex;&#13;
    margin-left: 0.5em;&#13;
}&#13;
&#13;
.center-vertically{&#13;
    position: relative;&#13;
    top: 50%;&#13;
    transform: translateY(-50%);&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip.correct {&#13;
    background-color: greenyellow;&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip.wrong {&#13;
    background-color: #A52A2A;&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip.option {&#13;
    background-color: #fba600;&#13;
}&#13;
&#13;
.question-wrapper .question-hint-wrapper {&#13;
    height: 33%;&#13;
    width: 80%;&#13;
    float: left;&#13;
    display: block;&#13;
}&#13;
&#13;
.question-wrapper .question-hint {&#13;
    background-color: #FFFF00;&#13;
    color: #000000;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.question-wrapper .game-won-message-wrapper {&#13;
    background-color: #00aa00;&#13;
    color: #ffffff;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
.question-wrapper .game-won-message {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.question-wrapper .game-lost-message-wrapper {&#13;
    background-color: #aa0000;&#13;
    color: #ffffff;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: relative;&#13;
&#13;
}&#13;
.question-wrapper .game-lost-message {&#13;
    text-align: center;&#13;
}&#13;
&#13;
.question-wrapper .game-summary-message-wrapper {&#13;
    background-color: #ffffff;&#13;
    color: #ffffff;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    color: #000000;&#13;
}&#13;
.question-wrapper .game-summary-message {&#13;
    text-align: center;&#13;
}&#13;
.question-wrapper.disabled,&#13;
.question-wrapper.disabled .hint-button,&#13;
.question-wrapper.disabled .fifty-fifty,&#13;
.question-wrapper.disabled .question-tips .question-tip {&#13;
    cursor: not-allowed;&#13;
}&#13;
&#13;
.question-wrapper .question-tips .question-tip.correct-answer {&#13;
    background-color: #99FF55;&#13;
}&#13;
&#13;
.question-wrapper .quiz-progress {&#13;
    width: 60px;&#13;
    float: right;&#13;
    text-align: center;&#13;
}&#13;
</css><view>&lt;div class="question-wrapper"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="question-wrapper"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonQuiz_create() {&#13;
    var presenter = function () {&#13;
    };&#13;
&#13;
    var playerController;&#13;
    var eventBus; // Modules communication&#13;
    var state;&#13;
&#13;
    var ERRORS = {&#13;
        'QUESTION_REQUIRED': "At least 1 question is required.",&#13;
        'EMPTY_QUESTION': "At least one question is not specified",&#13;
        'MISSING_CORRECT_ANSWER': "At least one question doesn't have specified correct answer",&#13;
        'MISSING_WRONG_ANSWER': "At least one question doesn't have specified wrong answer",&#13;
        'MISSING_HINT': "At least one question doesn't have specified hint",&#13;
    };&#13;
&#13;
    function ConfigurationError(label) {&#13;
        return {&#13;
            name: 'ConfigurationError',&#13;
            message: ERRORS[label] || label&#13;
        }&#13;
    }&#13;
&#13;
    presenter.activeElements = [];&#13;
&#13;
    function setupDefaults() {&#13;
        state = {&#13;
            currentQuestion: 1,&#13;
            answersOrder: false,&#13;
            wasWrong: false,&#13;
            haveWon: false,&#13;
            fiftyFiftyUsed: false,&#13;
            hintUsed: null,&#13;
            selectedAnswer: null,&#13;
            isVisible: true,&#13;
            score: []&#13;
        };&#13;
        // addon's modes&#13;
        presenter.isErrorMode = false;&#13;
        presenter.isShowAnswersActive = false;&#13;
    }&#13;
&#13;
    presenter.createAllOKEventData = function AddonQuiz_createAllOKEventData() {&#13;
        return {&#13;
            'source': presenter.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
    };&#13;
&#13;
    function validateQuestions(questions, helpButtons) {&#13;
        if (questions.length &lt; 1) {&#13;
            throw ConfigurationError('QUESTION_REQUIRED');&#13;
        }&#13;
        for (var i = 0; i &lt; questions.length; i++) {&#13;
            var q = questions[i];&#13;
            if (ModelValidationUtils.isHtmlEmpty(q.Question)) {&#13;
                throw ConfigurationError('EMPTY_QUESTION');&#13;
            }&#13;
            if (ModelValidationUtils.isStringEmpty(q.CorrectAnswer)) {&#13;
                throw ConfigurationError('MISSING_CORRECT_ANSWER');&#13;
            }&#13;
            if (ModelValidationUtils.isStringEmpty(q.WrongAnswer1) &amp;&amp; ModelValidationUtils.isStringEmpty(q.WrongAnswer2) &amp;&amp; ModelValidationUtils.isStringEmpty(q.WrongAnswer3)&#13;
            ) {&#13;
                throw ConfigurationError('MISSING_WRONG_ANSWER');&#13;
            }&#13;
            if (helpButtons &amp;&amp; ModelValidationUtils.isHtmlEmpty(q.Hint)) {&#13;
                throw ConfigurationError('MISSING_HINT');&#13;
            }&#13;
        }&#13;
        return questions;&#13;
    }&#13;
&#13;
    presenter.setupConfig = function AddonQuiz_setupConfig(model) {&#13;
        var helpButtons = ModelValidationUtils.validateBoolean(model['ShowHelpButtons']);&#13;
        presenter.config = {&#13;
            visibility: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            questions: validateQuestions(model['Questions'], helpButtons),&#13;
            helpButtons: helpButtons,&#13;
            nextLabel: model['NextLabel'] || '',&#13;
            gameLostMessage: model['GameLostMessage'],&#13;
            gameWonMessage: model['GameWonMessage'],&#13;
            gameSummaryMessage: model['GameSummaryMessage'],&#13;
            correctGameMessage: model['CorrectGameMessage'],&#13;
            wrongGameMessage: model['WrongGameMessage'],&#13;
            centerVertically: ModelValidationUtils.validateBoolean(model['Center vertically']),&#13;
            isActivity: ModelValidationUtils.validateBoolean(model['isActivity']),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model['Is Visible']),&#13;
            nextAfterSelect: ModelValidationUtils.validateBoolean(model['NextAfterSelect']),&#13;
            testMode: ModelValidationUtils.validateBoolean(model['TestMode']),&#13;
            showSummary: ModelValidationUtils.validateBoolean(model['ShowSummary'])&#13;
        }&#13;
    };&#13;
&#13;
    function shuffle(a) {&#13;
        var j, x, i;&#13;
        for (i = a.length; i; i--) {&#13;
            j = Math.floor(Math.random() * i);&#13;
            x = a[i - 1];&#13;
            a[i - 1] = a[j];&#13;
            a[j] = x;&#13;
        }&#13;
    };&#13;
&#13;
    function cleanWorkspace() {&#13;
        unbindEvents();&#13;
        presenter.activeElements = [];&#13;
        var wrapper = presenter.$view.find('.question-wrapper');&#13;
        wrapper.children().remove();&#13;
    };&#13;
&#13;
    function showInHintArea($element) {&#13;
        presenter.hintWrapper.children().remove();&#13;
        presenter.hintWrapper.append($element);&#13;
    };&#13;
&#13;
    function gameWonMessage() {&#13;
        var wrapper = $('&lt;div class="game-won-message-wrapper"&gt;&lt;/div&gt;');&#13;
        var message = $('&lt;div class="game-won-message"&gt;&lt;/div&gt;');&#13;
        if(presenter.config.showSummary) {&#13;
            message.html(presenter.config.gameWonMessage +&#13;
                '&lt;div&gt;' + presenter.config.gameSummaryMessage + '&lt;div&gt;' + presenter.config.correctGameMessage + ': ' + getScore() + '&lt;/div&gt;&lt;div&gt;' + presenter.config.wrongGameMessage + ': ' + (presenter.config.questions.length - getScore()) + '&lt;/div&gt;' + '&lt;/div&gt;');&#13;
        }else{&#13;
            message.html(presenter.config.gameWonMessage);&#13;
        }&#13;
        wrapper.append(message);&#13;
        showInHintArea(wrapper);&#13;
    };&#13;
&#13;
    function gameLostMessage() {&#13;
        var wrapper = $('&lt;div class="game-lost-message-wrapper"&gt;&lt;/div&gt;');&#13;
        var message = $('&lt;div class="game-lost-message"&gt;&lt;/div&gt;');&#13;
        if(presenter.config.showSummary) {&#13;
            message.html(presenter.config.gameLostMessage +&#13;
                '&lt;div&gt;' + presenter.config.gameSummaryMessage + '&lt;div&gt;' + presenter.config.correctGameMessage + ': ' + getScore() + '&lt;/div&gt;&lt;div&gt;' + presenter.config.wrongGameMessage + ': ' + (presenter.config.questions.length - getScore()) + '&lt;/div&gt;' + '&lt;/div&gt;');&#13;
        }else{&#13;
            message.html(presenter.config.gameLostMessage);&#13;
        }&#13;
        wrapper.append(message);&#13;
        showInHintArea(wrapper);&#13;
    };&#13;
&#13;
    function gameSummary() {&#13;
        var wrapper = $('&lt;div class="game-summary-message-wrapper"&gt;&lt;/div&gt;');&#13;
        var message = $('&lt;div class="game-summary-message"&gt;&lt;/div&gt;');&#13;
        message.html(presenter.config.gameSummaryMessage + '&lt;div&gt;' + presenter.config.correctGameMessage + ': ' + getScore() + '&lt;/div&gt;&lt;div&gt;' + presenter.config.wrongGameMessage + ': ' + (presenter.config.questions.length - getScore()) + '&lt;/div&gt;');&#13;
        wrapper.append(message);&#13;
        showInHintArea(wrapper);&#13;
    };&#13;
&#13;
    function getSelectItemAction(answer, $this) {&#13;
        var isCorrect = answer == getCurrentQuestion().CorrectAnswer;&#13;
        return function selectItemAction(e) {&#13;
            if (e) {&#13;
                e.stopPropagation();&#13;
                e.preventDefault();&#13;
            }&#13;
            var eventData = {&#13;
                'source': presenter.addonID,&#13;
                'item': state.currentQuestion,&#13;
                'value': '1',&#13;
                'score': '1'&#13;
            };&#13;
            state.selectedAnswer = answer;&#13;
            if (!presenter.config.testMode) {&#13;
                if (isCorrect) {&#13;
                    state.score[state.currentQuestion - 1] = 1;&#13;
                    $this.addClass('correct');&#13;
                    eventBus.sendEvent('ValueChanged', eventData);&#13;
                    if (state.currentQuestion == presenter.config.questions.length) {&#13;
                        gameWonMessage();&#13;
                        eventBus.sendEvent('ValueChanged', presenter.createAllOKEventData());&#13;
                        unbindEvents();&#13;
                    } else {&#13;
                        presenter.nextButton.addClass('active');&#13;
                        unbindEvents(presenter.nextButton);&#13;
                        if (presenter.config.nextAfterSelect) {&#13;
                            unbindEvents();&#13;
                            setTimeout(function () {&#13;
                                nextButtonAction();&#13;
                                bindEvents();&#13;
                            }, 500);&#13;
                        }&#13;
                    }&#13;
                } else {&#13;
                    state.score[state.currentQuestion - 1] = 0;&#13;
                    $this.addClass('wrong');&#13;
                    eventData['score'] = '0';&#13;
                    eventBus.sendEvent('ValueChanged', eventData);&#13;
                    gameLostMessage();&#13;
                    state.wasWrong = true;&#13;
                    unbindEvents();&#13;
                }&#13;
            } else {&#13;
                $this.addClass('option');&#13;
&#13;
                if (isCorrect) {&#13;
                    state.score[state.currentQuestion - 1] = 1;&#13;
                } else {&#13;
                    state.score[state.currentQuestion - 1] = 0;&#13;
                    eventData['score'] = '0';&#13;
                }&#13;
                eventBus.sendEvent('ValueChanged', eventData);&#13;
&#13;
                if (state.currentQuestion === presenter.config.questions.length) {&#13;
                    if (getScore() &gt;= presenter.config.questions.length) {&#13;
                        gameWonMessage();&#13;
                        state.wasWrong = false;&#13;
                        eventBus.sendEvent('ValueChanged', presenter.createAllOKEventData());&#13;
                    }else{&#13;
                        gameLostMessage();&#13;
                        state.wasWrong = true;&#13;
                    }&#13;
                    unbindEvents();&#13;
                } else {&#13;
                    presenter.nextButton.addClass('active');&#13;
                    unbindEvents(presenter.nextButton);&#13;
                    if (presenter.config.nextAfterSelect) {&#13;
                        unbindEvents();&#13;
                        setTimeout(function () {&#13;
                            nextButtonAction();&#13;
                            bindEvents();&#13;
                        }, 500);&#13;
                    }&#13;
                }&#13;
&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function bindEvents() {&#13;
        var elements;&#13;
        if (arguments.length &gt; 0) {&#13;
            elements = Array.prototype.slice.call(arguments);&#13;
        } else {&#13;
            elements = presenter.activeElements;&#13;
        }&#13;
        unbindEvents();&#13;
        for (var i = 0; i &lt; elements.length; i++) {&#13;
            var $el = elements[i];&#13;
            $el.bind('click', $el.clickAction);&#13;
        }&#13;
    };&#13;
&#13;
    function unbindEvents() {&#13;
        var args = Array.prototype.slice.call(arguments);&#13;
        for (var i = 0; i &lt; presenter.activeElements.length; i++) {&#13;
            var $el = presenter.activeElements[i];&#13;
            if (args.indexOf($el) &gt; -1) {&#13;
                continue;&#13;
            }&#13;
            $el.unbind('click', $el.clickAction);&#13;
        }&#13;
    };&#13;
&#13;
    function getCurrentQuestion() {&#13;
        return presenter.config.questions[state.currentQuestion - 1];&#13;
    }&#13;
&#13;
    function fiftyFiftyAction(e) {&#13;
        if (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        }&#13;
        if (state.answersOrder.length &gt;= 4 &amp;&amp; !state.fiftyFiftyUsed) {&#13;
            // clue:&#13;
            state.fiftyFiftyUsed = true;&#13;
            unbindEvents();&#13;
            var removedItems = 0,&#13;
                i = -1;&#13;
            while (removedItems &lt; 2) {&#13;
                i++;&#13;
                if (i == state.answersOrder.length) {&#13;
                    i = 0;&#13;
                }&#13;
                var item = state.answersOrder[i];&#13;
                if (item === 0 || item == null) {&#13;
                    continue;&#13;
                }&#13;
                var x = Math.round(Math.random());&#13;
                if (x) {&#13;
                    removedItems++;&#13;
                    state.answersOrder[i] = null;&#13;
                }&#13;
            }&#13;
            presenter.showCurrentQuestion();&#13;
            bindEvents();&#13;
        }&#13;
    };&#13;
&#13;
    function showHint() {&#13;
        var $hint = $('&lt;div class="question-hint"&gt;&lt;/div&gt;').html(getCurrentQuestion().Hint);&#13;
        showInHintArea($hint);&#13;
        presenter.$view.find('.hint-button').addClass('used');&#13;
    }&#13;
&#13;
    function nextButtonAction(e) {&#13;
        if (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        }&#13;
        if ((!state.wasWrong) &amp;&amp; (state.selectedAnswer !== null) &amp;&amp; state.currentQuestion &lt; presenter.config.questions.length) {&#13;
            state.selectedAnswer = null;&#13;
            state.answersOrder = false;&#13;
            state.currentQuestion++;&#13;
            presenter.showCurrentQuestion();&#13;
            bindEvents();&#13;
        }&#13;
    }&#13;
&#13;
    function hintAction(e) {&#13;
        if (e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        }&#13;
        if (state.hintUsed === null) {&#13;
            state.hintUsed = state.currentQuestion;&#13;
            showHint();&#13;
        }&#13;
    };&#13;
&#13;
    function addProgressBar(wrapper) {&#13;
        var progress = $('&lt;div class="quiz-progress"&gt;&lt;/div&gt;'),&#13;
            current = state.currentQuestion,&#13;
            len = presenter.config.questions.length,&#13;
            info = '&lt;span class="current-question-number"&gt;' + current + '&lt;/span&gt;' +&#13;
                '&lt;span class="divider"&gt;/&lt;/span&gt;' +&#13;
                '&lt;span class="questions-number"&gt;' + len + '&lt;/span&gt;';&#13;
        progress.html(info);&#13;
        wrapper.append(progress);&#13;
    };&#13;
&#13;
    function showQuestion(q, showAnswer) {&#13;
        var $q = presenter.$view.find('.question-wrapper');&#13;
        var $title = $('&lt;div class="question-title"&gt;&lt;/div&gt;');&#13;
        var $tips = $('&lt;div class="question-tips"&gt;&lt;/div&gt;');&#13;
        var $nextButton = $('&lt;div class="next-question-button"&gt;&lt;/div&gt;');&#13;
        $nextButton.text(presenter.config.nextLabel);&#13;
        $nextButton.clickAction = nextButtonAction;&#13;
&#13;
&#13;
        cleanWorkspace();&#13;
&#13;
        $title.html(q.Question);&#13;
&#13;
        var tempAnswers = [q.CorrectAnswer];&#13;
        [q.WrongAnswer1, q.WrongAnswer2, q.WrongAnswer3].forEach(function (wrongAnswer) {&#13;
            if (wrongAnswer &amp;&amp; wrongAnswer.length &gt; 0) {&#13;
                tempAnswers.push(wrongAnswer);&#13;
            }&#13;
        });&#13;
&#13;
        if (!state.answersOrder) {&#13;
            state.answersOrder = $.map(tempAnswers, function (element, index) {&#13;
                return index;&#13;
            });&#13;
            shuffle(state.answersOrder);&#13;
        }&#13;
&#13;
        var answers = $.map(tempAnswers, function (element, index) {&#13;
            return index;&#13;
        });&#13;
        for (var i = 0; i &lt; answers.length; i++) {&#13;
            var index = state.answersOrder[i];&#13;
            if (index === null) {&#13;
                answers[i] = null;&#13;
            } else {&#13;
                answers[i] = tempAnswers[index];&#13;
            }&#13;
        }&#13;
&#13;
        var labels = ['A: ', 'B: ', 'C: ', 'D: '];&#13;
&#13;
        for (var i = 0; i &lt; answers.length; i++) {&#13;
            var $tip = $('&lt;div class="question-tip"&gt;&lt;/div&gt;');&#13;
            var answer = answers[i];&#13;
&#13;
            var headersOfAnswer = document.createElement('div');&#13;
            var $headersOfAnswer = $(headersOfAnswer);&#13;
            $headersOfAnswer.addClass("headers-of-answers");&#13;
&#13;
            var divAnswers = document.createElement('div');&#13;
            var $divAnswers = $(divAnswers);&#13;
            $divAnswers.addClass('answers');&#13;
&#13;
            var label = labels[i];&#13;
            $headersOfAnswer.text(label);&#13;
            $divAnswers.text(answer || '');&#13;
            if (answer === null) {&#13;
                $tip.addClass('removed');&#13;
                $tip.clickAction = function () {&#13;
                };&#13;
            } else {&#13;
                $tip.clickAction = getSelectItemAction(answer, $tip);&#13;
            }&#13;
&#13;
            if (answer == q.CorrectAnswer) {&#13;
                if (showAnswer) {&#13;
                    $tip.addClass('correct-answer');&#13;
                } else if (state.selectedAnswer == answer) {&#13;
                    $tip.addClass('correct-answer');&#13;
                    if (state.currentQuestion &lt; presenter.config.questions.length) {&#13;
                        $nextButton.addClass('active');&#13;
                    }&#13;
                }&#13;
            } else if (state.wasWrong &amp;&amp; state.selectedAnswer == answer) {&#13;
                $tip.addClass('wrong');&#13;
            }&#13;
            $tips.append($tip);&#13;
            $tip.append($headersOfAnswer);&#13;
            $tip.append($divAnswers);&#13;
            presenter.activeElements.push($tip)&#13;
&#13;
            if (presenter.config.centerVertically) {&#13;
                $headersOfAnswer.addClass('center-vertically');&#13;
                $divAnswers.addClass('center-vertically');&#13;
            }&#13;
        }&#13;
&#13;
        $q.append($title);&#13;
        $q.append($tips);&#13;
        var $buttons = $('&lt;div class="question-hint-buttons"&gt;&lt;/div&gt;');&#13;
        addProgressBar($buttons);&#13;
        $q.append($buttons);&#13;
        presenter.hintWrapper = $('&lt;div class="question-hint-wrapper"&gt;&lt;/div&gt;');&#13;
        $q.append(presenter.hintWrapper);&#13;
        if (presenter.config.helpButtons) {&#13;
            var $fiftyFifty = $('&lt;div class="fifty-fifty"&gt;&lt;/div&gt;');&#13;
            var $hintButton = $('&lt;div class="hint-button"&gt;&lt;/div&gt;');&#13;
            $fiftyFifty.clickAction = fiftyFiftyAction;&#13;
            $hintButton.clickAction = hintAction;&#13;
            $buttons.append($fiftyFifty);&#13;
            $buttons.append($hintButton);&#13;
            presenter.activeElements.push($fiftyFifty);&#13;
            presenter.activeElements.push($hintButton);&#13;
            $q.addClass('with-hint');&#13;
            if (state.fiftyFiftyUsed) {&#13;
                $fiftyFifty.addClass('used');&#13;
            }&#13;
            if (state.hintUsed) {&#13;
                $hintButton.addClass('used');&#13;
                if (state.hintUsed == state.currentQuestion) {&#13;
                    showHint();&#13;
                }&#13;
            }&#13;
        } else {&#13;
            $q.addClass('without-hint');&#13;
        }&#13;
        presenter.activeElements.push($nextButton);&#13;
        presenter.nextButton = $nextButton;&#13;
        if (!presenter.config.nextAfterSelect) {&#13;
            $buttons.append($nextButton);&#13;
        }&#13;
        if (state.wasWrong) {&#13;
            gameLostMessage();&#13;
        } else if (haveWon()) {&#13;
            gameWonMessage();&#13;
        } else if (state.selectedAnswer) {&#13;
            bindEvents(presenter.nextButton);&#13;
        } else if (!showAnswer) {&#13;
            bindEvents();&#13;
        }&#13;
    };&#13;
&#13;
    function haveWon() {&#13;
        var q = getCurrentQuestion();&#13;
        return state.selectedAnswer == q.CorrectAnswer &amp;&amp; state.currentQuestion == presenter.config.questions.length;&#13;
    }&#13;
&#13;
    function initializeLogic(view, model, preview) {&#13;
        setupDefaults();&#13;
        presenter.$view = $(view);&#13;
        try {&#13;
            presenter.setupConfig(model);&#13;
            presenter.showCurrentQuestion();&#13;
            presenter.config.questions.forEach(function () {&#13;
                state.score.push(0);&#13;
            });&#13;
        } catch (error) {&#13;
            var $error = $('&lt;div class="quiz-error-layer"&gt;&lt;/div&gt;');&#13;
            var text = "&lt;strong&gt;" + error.name + "&lt;/strong&gt;: " + error.message;&#13;
            $error.html(text);&#13;
            presenter.$view.find('.question-wrapper').append($error);&#13;
            presenter.config = {};&#13;
        }&#13;
&#13;
        if (!preview) {&#13;
            bindEvents();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showCurrentQuestion = function AddonQuiz_showCurrentQuestion() {&#13;
        showQuestion(getCurrentQuestion(), false);&#13;
    }&#13;
&#13;
    presenter.setPlayerController = function AddonQuiz_setPlayerController(controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonQuiz_setVisibility(isVisible) {&#13;
        state.isVisible = isVisible;&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function AddonQuiz_hide() {&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.show = function AddonQuiz_show() {&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.run = function AddonQuiz_run(view, model) {&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.addonID = model.ID;&#13;
        initializeLogic(view, model, false);&#13;
        presenter.setVisibility(presenter.config.isVisible);&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
&#13;
        presenter.$view.addEventListener('DOMNodeRemoved', function onDOMNodeRemoved(ev) {&#13;
            if (ev.target === this) {&#13;
                presenter.destroy();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonQuiz_createPreview(view, model) {&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        initializeLogic(view, upgradedModel, true);&#13;
    };&#13;
&#13;
    presenter.getState = function AddonQuiz_getState() {&#13;
        if ("{}" === JSON.stringify(presenter.config)) {&#13;
            return "";&#13;
        }&#13;
        return JSON.stringify(state);&#13;
    };&#13;
&#13;
    presenter.setState = function AddonQuiz_setState(gotState) {&#13;
        if (!gotState) {&#13;
            return;&#13;
        }&#13;
        state = JSON.parse(gotState);&#13;
        presenter.showCurrentQuestion();&#13;
        presenter.setVisibility(state.isVisible);&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function AddonQuiz_setShowErrorsMode() {&#13;
        if (!presenter.config.isActivity || presenter.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode = true;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        showErrorsMode();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function AddonQuiz_setWorkMode() {&#13;
        if (!presenter.config.isActivity || !presenter.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isErrorMode = false;&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        workMode();&#13;
    };&#13;
&#13;
    function showErrorsMode() {&#13;
        presenter.disable();&#13;
    };&#13;
&#13;
    function workMode() {&#13;
        presenter.enable();&#13;
    };&#13;
&#13;
    presenter.reset = function AddonQuiz_reset() {&#13;
        presenter.setWorkMode();&#13;
        setupDefaults();&#13;
        presenter.showCurrentQuestion();&#13;
        bindEvents();&#13;
        presenter.setVisibility(presenter.config.isVisible);&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function AddonQuiz_getErrorCount() {&#13;
        if (!presenter.config.isActivity) return 0;&#13;
        return getErrorCount();&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function AddonQuiz_getMaxScore() {&#13;
        if (!presenter.config.isActivity) return 0;&#13;
        return getMaxScore();&#13;
    };&#13;
&#13;
    presenter.getScore = function AddonQuiz_getScore() {&#13;
        if (!presenter.config.isActivity) return 0;&#13;
        return getScore();&#13;
    };&#13;
&#13;
    function getErrorCount() {&#13;
        if (!presenter.config.testMode) {&#13;
            return state.wasWrong ? 1 : 0;&#13;
        } else {&#13;
            var errors = 0;&#13;
            state.score.forEach(function (e) {&#13;
                if (e == 0) {&#13;
                    errors = errors + 1;&#13;
                }&#13;
            });&#13;
            return errors;&#13;
        }&#13;
    }&#13;
&#13;
    function getMaxScore() {&#13;
        return presenter.config.questions.length;&#13;
    }&#13;
&#13;
    function getScore() {&#13;
        var score = 0;&#13;
        state.score.forEach(function (e) {&#13;
            if (e &gt; 0) {&#13;
                score = score + e;&#13;
            }&#13;
        });&#13;
        return score;&#13;
    }&#13;
&#13;
    presenter.executeCommand = function AddonQuiz_executeCommand(name, params) {&#13;
        if (presenter.isErrorMode) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isAttempted': presenter.isAttempted,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'disable': presenter.disable,&#13;
            'enable': presenter.enable,&#13;
            'reset': presenter.reset&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function AddonQuiz_isAllOK() {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.isAttempted = function AddonQuiz_isAttempted() {&#13;
        return (state.currentQuestion &gt; 1) || state.wasWrong || (state.selectedAnswer !== null);&#13;
    };&#13;
&#13;
    presenter.disable = function AddonQuiz_disable() {&#13;
        presenter.$view.find('.question-wrapper').addClass('disabled');&#13;
        unbindEvents();&#13;
    };&#13;
&#13;
    presenter.enable = function AddonQuiz_enable() {&#13;
        presenter.$view.find('.question-wrapper').removeClass('disabled');&#13;
        bindEvents();&#13;
    };&#13;
&#13;
    presenter.destroy = function () {&#13;
        presenter.$view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
        unbindEvents();&#13;
        presenter.$view.off();&#13;
        presenter.eventBus = null;&#13;
        presenter.view = null;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeAcceptWrongAnswers(model);&#13;
    };&#13;
&#13;
    presenter.upgradeAcceptWrongAnswers = function (model) {&#13;
        if (!model['GameSummaryMessage']) {&#13;
            model['GameSummaryMessage'] = 'Score';&#13;
        }&#13;
        if (!model['CorrectGameMessage']) {&#13;
            model['CorrectGameMessage'] = 'Correct';&#13;
        }&#13;
        if (!model['WrongGameMessage']) {&#13;
            model['WrongGameMessage'] = 'Wrong';&#13;
        }&#13;
        return model;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function AddonQuiz_onEventReceived(eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function AddonQuiz_showAnswers() {&#13;
        if (!presenter.config.isActivity) {&#13;
            return;&#13;
        }&#13;
        presenter.isShowAnswersActive = true;&#13;
        showAnswers();&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function AddonQuiz_hideAnswers() {&#13;
        if (!presenter.config.isActivity) {&#13;
            return;&#13;
        }&#13;
        presenter.isShowAnswersActive = false;&#13;
        hideAnswers();&#13;
    };&#13;
&#13;
    function showAnswers() {&#13;
        showQuestion(getCurrentQuestion(), true);&#13;
    }&#13;
&#13;
    function hideAnswers() {&#13;
        presenter.showCurrentQuestion();&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>