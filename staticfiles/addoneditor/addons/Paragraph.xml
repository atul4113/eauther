<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Paragraph" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Default font family" nameLabel="Paragraph_property_default_font_family" type="string"/>
		<property name="Default font size" nameLabel="Paragraph_property_default_font_size" type="string"/>
		<property name="Hide toolbar" nameLabel="Paragraph_property_hide_toolbar" type="boolean"/>
		<property name="Editable placeholder" nameLabel="Paragraph_property_editable_placeholder" type="boolean"/>
		<property name="Custom toolbar" nameLabel="Paragraph_property_custom_toolbar" type="string"/>
		<property name="Custom CSS" nameLabel="Paragraph_property_custom_css" type="file"/>
        <property name="Placeholder Text" nameLabel="Paragraph_property_placeholder_text" type="html"/>
        <property name="Layout Type" nameLabel="Paragraph_property_layout_type" type="{Default, French}"/>
	</model>
<css>div.paragraph-wrapper {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
	border: solid 1px #9E9E9E;&#13;
	border-radius: 2px;&#13;
    overflow-y: hidden;&#13;
    overflow-x: auto;&#13;
    -webkit-overflow-scrolling: touch;&#13;
}&#13;
&#13;
div.paragraph-wrapper textarea {&#13;
	width: 100%;&#13;
	height: 100%;&#13;
}&#13;
</css><view>&lt;div class="paragraph-wrapper"&gt;&#13;
	&lt;form&gt;&#13;
		&lt;textarea class="paragraph_field"&gt;&lt;/textarea&gt;&#13;
	&lt;/form&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="paragraph-wrapper"&gt;&#13;
	&lt;form&gt;&#13;
		&lt;textarea class="paragraph_field"&gt;&lt;/textarea&gt;&#13;
	&lt;/form&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonParagraph_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.placeholder = null;&#13;
    presenter.editor = null;&#13;
    presenter.jQueryTinyMCEHTML = null;&#13;
    presenter.$tinyMCEToolbar = null;&#13;
    presenter.tinyMceContainer = null;&#13;
    presenter.editor = null;&#13;
    presenter.playerController = null;&#13;
    presenter.isVisibleValue = null;&#13;
&#13;
    presenter.LANGUAGES = {&#13;
        DEFAULT: "en_GB",&#13;
        FRENCH: "fr_FR"&#13;
    };&#13;
&#13;
    presenter.DEFAULTS = {&#13;
        TOOLBAR: 'bold italic underline numlist bullist alignleft aligncenter alignright alignjustify',&#13;
        FONT_FAMILY: 'Verdana,Arial,Helvetica,sans-serif',&#13;
        FONT_SIZE: '11px',&#13;
        BUTTON_WIDTH: 37,&#13;
        FORMAT_WIDTH: 85,&#13;
        STYLE_SELECT_NAME: "styleselect"&#13;
    };&#13;
&#13;
    presenter.ALLOWED_TOOLBAR_BUTTONS = 'customBold customUnderline customItalic newdocument bold italic underline strikethrough alignleft aligncenter '+&#13;
        'alignright alignjustify styleselect formatselect fontselect fontsizeselect '+&#13;
        'bullist numlist outdent indent blockquote undo redo '+&#13;
        'removeformat subscript superscript forecolor backcolor |'.split(' ');&#13;
    &#13;
    function isIOSSafari() {&#13;
        var ua = window.navigator.userAgent,&#13;
            iOS = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i),&#13;
            webkit = !!ua.match(/WebKit/i),&#13;
            iOSSafari = iOS &amp;&amp; webkit &amp;&amp; !ua.match(/CriOS/i);&#13;
        return iOSSafari&#13;
    }&#13;
&#13;
    presenter.executeCommand = function AddonParagraph_executeCommand(name, params) {&#13;
        if (!presenter.configuration.isValid) { return; }&#13;
&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'isVisible': presenter.isVisible,&#13;
            'getText': presenter.getText,&#13;
            'setText': presenter.setText,&#13;
            'isAttempted': presenter.isAttempted&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAttempted = function () {&#13;
        return $(presenter.editor.getContent({format: 'raw'})).text() != '';&#13;
    };&#13;
&#13;
    presenter.getText = function AddonParagraph_getText() {&#13;
        return presenter.editor.getContent({format: 'raw'});&#13;
    };&#13;
&#13;
    presenter.sendOnBlurEvent = function () {&#13;
        var eventData = {&#13;
            'source': presenter.configuration.ID,&#13;
            'item': '',&#13;
            'value': 'blur',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonParagraph_setVisibility(isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
        if (isVisible) {&#13;
            presenter.$view.find(".paragraph-wrapper").show();&#13;
        } else {&#13;
            presenter.$view.find(".paragraph-wrapper").hide();&#13;
        }&#13;
&#13;
        presenter.isVisibleValue = isVisible;&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonParagraph_createPreview(view, model) {&#13;
        presenter.initializeEditor(view, model);&#13;
        presenter.setVisibility(true);&#13;
        var clickhandler = $("&lt;div&gt;&lt;/div&gt;").css({"background":"transparent", 'width': '100%', 'height': '100%', 'position':'absolute', 'top':0, 'left':0});&#13;
        presenter.$view.append(clickhandler);&#13;
    };&#13;
&#13;
    presenter.run = function AddonParagraph_run(view, model) {&#13;
        presenter.initializeEditor(view, model, false);&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
    };&#13;
&#13;
    presenter.initializeEditor = function AddonParagraph_initializeEditor(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.$view.on('click', function viewClickHandler(e) {&#13;
            e.stopPropagation();&#13;
            e.preventDefault();&#13;
        });&#13;
&#13;
        presenter.$view.find('.paragraph-wrapper').attr('id', presenter.configuration.ID + '-wrapper');&#13;
&#13;
        presenter.placeholder = new presenter.placeholderElement();&#13;
        presenter.configuration.plugins = presenter.getPlugins();&#13;
        presenter.addPlugins();&#13;
&#13;
        tinymce.init(presenter.getTinymceInitConfiguration(presenter.getTinyMceSelector())).then(function (editors) {&#13;
            presenter.editor = editors[0];&#13;
            presenter.onInit();&#13;
            &#13;
            if (isIOSSafari()) {&#13;
                presenter.findIframeAndSetStyles();&#13;
            }&#13;
&#13;
            presenter.editor.on('blur', function () {&#13;
                presenter.sendOnBlurEvent();&#13;
            });&#13;
        });&#13;
        &#13;
        if(isIOSSafari()) {&#13;
            var input = document.createElement("input");&#13;
            input.type = "text";&#13;
            $(input).css('display', 'none');&#13;
            presenter.$view.append(input);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getTinyMceSelector = function AddonParagraph_getTinyMceSelector() {&#13;
        return '#' + presenter.configuration.ID + '-wrapper .paragraph_field';&#13;
    };&#13;
&#13;
    presenter.getTinymceInitConfiguration = function AddonParagraph_getTinyMceConfiguration(selector) {&#13;
        var layoutType = presenter.configuration.layoutType;&#13;
&#13;
        return {&#13;
            plugins: presenter.configuration.plugins,&#13;
            selector : selector,&#13;
            width: presenter.configuration.width,&#13;
            height: presenter.configuration.textAreaHeight,&#13;
            statusbar: false,&#13;
            menubar: false,&#13;
            toolbar: layoutType === "Default" ? presenter.configuration.toolbar : presenter.getSpecifyToolbar(layoutType),&#13;
            content_css: presenter.configuration.content_css,&#13;
            setup: presenter.setup,&#13;
            language: layoutType === "Default" ? presenter.LANGUAGES.DEFAULT : presenter.LANGUAGES.FRENCH&#13;
        };&#13;
    };&#13;
&#13;
     presenter.findIframeAndSetStyles = function AddonParagraph_findIframeAndSetStyles() {&#13;
        var iframe = presenter.$view.find(".paragraph-wrapper").find("iframe"),&#13;
            body = $(iframe).contents().find("#tinymce"),&#13;
            element = body.find("p");&#13;
&#13;
        element.css({&#13;
            'overflow-wrap': 'break-word',&#13;
            'word-wrap': 'break-word',&#13;
            '-ms-word-break': 'break-all',&#13;
            'word-break': 'break-word',&#13;
            '-ms-hyphen': 'auto',&#13;
            '-moz-hyphens': 'auto',&#13;
            '-webkit-hyphens': 'auto',&#13;
            'hyphens': 'auto'&#13;
        });&#13;
&#13;
        body.css('min-height', 'initial');&#13;
&#13;
         if(presenter.configuration.isToolbarHidden) {&#13;
             iframe.css('height', presenter.configuration.height);&#13;
         }&#13;
&#13;
        presenter.$view.find(".paragraph-wrapper").css("overflow", "scroll");&#13;
    };&#13;
&#13;
    presenter.validateToolbar = function AddonParagraph_validateToolbar(controls, width) {&#13;
        if (!controls) {&#13;
            controls = presenter.DEFAULTS.TOOLBAR;&#13;
        }&#13;
&#13;
        controls = controls.split(" ");&#13;
        if (controls.indexOf("|") != -1) {&#13;
            return presenter.parseToolbarWithGroups(controls, width);&#13;
        } else {&#13;
            return presenter.parseToolbarWithoutGroups(controls, width);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.parseToolbarWithGroups = function (controls, toolbarWidth) {&#13;
        var controlGroups = controls.join(" ").split("|");&#13;
        return controlGroups.filter(function (group) {&#13;
            return group.trim().length &gt; 0;&#13;
        }).map(function (group) {&#13;
            return presenter.parseToolbarWithoutGroups(group.trim().split(" "), toolbarWidth);&#13;
        }).join(" | ");&#13;
    };&#13;
&#13;
    presenter.parseToolbarWithoutGroups = function (controls, toolbarWidth) {&#13;
        var filteredControls = controls.filter(function(param){&#13;
            return presenter.ALLOWED_TOOLBAR_BUTTONS.indexOf(param) != -1;&#13;
        });&#13;
&#13;
        var result = "";&#13;
        var bufor = 0;&#13;
        var widthToAdd = 0;&#13;
        for(var i = 0; i &lt; filteredControls.length; i++) {&#13;
            if (filteredControls[i] !== presenter.DEFAULTS.STYLE_SELECT_NAME) {&#13;
                widthToAdd = presenter.DEFAULTS.BUTTON_WIDTH;&#13;
            } else {&#13;
                widthToAdd = presenter.DEFAULTS.FORMAT_WIDTH;&#13;
            }&#13;
&#13;
            if (bufor + widthToAdd &lt; toolbarWidth) {&#13;
                bufor += widthToAdd;&#13;
                result += filteredControls[i].trim() + " ";&#13;
            } else {&#13;
                bufor = widthToAdd;&#13;
                result += "| " + filteredControls[i].trim() + " ";&#13;
            }&#13;
        }&#13;
&#13;
        return result.trim();&#13;
    };&#13;
&#13;
    /**&#13;
     * Parses model and set settings to default values if either of them is empty&#13;
     *&#13;
     * @param model&#13;
     * @returns {{fontFamily: *, fontSize: *}}&#13;
     */&#13;
    presenter.validateModel = function AddonParagraph_validateModel(model) {&#13;
        var fontFamily = model['Default font family'],&#13;
            fontSize = model['Default font size'],&#13;
            isToolbarHidden = ModelValidationUtils.validateBoolean(model['Hide toolbar']),&#13;
            isPlaceholderEditable = ModelValidationUtils.validateBoolean(model['Editable placeholder']),&#13;
            toolbar = presenter.validateToolbar(model['Custom toolbar'], model.Width),&#13;
            height = model.Height,&#13;
            hasDefaultFontFamily = false,&#13;
            hasDefaultFontSize = false,&#13;
            layoutType = model["Layout Type"] || "Default";&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(fontFamily)) {&#13;
            fontFamily = presenter.DEFAULTS.FONT_FAMILY;&#13;
            hasDefaultFontFamily = true;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(fontSize)) {&#13;
            fontSize = presenter.DEFAULTS.FONT_SIZE;&#13;
            hasDefaultFontSize = true;&#13;
        }&#13;
&#13;
        height -= !isToolbarHidden ? 37 : 2;&#13;
&#13;
        return {&#13;
            ID: model["ID"],&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            isValid: true,&#13;
            fontFamily: fontFamily,&#13;
            fontSize: fontSize,&#13;
            isToolbarHidden: isToolbarHidden,&#13;
            toolbar: toolbar,&#13;
            textAreaHeight: height,&#13;
            hasDefaultFontFamily: hasDefaultFontFamily,&#13;
            hasDefaultFontSize: hasDefaultFontSize,&#13;
            content_css: model['Custom CSS'],&#13;
            isPlaceholderSet: !ModelValidationUtils.isStringEmpty(model["Placeholder Text"]),&#13;
            placeholderText: model["Placeholder Text"],&#13;
            pluginName: presenter.makePluginName(model["ID"]),&#13;
            width: model['Width'],&#13;
            height: parseInt(height, 10),&#13;
            layoutType: layoutType,&#13;
            isPlaceholderEditable: isPlaceholderEditable&#13;
        };&#13;
    };&#13;
&#13;
    /**&#13;
     * Initialize the addon.&#13;
     * For now the height is set to addon height minus 37 which is TinyMCE toolbar height.&#13;
     * It was not possible to get that value in easy and dynamic way and it didn't make sense&#13;
     * for prototype purpose. Also the set of controls is static and it could be be moved to&#13;
     * configuration.&#13;
     */&#13;
    presenter.getPlugins = function AddonParagraph_getPlugins() {&#13;
        var plugins = [];&#13;
        if (presenter.configuration.toolbar.indexOf('forecolor') &gt; -1 ||&#13;
            presenter.configuration.toolbar.indexOf('backcolor') &gt; -1 ) {&#13;
            plugins.push("textcolor");&#13;
        }&#13;
&#13;
        if(presenter.configuration.isPlaceholderSet) {&#13;
            plugins.push(presenter.configuration.pluginName);&#13;
        }&#13;
&#13;
        return plugins.join(" ");&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = presenter.upgradePlaceholderText(model);&#13;
        return presenter.upgradeEditablePlaceholder(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.upgradePlaceholderText = function (model) {&#13;
        return presenter.upgradeAttribute(model, "Placeholder Text", "");&#13;
    };&#13;
&#13;
    presenter.upgradeEditablePlaceholder = function (model) {&#13;
        return presenter.upgradeAttribute(model, "Editable placeholder", "");&#13;
    };&#13;
&#13;
    presenter.upgradeAttribute = function (model, attrName, defaultValue) {&#13;
        var upgradedModel = {};&#13;
        jQuery.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model[attrName] == undefined) {&#13;
            upgradedModel[attrName] = defaultValue;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonParagraph_destroy(event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.placeholder = null;&#13;
        presenter.editor.destroy();&#13;
        presenter.jQueryTinyMCEHTML.off();&#13;
&#13;
        presenter.$view.off();&#13;
        presenter.$tinyMCEToolbar.off();&#13;
&#13;
        tinymce.AddOnManager.PluginManager.items.length = 0;&#13;
        presenter.$tinyMCEToolbar = null;&#13;
        presenter.jQueryTinyMCEHTML = null;&#13;
        presenter.configuration = null;&#13;
        presenter.$view = null;&#13;
        presenter.view = null;&#13;
        presenter.editor = null;&#13;
        presenter.isVisibleValue = null;&#13;
        presenter.findIframeAndSetStyles = null;&#13;
        presenter.getSpecifyToolbar = null;&#13;
        presenter.addStylesToButton = null;&#13;
        presenter.getButton = null;&#13;
        presenter.onBlur = null;&#13;
        presenter.onFocus = null;&#13;
        presenter.onInit = null;&#13;
        presenter.setIframeHeight = null;&#13;
        presenter.destroy = null;&#13;
        presenter.tinyMceContainer = null;&#13;
        presenter.editor = null;&#13;
        presenter.playerController = null;&#13;
        presenter.LANGUAGES = null;&#13;
    };&#13;
&#13;
    presenter.addPlugins = function AddonParagraph_addPlugins() {&#13;
        if (presenter.configuration.isPlaceholderSet) {&#13;
            presenter.addPlaceholderPlugin();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.makePluginName = function AddonParagraph_makePluginName(addonID) {&#13;
        var name = 'placeholder';&#13;
        addonID.replace(/[a-z0-9]+/gi, function(x) {&#13;
            name += "_" + x;&#13;
        });&#13;
&#13;
        return name;&#13;
    };&#13;
&#13;
     presenter.onFocus = function AddonParagraph_onFocus() {&#13;
        if (presenter.placeholder.isSet) {&#13;
            presenter.placeholder.removePlaceholder();&#13;
            presenter.placeholder.shouldBeSet = (presenter.placeholder.getEditorContent() == "");&#13;
        }&#13;
    };&#13;
&#13;
     presenter.onBlur = function AddonParagraph_onBlur() {&#13;
        if (presenter.placeholder.shouldBeSet) {&#13;
            presenter.placeholder.addPlaceholder();&#13;
        } else {&#13;
            presenter.placeholder.removePlaceholder();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addPlaceholderPlugin = function AddonParagraph_addPlaceholderPlugin() {&#13;
        tinymce.PluginManager.add(presenter.configuration.pluginName, function(editor) {&#13;
            editor.on('init', function () {&#13;
                presenter.placeholder.init(editor.id);&#13;
                editor.on('blur', presenter.onBlur);&#13;
                editor.on('focus', presenter.onFocus);&#13;
            });&#13;
        });&#13;
    };&#13;
&#13;
    presenter.placeholderElement = function AddonParagraph_placeholderElement() {&#13;
        this.isSet = true;&#13;
        this.shouldBeSet = false;&#13;
        this.placeholderText = presenter.configuration.isPlaceholderEditable ? "" : presenter.configuration.placeholderText;&#13;
        this.contentAreaContainer = null;&#13;
        this.el = null;&#13;
        this.attrs = {style: {position: 'absolute', top:'5px', left:0, color: '#888', padding: '1%', width:'98%', overflow: 'hidden'} };&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.init = function AddonParagraph_placeholderElement_init() {&#13;
        this.contentAreaContainer = presenter.editor.getBody();&#13;
        this.el = presenter.editor.dom.add(this.contentAreaContainer, "placeholder", this.attrs, this.placeholderText);&#13;
&#13;
        tinymce.DOM.setStyle(this.contentAreaContainer, 'position', 'relative');&#13;
        tinymce.DOM.addClass(this.el, "placeholder");&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.addPlaceholder = function AddonParagraph_addPlaceholder() {&#13;
        this.el = presenter.editor.dom.add(this.contentAreaContainer, "placeholder", this.attrs, this.placeholderText);&#13;
        presenter.editor.dom.addClass(this.el, "placeholder");&#13;
        this.isSet = true;&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.setPlaceholderAfterEditorChange = function AddonParagraph_setPlaceholderAfterEditorChange() {&#13;
        if (this.getEditorContent() == "") {&#13;
            this.shouldBeSet = true;&#13;
        } else {&#13;
            this.shouldBeSet = false;&#13;
            this.removePlaceholder();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.removePlaceholder = function AddonParagraph_removePlaceholder() {&#13;
        this.isSet = false;&#13;
        presenter.editor.dom.remove(this.el);&#13;
    };&#13;
&#13;
    presenter.placeholderElement.prototype.getEditorContent = function AddonParagraph_getEditorContent() {&#13;
        return presenter.editor.getContent();&#13;
    };&#13;
&#13;
    presenter.onTinymceChange = function AddonParagraph_onTinymceChange(editor, event) {&#13;
        if (presenter.configuration.isPlaceholderSet) {&#13;
            presenter.placeholder.setPlaceholderAfterEditorChange();&#13;
        }&#13;
    };&#13;
&#13;
     presenter.getSpecifyToolbar = function AddonParagraph_getSpecifyToolbar(language) {&#13;
        var toolbar = "";&#13;
&#13;
        if (language === "French") {&#13;
            toolbar = "customBold customItalic customUnderline numlist bullist alignleft aligncenter alignright alignjustify";&#13;
        }&#13;
&#13;
        return toolbar;&#13;
    };&#13;
&#13;
     presenter.addStylesToButton =  function AddonParagraph_addStylesToButton() {&#13;
        var boldButton = presenter.$view.find("[aria-label='" + presenter.getButton("Bold").title + "'] button"),&#13;
            italicButton = presenter.$view.find("[aria-label='" + presenter.getButton("Italic").title + "'] button"),&#13;
            underlineButton = presenter.$view.find("[aria-label='" + presenter.getButton("Underline").title + "'] button");&#13;
&#13;
        boldButton.css({'font-family': 'tinymce', 'font-size': '18px', 'font-weight': 'bold'});&#13;
        italicButton.css({'font-family': 'tinymce', 'font-size': '18px', 'font-weight': 'bold', 'font-style': 'italic'});&#13;
        underlineButton.css({'font-family': 'tinymce', 'font-size': '18px', 'font-weight': 'bold', 'text-decoration': 'underline'});&#13;
    };&#13;
&#13;
     presenter.getButton = function AddonParagraph_getButton(type) {&#13;
        var layoutLanguage = presenter.configuration.layoutType;&#13;
&#13;
        var french = {&#13;
            Bold: {&#13;
                text: '\u0047',&#13;
                title: 'Bold'&#13;
            },&#13;
            Underline: {&#13;
                text: 'S',&#13;
                title: 'Underline'&#13;
            },&#13;
            Italic: {&#13;
                text: 'I',&#13;
                title: 'Italic'&#13;
            }&#13;
        };&#13;
&#13;
        var languages = {&#13;
            French: french&#13;
        };&#13;
&#13;
        return languages[layoutLanguage][type];&#13;
    };&#13;
&#13;
     presenter.createButton = function AddonParagraph_createButton(editor, type) {&#13;
        var button = presenter.getButton(type);&#13;
&#13;
        return {&#13;
            text: button.text,&#13;
            title: button.title,&#13;
            icon: false,&#13;
            onclick: function() {&#13;
                editor.execCommand(type);&#13;
            }&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setup = function AddonParagraph_setup(ed) {&#13;
        if (presenter.editor == null) {&#13;
            presenter.editor = ed;&#13;
        }&#13;
&#13;
        ed.on("NodeChange", presenter.onNodeChange);&#13;
        ed.on("keyup", presenter.onTinymceChange);&#13;
        if (presenter.configuration.layoutType !== "Default") {&#13;
            ed.addButton('customBold', presenter.createButton(this, "Bold"));&#13;
            ed.addButton('customItalic', presenter.createButton(this, "Italic"));&#13;
            ed.addButton('customUnderline', presenter.createButton(this, "Underline"));&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onNodeChange = function AddonParagraph_onNodeChange() {&#13;
        presenter.setStyles();&#13;
    };&#13;
&#13;
    presenter.setStyles = function AddonParagraph_setStyles() {&#13;
        if (presenter.editor == null) {&#13;
            return;&#13;
        }&#13;
&#13;
        var hasDefaultFontFamily = presenter.configuration.hasDefaultFontFamily,&#13;
            hasDefaultFontSize = presenter.configuration.hasDefaultFontSize,&#13;
            hasContentCss = !ModelValidationUtils.isStringEmpty(presenter.configuration.content_css);&#13;
&#13;
        if (presenter.editor.dom.$("placeholder").length &gt; 0) {&#13;
            return;&#13;
        }&#13;
&#13;
        if (!hasDefaultFontFamily || !hasDefaultFontSize || !hasContentCss) {&#13;
            var elements = [ presenter.editor.dom.$('p'), presenter.editor.dom.$('ol'), presenter.editor.dom.$('ul')];&#13;
&#13;
            for (var i = 0; i &lt; elements.length; i++) {&#13;
                if (elements[i].length == 0) {&#13;
                    continue;&#13;
                }&#13;
&#13;
                if (!hasDefaultFontFamily || !hasContentCss) {&#13;
                    elements[i].css('font-family', presenter.configuration.fontFamily);&#13;
                }&#13;
&#13;
                if (!hasDefaultFontSize || !hasContentCss) {&#13;
                    elements[i].css('font-size', presenter.configuration.fontSize);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setIframeHeight = function AddonParagraph_setIframeHeight() {&#13;
        if (presenter.$view == null) {&#13;
            return;&#13;
        }&#13;
&#13;
        var $editor = presenter.$view.find('#' + presenter.editor.id + '_ifr'),&#13;
            editorHeight = presenter.$view.height();&#13;
&#13;
        if (!presenter.configuration.isToolbarHidden) {&#13;
            editorHeight -= presenter.$view.find('.mce-toolbar').height();&#13;
        }&#13;
&#13;
        $editor.height(editorHeight);&#13;
    };&#13;
&#13;
    presenter.onInit = function AddonParagraph_onInit() {&#13;
        if (presenter.configuration.isToolbarHidden) {&#13;
            presenter.$view.find('.mce-container.mce-panel.mce-first').remove();&#13;
            presenter.$view.find('.mce-edit-area').css('border-top-width', '0');&#13;
        }&#13;
&#13;
        presenter.jQueryTinyMCEHTML = $(presenter.editor.dom.select('html'));&#13;
        presenter.jQueryTinyMCEHTML.click(function editorDOMSelectClick() {&#13;
            presenter.editor.contentWindow.focus();&#13;
            $(presenter.editor.contentDocument).find('body').focus();&#13;
        });&#13;
&#13;
        presenter.editor.dom.loadCSS(DOMOperationsUtils.getResourceFullPath(presenter.playerController, "addons/resources/style.css"));&#13;
        presenter.editor.dom.$("body").css("height", "100%");&#13;
&#13;
        presenter.setStyles();&#13;
        if (presenter.configuration.state !== undefined) {&#13;
            presenter.editor.setContent(presenter.configuration.state, {format : 'raw'});&#13;
        }&#13;
&#13;
        presenter.$tinyMCEToolbar = presenter.$view.find('.mce-toolbar');&#13;
        presenter.$tinyMCEToolbar.on('resize', presenter.setIframeHeight);&#13;
&#13;
        presenter.tinyMceContainer = presenter.$view.find('.mce-container.mce-panel.mce-tinymce');&#13;
        presenter.tinyMceContainer.css('border', 0);&#13;
&#13;
&#13;
        if (presenter.configuration.layoutType !== "Default") {&#13;
            presenter.addStylesToButton();&#13;
        }&#13;
&#13;
        if (presenter.configuration.isPlaceholderEditable &amp;&amp; presenter.state == null) {&#13;
            presenter.setText(presenter.configuration.placeholderText);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonParagraph_setPlayerController(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
&#13;
    presenter.getState = function AddonParagraph_getState() {&#13;
        var tinymceState;&#13;
        if (presenter.editor != undefined &amp;&amp; presenter.editor.hasOwnProperty("id")) {&#13;
            try{&#13;
                tinymceState = presenter.editor.getContent({format : 'raw'});&#13;
            }catch(err) {&#13;
                return  presenter.state;&#13;
            }&#13;
        } else {&#13;
            tinymceState = '';&#13;
        }&#13;
&#13;
        // iOS fix to hide keyboard after page change&#13;
        // https://github.com/tinymce/tinymce/issues/3441&#13;
        if(isIOSSafari()){&#13;
            var iframe = presenter.$view.find('iframe');&#13;
            iframe.focus();&#13;
            document.activeElement.blur();&#13;
        }&#13;
&#13;
        return JSON.stringify({&#13;
            'tinymceState' : tinymceState,&#13;
            'isVisible' : presenter.isVisibleValue&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function AddonParagraph_setState(state) {&#13;
        var parsedState = JSON.parse(state),&#13;
            tinymceState = parsedState.tinymceState;&#13;
&#13;
        presenter.configuration.isVisible = parsedState.isVisible;&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
&#13;
        if (tinymceState!=undefined &amp;&amp; tinymceState!="" &amp;&amp; tinymceState.indexOf("class=\"placeholder\"") == -1) {&#13;
            if (presenter.editor != null &amp;&amp; presenter.editor.initialized) {&#13;
                presenter.editor.setContent(tinymceState, {format: 'raw'});&#13;
                presenter.state = state;&#13;
            } else {&#13;
                presenter.configuration.state = tinymceState;&#13;
                presenter.state = state;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.reset = function AddonParagraph_reset() {&#13;
        presenter.setVisibility(presenter.configuration.isVisible);&#13;
        presenter.placeholder.removePlaceholder();&#13;
        if (presenter.configuration.isPlaceholderEditable) {&#13;
            presenter.setText(presenter.configuration.placeholderText);&#13;
        } else {&#13;
            presenter.editor.setContent('');&#13;
        }&#13;
        presenter.placeholder.addPlaceholder();&#13;
    };&#13;
&#13;
    presenter.show = function AddonParagraph_show() {&#13;
        presenter.configuration.isVisible = true;&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    presenter.hide = function AddonParagraph_hide() {&#13;
        presenter.configuration.isVisible = false;&#13;
        presenter.setVisibility(false);&#13;
    };&#13;
&#13;
    presenter.isVisible = function AddonParagraph_isVisible() {&#13;
        return presenter.configuration.isVisible;&#13;
    };&#13;
&#13;
    presenter.setText = function(text) {&#13;
        if (presenter.editor != null &amp;&amp; presenter.editor.initialized) {&#13;
            if (Array.isArray(text)) {&#13;
                presenter.editor.setContent(text[0]);&#13;
            } else if (typeof text === 'string' || text instanceof String) {&#13;
                presenter.editor.setContent(text);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>