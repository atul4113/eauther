<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Table_Of_Contents" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Header" nameLabel="Table_Of_Contents_property_header" type="string"/>
        <property displayName="Don't show pages" name="DontShowPages" nameLabel="Table_Of_Contents_property_dont_show_pages" type="string"/>
        <property displayName="Display Type" name="displayType" nameLabel="Table_Of_Contents_property_display_type" type="{default, list, comboList, icons, icons+list}"/>
	</model>
<css>.table-of-contents {&#13;
    border: 0;&#13;
    padding: 1px;&#13;
    color: #7C818E;&#13;
    direction: inherit;&#13;
}&#13;
&#13;
.table-of-contents-title {&#13;
    height: 25px;&#13;
    font-weight: bold;&#13;
    color: #7F7F7F;&#13;
    font-family: Verdana, Tahoma, "DejaVu Sans", sans-serif;&#13;
    margin: 1px;&#13;
    display: table-cell;&#13;
    vertical-align: middle;&#13;
}&#13;
&#13;
.table-of-contents-pagination {&#13;
    height: 30px;&#13;
    vertical-align: middle;&#13;
    text-decoration: none;&#13;
    position: absolute;&#13;
    bottom: 0;&#13;
}&#13;
&#13;
.table-of-contents-pagination a,&#13;
.table-of-contents-pagination a:hover {&#13;
    text-decoration: none;&#13;
    margin-left: 5px;&#13;
    margin-right: 5px;&#13;
}&#13;
&#13;
.table-of-contents-pagination .selected {&#13;
    text-decoration: underline;&#13;
}&#13;
&#13;
.table-of-contents-list {&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.table-of-contents-list ul {&#13;
    padding-left: 5px;&#13;
}&#13;
&#13;
.table-of-contents-list ul li a {&#13;
    text-decoration: none;&#13;
}&#13;
&#13;
.imageContainer {&#13;
    display: inline-block;&#13;
    margin: 5px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.imageElement {&#13;
    width: 100px;&#13;
    height: 140px;&#13;
}&#13;
&#13;
.iconsList {&#13;
    display: flex;&#13;
    width: 100%;&#13;
    overflow: auto;&#13;
}&#13;
&#13;
.listElement {&#13;
    text-align: center;&#13;
    font-size: 15px;&#13;
    word-wrap: break-word;&#13;
    line-height: 17px;&#13;
    word-break: break-all;&#13;
}&#13;
</css><view>&lt;div class="table-of-contents"&gt;&#13;
    &lt;div class="table-of-contents-title"&gt;&#13;
        Table of Contents&#13;
    &lt;/div&gt;&#13;
    &lt;div class="table-of-contents-list"&gt;&#13;
        &lt;ol&gt;&#13;
        &lt;/ol&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="table-of-contents-pagination"&gt;&#13;
        &lt;a href="#"&gt;1&lt;/a&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="table-of-contents"&gt;&#13;
    &lt;div class="table-of-contents-title"&gt;&#13;
        Table of Contents&#13;
    &lt;/div&gt;&#13;
    &lt;div class="table-of-contents-list"&gt;&#13;
        &lt;ol&gt;&#13;
        &lt;/ol&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="table-of-contents-pagination"&gt;&#13;
        &lt;a href="#"&gt;1&lt;/a&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonTable_Of_Contents_create(){&#13;
    var presenter = function() {};&#13;
    var presentationController;&#13;
&#13;
    var elementsHeights = {};&#13;
&#13;
    presenter.keyboardControllerObject = null;&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        E01: "Values in property 'Don't show' pages must be numeric",&#13;
        E02: "Values in property 'Don't show' pages must be greater than 0",&#13;
        E03: "Values in property 'Don't show' pages must be unique"&#13;
    };&#13;
&#13;
    function getErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function getCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    function setElementsDimensions(addonWidth, addonHeight) {&#13;
        var wrapper = presenter.$view.find('.table-of-contents:first')[0];&#13;
        var wrapperDimensions = DOMOperationsUtils.getOuterDimensions(wrapper);&#13;
        var wrapperDistances = DOMOperationsUtils.calculateOuterDistances(wrapperDimensions);&#13;
        $(wrapper).css({&#13;
            width: addonWidth - wrapperDistances.horizontal,&#13;
            height: addonHeight - wrapperDistances.vertical&#13;
        });&#13;
&#13;
        elementsHeights.wrapper = $(wrapper).height();&#13;
&#13;
        var title = presenter.$view.find('.table-of-contents-title')[0];&#13;
        var titleDimensions = DOMOperationsUtils.getOuterDimensions(title);&#13;
        var titleDistances = DOMOperationsUtils.calculateOuterDistances(titleDimensions);&#13;
        $(title).css({&#13;
            width: $(wrapper).width() - titleDistances.horizontal&#13;
        });&#13;
&#13;
        elementsHeights.title = $(title).height() + titleDistances.vertical;&#13;
&#13;
        var pagination = presenter.$view.find('.table-of-contents-pagination')[0];&#13;
        var paginationDimensions = DOMOperationsUtils.getOuterDimensions(pagination);&#13;
        var paginationDistances = DOMOperationsUtils.calculateOuterDistances(paginationDimensions);&#13;
        $(pagination).css({&#13;
            width: $(wrapper).width() - paginationDistances.horizontal&#13;
        });&#13;
&#13;
        elementsHeights.pagination = $(pagination).height() + paginationDistances.vertical;&#13;
&#13;
        var list = presenter.$view.find('.table-of-contents-list')[0];&#13;
        var listDimensions = DOMOperationsUtils.getOuterDimensions(list);&#13;
        var listDistances = DOMOperationsUtils.calculateOuterDistances(listDimensions);&#13;
        $(list).css({&#13;
            height: $(wrapper).height - elementsHeights.title - elementsHeights.pagination - listDistances.vertical,&#13;
            width: $(wrapper).width - listDistances.horizontal&#13;
        });&#13;
&#13;
        elementsHeights.list = $(list).height() + listDistances.vertical;&#13;
    }&#13;
&#13;
&#13;
    function generateElement (text, page, isPreview) {&#13;
        var $element = $(document.createElement('li')),&#13;
            $link = $(document.createElement('a'));&#13;
&#13;
        $link.text(text);&#13;
        $link.attr('href', '#');&#13;
        $element.html($link);&#13;
        &#13;
        if (!isPreview){&#13;
            var presentation = presentationController.getPresentation(),&#13;
                currentPageIndex = presentation.getPage(presentationController.getCurrentPageIndex()).getId();&#13;
            &#13;
            if (currentPageIndex == page.index) {&#13;
                $link.addClass('current-page');&#13;
            }&#13;
        }&#13;
        &#13;
        return $element;&#13;
    }&#13;
&#13;
    function generateListElements (isPreview) {&#13;
        var $list = presenter.$view.find('.table-of-contents .table-of-contents-list ol');&#13;
&#13;
        for (var i = 0; i &lt; presenter.pages.length; i++) {&#13;
            $list.append(generateElement(presenter.pages[i].name, presenter.pages[i], isPreview));&#13;
        }&#13;
&#13;
        return $list.outerHeight();&#13;
    }&#13;
&#13;
    function generateComboElement (text, isPreview) {&#13;
        var element;&#13;
&#13;
        if(!isPreview){&#13;
            var presentation = presentationController.getPresentation();&#13;
            var currentPageName = presentation.getPage(presentationController.getCurrentPageIndex()).getName();&#13;
&#13;
            if(text == currentPageName){&#13;
                element = $('&lt;option selected&gt;&lt;/option&gt;');&#13;
            }else{&#13;
                element = $('&lt;option&gt;&lt;/option&gt;');&#13;
            }&#13;
        }else{&#13;
            element = $('&lt;option&gt;&lt;/option&gt;');&#13;
        }&#13;
        element.text(text);&#13;
&#13;
        return element;&#13;
    }&#13;
&#13;
    function generateComboList (isPreview) {&#13;
        var selectionList = $('&lt;select class="comboList"&gt;&lt;/select&gt;');&#13;
        presenter.$view.find('.table-of-contents').append(selectionList);&#13;
        var comboList = presenter.$view.find('.comboList');&#13;
        $(comboList).css("width", "100%");&#13;
&#13;
        for (var i = 0; i &lt; presenter.pages.length; i++) {&#13;
            comboList.append(generateComboElement(presenter.pages[i].name, isPreview));&#13;
        }&#13;
    }&#13;
&#13;
    function generateIconListElement (page, isPreview) {&#13;
        var anchorElement = $('&lt;a class="imageContainer"&gt;&lt;/a&gt;'),&#13;
            imgElement = document.createElement('img'),&#13;
            listElement = $('&lt;div class="listElement"&gt;&lt;/div&gt;');&#13;
&#13;
        $(imgElement).addClass("imageElement");&#13;
        imgElement.src = page.preview;&#13;
        $(listElement).text(page.name);&#13;
        $(anchorElement).append(imgElement).append(listElement);&#13;
&#13;
        if(!isPreview) {&#13;
            var presentation = presentationController.getPresentation(),&#13;
                commander = presentationController.getCommands(),&#13;
                currentPageIndex = presentation.getPage(presentationController.getCurrentPageIndex()).getId();&#13;
&#13;
            if (currentPageIndex == page.index) {&#13;
                $(anchorElement).addClass('current-page');&#13;
            }&#13;
&#13;
            $(anchorElement).click(function (event) {&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
&#13;
                if (currentPageIndex !== page.index) {&#13;
                    commander.gotoPageIndex(page.numberOfIndex);&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        return anchorElement;&#13;
    }&#13;
&#13;
    function generateIconElement (page, isPreview) {&#13;
        var anchorElement = $('&lt;a class="imageContainer"&gt;&lt;/a&gt;'),&#13;
            imgElement = document.createElement('img');&#13;
&#13;
        $(imgElement).addClass("imageElement");&#13;
        imgElement.src = page.preview;&#13;
        $(anchorElement).append(imgElement);&#13;
&#13;
        if(!isPreview) {&#13;
            var presentation = presentationController.getPresentation(),&#13;
                commander = presentationController.getCommands(),&#13;
                currentPageIndex = presentation.getPage(presentationController.getCurrentPageIndex()).getId();&#13;
&#13;
            if (currentPageIndex == page.index) {&#13;
                $(anchorElement).addClass('current-page');&#13;
            }&#13;
&#13;
            $(anchorElement).click(function (event) {&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
&#13;
                if (currentPageIndex !== page.index) {&#13;
                    commander.gotoPageIndex(page.numberOfIndex);&#13;
                }&#13;
            });&#13;
        }&#13;
&#13;
        return anchorElement;&#13;
    }&#13;
&#13;
    function generateIcons (isPreview) {&#13;
        var iconsList = $('&lt;div class="iconsList"&gt;&lt;/div&gt;');&#13;
        presenter.$view.find('.table-of-contents').append(iconsList);&#13;
&#13;
        for (var i = 0; i &lt; presenter.pages.length; i++) {&#13;
            iconsList.append(generateIconElement(presenter.pages[i], isPreview));&#13;
        }&#13;
    }&#13;
&#13;
    function generateIconsAndList (isPreview) {&#13;
        var iconsList = $('&lt;div class="iconsList"&gt;&lt;/div&gt;');&#13;
        presenter.$view.find('.table-of-contents').append(iconsList);&#13;
&#13;
        for (var i = 0; i &lt; presenter.pages.length; i++) {&#13;
            iconsList.append(generateIconListElement(presenter.pages[i], isPreview));&#13;
        }&#13;
    }&#13;
&#13;
    presenter.pageStartIndex = function(page) {&#13;
        var index = 0;&#13;
        for (var i = 0; i &lt; page; i++) {&#13;
            index += presenter.pagination.pages[i].length;&#13;
        }&#13;
        return index+1;&#13;
    };&#13;
&#13;
    function displayPage(page) {&#13;
        var $list = presenter.$view.find('.table-of-contents .table-of-contents-list ol'),&#13;
            pages = presenter.pagination.pages[page], i,&#13;
            startIndex = presenter.pageStartIndex(page),&#13;
            $pageList = presenter.$view.find('.table-of-contents-pagination');&#13;
&#13;
        $list.find('li').hide();&#13;
        $list.attr('start', '' + startIndex);&#13;
        for (i = 0; i &lt; pages.length; i++) {&#13;
            $list.find('li:eq(' + pages[i] + ')').show();&#13;
        }&#13;
&#13;
        $pageList.children().removeClass('selected');&#13;
        $pageList.find('a').each(function(){&#13;
            if ($(this).text()==(page+1)) {&#13;
                $(this).addClass('selected');&#13;
            }&#13;
        });&#13;
   }&#13;
&#13;
    function isSpaceSufficient($list, spareHeight) {&#13;
        return $list.find('li:first').outerHeight() &lt; spareHeight;&#13;
    }&#13;
&#13;
    function paginateList(spareHeight, isPreview) {&#13;
        var $list = presenter.$view.find('.table-of-contents .table-of-contents-list ol');&#13;
        var $pagination = presenter.$view.find('.table-of-contents .table-of-contents-pagination');&#13;
&#13;
        if (!isSpaceSufficient($list, spareHeight)) return false;&#13;
&#13;
        var currentPageHeight = 0, page, i;&#13;
        presenter.pagination = {&#13;
            pages: [[]],&#13;
            size: 0&#13;
        };&#13;
&#13;
        $list.find('li').each(function (index, value) {&#13;
            var outerHeight = $(value).outerHeight();&#13;
&#13;
            if (currentPageHeight + outerHeight &gt; spareHeight) {&#13;
                presenter.pagination.size++;&#13;
                currentPageHeight = 0;&#13;
                presenter.pagination.pages[presenter.pagination.size] = [];&#13;
            }&#13;
&#13;
            currentPageHeight += outerHeight;&#13;
            presenter.pagination.pages[presenter.pagination.size].push(index);&#13;
        });&#13;
&#13;
        for (i = 1; i &lt;= presenter.pagination.size; i++) {&#13;
            var $element = $(document.createElement('a'));&#13;
            $element.text(i + 1);&#13;
            $element.attr('href', '#');&#13;
            $pagination.append($element);&#13;
        }&#13;
&#13;
        displayPage(0);&#13;
        if (!isPreview) handlePaginationMouseActions();&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    function handleMouseClickActions() {&#13;
        var commander = presentationController.getCommands(),&#13;
            presentation = presentationController.getPresentation(),&#13;
            $list = presenter.$view.find('.table-of-contents-list ol'),&#13;
            currentPageIndex = presentation.getPage(presentationController.getCurrentPageIndex()).getId(),&#13;
            pageName;&#13;
&#13;
        if(presenter.configuration.displayType == 'comboList'){&#13;
            presenter.$view.find('.comboList').change(function(event){&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
                pageName = $(this).val();&#13;
                for(var p in presenter.pages) {&#13;
                    var page = presenter.pages[p];&#13;
&#13;
                    if (currentPageIndex !== page.index &amp;&amp; pageName === page.name) {&#13;
                        commander.gotoPageIndex(page.numberOfIndex);&#13;
                    }&#13;
                }&#13;
            });&#13;
        }else{&#13;
            $list.find('li a').each(function () {&#13;
                $(this).click(function (event) {&#13;
                    event.stopPropagation();&#13;
                    event.preventDefault();&#13;
                    pageName = $(this).text();&#13;
                    for(var p in presenter.pages) {&#13;
                        var page = presenter.pages[p];&#13;
&#13;
                        if (currentPageIndex !== page.index &amp;&amp; pageName === page.name) {&#13;
                            commander.gotoPageIndex(page.numberOfIndex);&#13;
                        }&#13;
                    }&#13;
                });&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    function handlePaginationMouseActions() {&#13;
        var lists = presenter.$view.find('.table-of-contents .table-of-contents-list'),&#13;
        $pagination = presenter.$view.find('.table-of-contents-pagination');&#13;
&#13;
        $pagination.click(function (event) {&#13;
            event.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$view.find('.table-of-contents-pagination a').each(function() {&#13;
            $(this).click(function(event) {&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
                displayPage(parseInt($(this).text(), 10) - 1);&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    function presenterLogic(view, model, isPreview) {&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            return false;&#13;
        }&#13;
&#13;
        function reportInsufficientSpace() {&#13;
            presenter.$view.html('&lt;strong&gt;Available space is insufficient! Please enlarge addon dimensions.&lt;/strong&gt;')&#13;
        }&#13;
&#13;
        presenter.pages = isPreview ? mockPresentationPages() : presenter.getPresentationPages();&#13;
        presenter.$view = $(view);&#13;
&#13;
        setElementsDimensions(model.Width, model.Height);&#13;
&#13;
        if(presenter.configuration.displayType == "comboList"){&#13;
            generateComboList(isPreview);&#13;
        }else if(presenter.configuration.displayType == "icons"){&#13;
            generateIcons(isPreview);&#13;
        }else if(presenter.configuration.displayType == "icons+list"){&#13;
            generateIconsAndList(isPreview);&#13;
        }else{&#13;
            var listHeight = generateListElements(isPreview),&#13;
                spareHeight = elementsHeights.wrapper - elementsHeights.title;&#13;
&#13;
            var $list = presenter.$view.find('.table-of-contents .table-of-contents-list ol');&#13;
            if (!isSpaceSufficient($list, spareHeight)) {&#13;
                reportInsufficientSpace();&#13;
            }&#13;
        }&#13;
&#13;
        if ((listHeight &gt; spareHeight) &amp;&amp; (presenter.configuration.displayType == "default" || presenter.configuration.displayType == "" || presenter.configuration.displayType == undefined)) {&#13;
            if (!paginateList(spareHeight - elementsHeights.pagination, isPreview)) {&#13;
                reportInsufficientSpace();&#13;
            }&#13;
        } else {&#13;
            presenter.$view.find('.table-of-contents-pagination').hide();&#13;
        }&#13;
&#13;
        if(presenter.configuration.displayType == "list"){&#13;
            var titleHeight = presenter.$view.find('.table-of-contents-title').height();&#13;
            presenter.$view.find(".table-of-contents-list").css({&#13;
               "height":  model.Height-titleHeight+"px",&#13;
               "overflow-y": "scroll"&#13;
            });&#13;
        }&#13;
&#13;
        if (!isPreview) handleMouseClickActions();&#13;
        if (!ModelValidationUtils.isStringEmpty(model['Header'])) {&#13;
        	presenter.$view.find('.table-of-contents .table-of-contents-title').text(model['Header'])&#13;
        }&#13;
&#13;
         presenter.buildKeyboardController();&#13;
    }&#13;
&#13;
    presenter.validateHiddenPages = function(hiddenPages) {&#13;
        if (typeof(hiddenPages) == 'undefined') {&#13;
            hiddenPages = '';&#13;
        }&#13;
&#13;
        var pages = hiddenPages.split(';').sort();&#13;
&#13;
        for (var i = 0; i &lt; pages.length; i++) {&#13;
            var numberObject = ModelValidationUtils.validateInteger(pages[i]);&#13;
&#13;
            if (!numberObject.isValid &amp;&amp; hiddenPages.length &gt; 0) {&#13;
                return getErrorObject("E01");&#13;
            }&#13;
&#13;
            if (pages[i] &lt; 0) {&#13;
                return getErrorObject("E02");&#13;
            }&#13;
&#13;
            if (pages[i] === pages[i - 1]) {&#13;
                return getErrorObject("E03");&#13;
            }&#13;
        }&#13;
        return getCorrectObject(pages);&#13;
    }&#13;
&#13;
    presenter.validateModel = function(model) {&#13;
        var pagesValidationResult = presenter.validateHiddenPages(model['DontShowPages']);&#13;
        if (!pagesValidationResult.isValid) {&#13;
            return pagesValidationResult;&#13;
        }&#13;
&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            hiddenPages: pagesValidationResult.value,&#13;
            displayType: model.displayType&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getPresentationPages = function() {&#13;
        var pages = [],&#13;
            presentation = presentationController.getPresentation(),&#13;
            pageCount = presentation.getPageCount();&#13;
&#13;
        for (var i = 0; i &lt; pageCount; i++) {&#13;
            if ($.inArray(String(i+1), presenter.configuration.hiddenPages) == -1) {&#13;
                var page = {};&#13;
                page.name = presentation.getPage(i).getName();&#13;
                page.index = presentation.getPage(i).getId();&#13;
                page.numberOfIndex = i;&#13;
                page.preview = presentation.getPage(i).getPreview();&#13;
&#13;
                pages.push(page);&#13;
            }&#13;
        }&#13;
&#13;
        return pages;&#13;
    };&#13;
&#13;
    function mockPresentationPages() {&#13;
        return [&#13;
            {index:"fwrg4g1",&#13;
             name:"Page 01",&#13;
             numberOfIndex:"0"},&#13;
            {index:"fwrg4g2",&#13;
             name:"Page 02",&#13;
             numberOfIndex:"1"},&#13;
            {index:"fwrg4g3",&#13;
             name:"Page 03",&#13;
             numberOfIndex:"2"},&#13;
            {index:"fwrg4g4",&#13;
             name:"Page 04",&#13;
             numberOfIndex:"3"},&#13;
            {index:"fwrg4g5",&#13;
             name:"Page 05",&#13;
             numberOfIndex:"4"},&#13;
            {index:"fwrg4g6",&#13;
             name:"Page 06",&#13;
             numberOfIndex:"5"},&#13;
            {index:"fwrg4g7",&#13;
             name:"Page 07",&#13;
             numberOfIndex:"6"},&#13;
            {index:"fwrg4g8",&#13;
             name:"Page 08",&#13;
             numberOfIndex:"7"},&#13;
            {index:"fwrg4g9",&#13;
             name:"Page 09",&#13;
             numberOfIndex:"8"},&#13;
            {index:"fwrg4g0",&#13;
             name:"Page 10",&#13;
             numberOfIndex:"9"}&#13;
        ];&#13;
    }&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        presenterLogic(view, model, true);&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        presenterLogic(view, model, false);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    function getElements() {&#13;
        var elements = [];&#13;
&#13;
        if(presenter.configuration.displayType == "comboList"){&#13;
            for (var i = 0; i &lt; presenter.$view.find('select').length; i++) {&#13;
                elements.push($(presenter.$view.find('select')[i]));&#13;
            }&#13;
        }else if(presenter.configuration.displayType == "icons" || presenter.configuration.displayType == "icons+list"){&#13;
            for (var i = 0; i &lt; presenter.$view.find('.iconsList a').length; i++) {&#13;
                elements.push($(presenter.$view.find('.iconsList a')[i]));&#13;
            }&#13;
        }else {&#13;
            for (var i = 0; i &lt; presenter.$view.find('li a').length; i++) {&#13;
                elements.push($(presenter.$view.find('li a')[i]));&#13;
            }&#13;
&#13;
            for (var i = 0; i &lt; presenter.$view.find('.table-of-contents-pagination a').length; i++) {&#13;
                elements.push($(presenter.$view.find('.table-of-contents-pagination a')[i]));&#13;
            }&#13;
        }&#13;
&#13;
        return elements;&#13;
    }&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        presenter.keyboardControllerObject = new TocKeyboardController(getElements(), 1);&#13;
        presenter.keyboardControllerObject.selectEnabled(true);&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftDown, event) {&#13;
        if(presenter.configuration.displayType == "comboList") {&#13;
            presenter.$view.find('select').focus();&#13;
        }&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftDown, event);&#13;
    };&#13;
&#13;
    function TocKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    TocKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    TocKeyboardController.prototype.constructor = TocKeyboardController;&#13;
&#13;
    function scrollHorizontally(element) {&#13;
        var pos = $(element).position().left,&#13;
            currentscroll = presenter.$view.find('.iconsList').scrollLeft(),&#13;
            divwidth = presenter.$view.find('.iconsList').width();&#13;
&#13;
        pos=(pos+currentscroll)-(divwidth/2);&#13;
&#13;
        presenter.$view.find('.iconsList').scrollLeft(pos);&#13;
    }&#13;
&#13;
    function scrollVertically(element) {&#13;
        var pos = $(element).position().top,&#13;
            currentscroll = presenter.$view.find('.table-of-contents-list').scrollTop(),&#13;
            divheight = presenter.$view.find('.table-of-contents-list').height();&#13;
&#13;
        pos=(pos+currentscroll)-(divheight/2);&#13;
&#13;
        presenter.$view.find('.table-of-contents-list').scrollTop(pos);&#13;
    }&#13;
&#13;
    function centerElement(element){&#13;
        if(presenter.configuration.displayType == "icons" || presenter.configuration.displayType == "icons+list"){&#13;
            scrollHorizontally(element);&#13;
        }else {&#13;
            scrollVertically(element);&#13;
        }&#13;
    }&#13;
&#13;
    TocKeyboardController.prototype.nextElement = function () {&#13;
        this.switchElement(1);&#13;
&#13;
        if($(this.keyboardNavigationCurrentElement).parent().style('display') === "none") {&#13;
            this.nextElement();&#13;
        }&#13;
&#13;
        centerElement(this.keyboardNavigationCurrentElement);&#13;
    };&#13;
&#13;
    TocKeyboardController.prototype.previousElement = function () {&#13;
        this.switchElement(-1);&#13;
&#13;
        if($(this.keyboardNavigationCurrentElement).parent().style('display') === "none") {&#13;
            this.previousElement();&#13;
        }&#13;
&#13;
        centerElement(this.keyboardNavigationCurrentElement);&#13;
    };&#13;
&#13;
    TocKeyboardController.prototype.nextRow = function () {&#13;
        if (event) {&#13;
            event.preventDefault();&#13;
        }&#13;
        this.switchElement(this.columnsCount);&#13;
&#13;
        if($(this.keyboardNavigationCurrentElement).parent().style('display') === "none") {&#13;
            this.nextRow();&#13;
        }&#13;
&#13;
        centerElement(this.keyboardNavigationCurrentElement);&#13;
    };&#13;
&#13;
    TocKeyboardController.prototype.previousRow = function () {&#13;
        if (event) {&#13;
            event.preventDefault();&#13;
        }&#13;
        this.switchElement(-this.columnsCount);&#13;
&#13;
        if($(this.keyboardNavigationCurrentElement).parent().style('display') === "none") {&#13;
            this.previousRow();&#13;
        }&#13;
&#13;
        centerElement(this.keyboardNavigationCurrentElement);&#13;
    };&#13;
&#13;
    TocKeyboardController.prototype.select = function () {&#13;
        if (!this.isSelectEnabled) {&#13;
            return;&#13;
        }&#13;
&#13;
        this.selectAction();&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>