<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MultiAudio" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isDefault="true" name="Files" nameLabel="MultiAudio_property_files" type="list">
			<property name="ID" nameLabel="MultiAudio_property_id" type="string"/>
			<property name="Mp3" nameLabel="MultiAudio_property_mp3" type="audio"/>
			<property name="Ogg" nameLabel="MultiAudio_property_ogg" type="audio"/>
			<property name="Enable loop" nameLabel="MultiAudio_property_enable_loop" type="boolean"/>
		</property>
		<property name="Interface" nameLabel="MultiAudio_property_interface" type="{None, Default controls, Display time}"/>
		<property isLocalized="true" name="Narration" nameLabel="MultiAudio_property_narration" type="narration"/>
	</model>
<css>.wrapper-addon-audio audio {&#13;
    bottom: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.wrapper-addon-audio {&#13;
    height: 30px;&#13;
    position: relative;&#13;
}&#13;
</css><view>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="wrapper-addon-audio"&gt;&#13;
&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonMultiAudio_create(){&#13;
    var presenter = function(){};&#13;
    var AUDIO_FILES_MISSING = "This addon needs at least 1 audio file.";&#13;
    var eventBus;&#13;
    var currentTimeAlreadySent;&#13;
    var deferredSyncQueue = window.DecoratorUtils.DeferredSyncQueue(deferredQueueDecoratorChecker);&#13;
    presenter.currentAudio = 0;&#13;
    presenter.audio = {};&#13;
    presenter.files = [];&#13;
    presenter.visible = true;&#13;
    presenter.defaultVisibility = true;&#13;
    presenter.globalView = null;&#13;
    presenter.globalModel = null;&#13;
    presenter.playerController = null;&#13;
    presenter.addonID = null;&#13;
    presenter.type = 'multiaudio';&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
    &#13;
    presenter.onEventReceived = function(eventName, eventData) {&#13;
    	if(eventData.value == 'dropdownClicked') {&#13;
     	   	this.audio.load();&#13;
    	}&#13;
    };&#13;
&#13;
    function getEventObject(_item, _value, _score) {&#13;
    	return {&#13;
            source : presenter.addonID,&#13;
            item : _item + '',&#13;
            value : _value + '',&#13;
            score : _score + ''&#13;
        };&#13;
    }&#13;
&#13;
    function deferredQueueDecoratorChecker () {&#13;
        return presenter.isLoaded;&#13;
    }&#13;
    &#13;
    presenter.createEventData = function (data) {&#13;
    	return getEventObject(data.currentItem, data.currentTime, '');&#13;
    };&#13;
&#13;
    presenter.createOnEndEventData = function (data) {&#13;
        return getEventObject(data.currentItem, 'end', '');&#13;
    };&#13;
    &#13;
    presenter.createOnPlayingEventData = function (data) {&#13;
        return getEventObject(data.currentItem, 'playing', '');&#13;
    };&#13;
    &#13;
    presenter.sendEventAndSetCurrentTimeAlreadySent = function (eventData, currentTime) {&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
        currentTimeAlreadySent = currentTime;&#13;
    };&#13;
&#13;
    presenter.getAudioCurrentTime = function () {&#13;
        return this.audio.currentTime;&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateSendEventCallback = function() {&#13;
&#13;
        var ua = navigator.userAgent;&#13;
        if( ua.indexOf("Android") &gt;= 0 )&#13;
        {&#13;
            var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
            if (androidversion == 4.4)&#13;
            {&#13;
                var duration = parseInt(presenter.audio.duration, 10);&#13;
                duration = isNaN(duration) ? 0 : duration;&#13;
                var currentTime2 = parseInt(presenter.audio.currentTime, 10);&#13;
&#13;
                if(duration == currentTime2){&#13;
                    presenter.sendOnEndEvent();&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var currentTime = presenter.formatTime(presenter.getAudioCurrentTime());&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        if (currentTime !== currentTimeAlreadySent) { // to prevent duplicated value&#13;
            var eventData = presenter.createEventData({'currentTime' : currentTime, 'currentItem': currentItem});&#13;
            presenter.sendEventAndSetCurrentTimeAlreadySent(eventData, currentTime);&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.addAttributeLoop = function(audio) {&#13;
        $(audio).on("ended", function() {&#13;
            this.currentTime = 0;&#13;
            this.play();&#13;
        });&#13;
    };&#13;
&#13;
    presenter.prepareAudio = function(){&#13;
        this.audio = document.createElement("audio");&#13;
        var audioWrapper = presenter.globalView.find(".wrapper-addon-audio");&#13;
        audioWrapper.html("");&#13;
        audioWrapper.append(this.audio);&#13;
        return audioWrapper;&#13;
    };&#13;
    &#13;
    presenter.sendOnEndEvent = function () {&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        var eventData = presenter.createOnEndEventData({'currentItem': currentItem});&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
    &#13;
    presenter.sendOnPlayingEvent = function () {&#13;
        var currentItem = presenter.currentAudio+1;&#13;
        var eventData = presenter.createOnPlayingEventData({'currentItem': currentItem});&#13;
            eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.playingEventSent = false;&#13;
    presenter.createView = function(view, model){&#13;
        var interfaceType = model["Interface"];&#13;
        var audioWrapper = this.prepareAudio();&#13;
        this.audio.addEventListener('timeupdate', function() {&#13;
            presenter.onTimeUpdateSendEventCallback();&#13;
&#13;
            var ua = navigator.userAgent;&#13;
            if( ua.indexOf("Android") &gt;= 0 )&#13;
            {&#13;
                var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
                if (androidversion == 5)&#13;
                {&#13;
                    if(presenter.audio.currentTime &gt; 0 &amp;&amp; !presenter.playingEventSent){&#13;
                        presenter.sendOnPlayingEvent();&#13;
                        presenter.playingEventSent = true;&#13;
                    }&#13;
                }&#13;
            }&#13;
        }, false);&#13;
        this.audio.addEventListener('playing', function () {&#13;
            var ua = navigator.userAgent;&#13;
            if( ua.indexOf("Android") &gt;= 0 ){&#13;
                var androidversion = parseFloat(ua.slice(ua.indexOf("Android")+8));&#13;
                if (androidversion == 5){&#13;
                    //do nothing&#13;
                }else{&#13;
                    presenter.sendOnPlayingEvent();&#13;
                }&#13;
            }else{&#13;
                presenter.sendOnPlayingEvent();&#13;
            }&#13;
        }, false);&#13;
        this.audio.addEventListener('play', function () {&#13;
        }, false);&#13;
        this.audio.addEventListener('click', function(e) {&#13;
            e.stopPropagation();&#13;
        }, false);&#13;
        this.audio.addEventListener('ended', function() {&#13;
            presenter.stop();&#13;
            presenter.sendOnEndEvent();&#13;
            presenter.playingEventSent = false;&#13;
        }, false);&#13;
&#13;
        if (!presenter.isLoaded) {&#13;
            this.audio.addEventListener("loadeddata", function() {&#13;
                presenter.isLoaded = true;&#13;
&#13;
                deferredSyncQueue.resolve();&#13;
            });&#13;
        }&#13;
&#13;
        switch(interfaceType) {&#13;
            case "Default controls":&#13;
                $(this.audio).attr("controls", "controls").attr("preload", "auto");&#13;
                break;&#13;
            case "Display time":&#13;
                this.createCurrentAndDuration(audioWrapper);&#13;
                this.audio.addEventListener('loadeddata', onLoadedMetadataCallback, false);&#13;
                this.audio.addEventListener('timeupdate', onTimeUpdateCallback, false);&#13;
                break;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createCurrentAndDuration = function(audioWrapper) {&#13;
        var currentTime = document.createElement("span");&#13;
        var durationTime = document.createElement("span");&#13;
        $(currentTime).attr("id", "currentTime");&#13;
        $(durationTime).attr("id", "durationTime");&#13;
        audioWrapper.html(currentTime).append(durationTime);&#13;
    };&#13;
&#13;
    presenter.formatTime = function(seconds) {&#13;
        var minutes = Math.floor(seconds / 60);&#13;
        minutes = (minutes &gt;= 10) ? minutes : "0" + minutes;&#13;
        seconds = Math.floor(seconds % 60);&#13;
        seconds = (seconds &gt;= 10) ? seconds : "0" + seconds;&#13;
        return minutes + ":" + seconds;&#13;
    };&#13;
&#13;
    function onLoadedMetadataCallback() {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        presenter.displayTimer(0, duration);&#13;
    }&#13;
&#13;
    function onTimeUpdateCallback() {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        var currentTime = presenter.audio.currentTime;&#13;
        presenter.displayTimer(currentTime, duration);&#13;
    }&#13;
&#13;
    presenter.displayTimer = function(current, duration) {&#13;
        presenter.globalView.find('#currentTime').html(presenter.formatTime(current) + ' / ');&#13;
        presenter.globalView.find('#durationTime').html(presenter.formatTime(duration));&#13;
    };&#13;
&#13;
    presenter.loadFiles = function(audio, model){&#13;
        this.files = model["Files"];&#13;
        var oggFile = this.files[this.currentAudio]["Ogg"];&#13;
        var mp3File = this.files[this.currentAudio]["Mp3"];&#13;
        var loop = !!(this.files[this.currentAudio]["Enable loop"] == "True");&#13;
        var canPlayMp3 = false;&#13;
        var canPlayOgg = false;&#13;
&#13;
        var validated = this.validateFiles(this.files[this.currentAudio]);&#13;
&#13;
        if (!validated) {&#13;
            this.globalView.find(".wrapper-addon-audio").html(AUDIO_FILES_MISSING);&#13;
        }&#13;
&#13;
        if (loop) {&#13;
            presenter.addAttributeLoop(audio);&#13;
        }&#13;
&#13;
        if(audio.canPlayType) {&#13;
            canPlayMp3 = !!audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/mpeg');&#13;
            canPlayOgg = !!audio.canPlayType &amp;&amp; "" != audio.canPlayType('audio/ogg; codecs="vorbis"');&#13;
            if(canPlayMp3){&#13;
                $(audio).attr("src", mp3File);&#13;
            } else if (canPlayOgg) {&#13;
                $(audio).attr("src", oggFile);&#13;
            }&#13;
        } else {&#13;
            $(audio).append("Your browser doesn't support audio.");&#13;
        }&#13;
&#13;
        audio.load();&#13;
&#13;
    };&#13;
&#13;
    presenter.run = function(view, model){&#13;
        this.initialize(view, model, false);&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        presenter.addonID = model.ID;&#13;
        eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model){&#13;
        this.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function(view, model, isPreview) {&#13;
        this.globalModel = model;&#13;
        this.globalView = $(view);&#13;
        this.createView(view, model);&#13;
        if (!isPreview) {&#13;
        	this.loadFiles(this.audio, model);	&#13;
        }&#13;
        this.visible = !!(model['Is Visible'] == 'True');&#13;
        this.defaultVisibility = this.visible;&#13;
&#13;
        presenter.view = view;&#13;
&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonMultiAudio_destroy() {&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        presenter.audio.pause();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'play': presenter.play,&#13;
            'stop': presenter.stop,&#13;
            'next': presenter.next,&#13;
            'previous': presenter.previous,&#13;
            'jumpTo': presenter.jumpToCommand,&#13;
            'jumpToID': presenter.jumpToIDCommand,&#13;
            'pause': presenter.pause&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function(isVisible) {&#13;
        $(presenter.globalView).css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.play = deferredSyncQueue.decorate(function() {&#13;
        if (!this.audio.playing) {&#13;
            this.audio.play();&#13;
        }&#13;
    });&#13;
&#13;
    presenter.stop = deferredSyncQueue.decorate(function() {&#13;
        if (!presenter.audio.paused) {&#13;
            presenter.audio.pause();&#13;
            presenter.playingEventSent = false;&#13;
        }&#13;
&#13;
        presenter.audio.currentTime = 0;&#13;
    });&#13;
&#13;
    presenter.pause = function() {&#13;
        if (!presenter.audio.paused) {&#13;
            presenter.audio.pause();&#13;
            presenter.playingEventSent = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function() {&#13;
        this.setVisibility(true);&#13;
        this.visible = true;&#13;
        if(audioStarted(this.audio)) {&#13;
            this.audio.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hide = function() {&#13;
        this.setVisibility(false);&#13;
        this.visible = false;&#13;
        if(audioStarted(this.audio)){&#13;
            this.audio.pause();&#13;
        }&#13;
    };&#13;
&#13;
    function audioStarted(audio) {&#13;
        return audio.currentTime &gt; 0;&#13;
    }&#13;
    &#13;
    presenter.reset = function() {&#13;
        this.visible = this.defaultVisibility;&#13;
        if (this.visible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
        this.stop();&#13;
        this.currentAudio = 0;&#13;
        presenter.loadFiles(this.audio, this.globalModel);&#13;
    };&#13;
&#13;
    presenter.jumpTo = function(audioNumber) {&#13;
        var newAudio = parseInt(audioNumber, 10) - 1;&#13;
        if (0 &lt;= newAudio &amp;&amp; newAudio &lt; this.files.length) {&#13;
            this.currentAudio = newAudio;&#13;
            presenter.isLoaded = false;&#13;
            presenter.loadFiles(this.audio, this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToCommand = function(params) {&#13;
        presenter.jumpTo(params[0]);&#13;
        presenter.playingEventSent = false;&#13;
    };&#13;
&#13;
    presenter.previous = function() {&#13;
        if (this.currentAudio &gt; 0) {&#13;
            this.currentAudio--;&#13;
            this.initialize(this.globalView[0], this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.next = function() {&#13;
        if (this.currentAudio &lt; this.files.length - 1) {&#13;
            this.currentAudio++;&#13;
            this.initialize(this.globalView[0], this.globalModel);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToID = function(id) {&#13;
        for (var i = 0; i &lt; this.files.length; i++) {&#13;
            if (id === this.files[i].ID) {&#13;
                this.jumpTo(i + 1);  // Audio numbers are counted from 1 to n&#13;
                break;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.jumpToIDCommand = function(params) {&#13;
        presenter.jumpToID(params[0]);&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        var state = {&#13;
            'visible' : "" + this.visible,&#13;
            'currentAudio' : "" + this.currentAudio,&#13;
            'currentTime'   : "" + this.audio.currentTime&#13;
        };&#13;
        return this.convertStateToString(state);&#13;
    };&#13;
&#13;
    presenter.convertStateToString = function(state) {&#13;
        var stateString = "";&#13;
        $.each(state, function(key, value){&#13;
            stateString += "[" + key + ":" + value + "]";&#13;
        });&#13;
        return stateString;&#13;
    };&#13;
&#13;
    presenter.convertStringToState = function(stateString) {&#13;
        var state = {};&#13;
        var pattern = /\w+:\w+/g;&#13;
        var stateElements = stateString.match(pattern);&#13;
        for (var i = 0; i &lt; stateElements.length; i++) {&#13;
            var keyAndValue = stateElements[i].split(":");&#13;
            var key = keyAndValue[0];&#13;
            state[key] = keyAndValue[1];&#13;
        }&#13;
        return state;&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        var state = this.convertStringToState(stateString);&#13;
        var visible = !!(state["visible"] == "true");&#13;
        var currentAudio = parseInt(state["currentAudio"]);&#13;
        var currentTime = parseInt(state["currentTime"]);&#13;
&#13;
        if (visible) {&#13;
            this.show();&#13;
        } else {&#13;
            this.hide();&#13;
        }&#13;
&#13;
        this.currentAudio = currentAudio;&#13;
        presenter.loadFiles(this.audio, this.globalModel);&#13;
    };&#13;
&#13;
    presenter.validateFiles = function(files) {&#13;
        return !(!files["Ogg"] &amp;&amp; !files["Mp3"]);&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>