<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Hierarchical_Lesson_Report" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Title label" isLocalized="true" name="titleLabel" nameLabel="Hierarchical_Lesson_Report_property_title_label" type="string"/>
        <property displayName="Show results" name="results" nameLabel="Hierarchical_Lesson_Report_property_results" type="boolean"/>
        <property displayName="Results label" isLocalized="true" name="resultsLabel" nameLabel="Hierarchical_Lesson_Report_property_results_label" type="string"/>
        <property displayName="Show checks" name="checks" nameLabel="Hierarchical_Lesson_Report_property_checks" type="boolean"/>
        <property displayName="Checks label" isLocalized="true" name="checksLabel" nameLabel="Hierarchical_Lesson_Report_property_checks_label" type="string"/>
        <property displayName="Show errors" name="errors" nameLabel="Hierarchical_Lesson_Report_property_errors" type="boolean"/>
        <property displayName="Errors label" isLocalized="true" name="errorsLabel" nameLabel="Hierarchical_Lesson_Report_property_errors_label" type="string"/>
        <property displayName="Show mistakes" name="mistakes" nameLabel="Hierarchical_Lesson_Report_property_mistakes" type="boolean"/>
        <property displayName="Mistakes label" isLocalized="true" name="mistakesLabel" nameLabel="Hierarchical_Lesson_Report_property_mistakes_label" type="string"/>
        <property displayName="Show total" name="total" nameLabel="Hierarchical_Lesson_Report_property_total" type="boolean"/>
        <property displayName="Total label" isLocalized="true" name="totalLabel" nameLabel="Hierarchical_Lesson_Report_property_total_label" type="string"/>
        <property displayName="Depth of expand" name="expandDepth" nameLabel="Hierarchical_Lesson_Report_property_expand_depth" type="string"/>
        <property displayName="Row classes" name="classes" nameLabel="Hierarchical_Lesson_Report_property_classes" type="text"/>
        <property displayName="Show page scores" name="showpagescore" nameLabel="Hierarchical_Lesson_Report_property_show_page_scores" type="boolean"/>
        <property displayName="Page scores label" isLocalized="true" name="pageScoresLabel" nameLabel="Hierarchical_Lesson_Report_property_page_scores_label" type="string"/>
        <property displayName="Show max score award" name="showmaxscorefield" nameLabel="Hierarchical_Lesson_Report_property_show_max_score_fields" type="boolean"/>
        <property displayName="Max score award label" isLocalized="true" name="maxScoreAwardLabel" nameLabel="Hierarchical_Lesson_Report_property_max_score_award_label" type="string"/>
        <property displayName="Unvisited page scores label" isLocalized="true" name="unvisitedPageScoresLabel" nameLabel="Hierarchical_Lesson_Report_property_unvisited_page_scores_label" type="string"/>
        <property displayName="Disable score on pages" name="scoredisabled" nameLabel="Hierarchical_Lesson_Report_property_score_disabled" type="string"/>
        <property displayName="Enable pages" name="enablePages" nameLabel="Hierarchical_Lesson_Report_property_enable_pages" type="string"/>

        <property displayName="Alternative page titles" isLocalized="true" name="alternativePageTitles" nameLabel="Hierarchical_Lesson_Report_property_alternative_page_titles" type="list">
			<property displayName="Index" isLocalized="true" name="alternativePageNumber" nameLabel="Hierarchical_Lesson_Report_property_alternative_page_number" type="string"/>
            <property displayName="Is chapter" name="alternativePageIsChapter" nameLabel="Hierarchical_Lesson_Report_property_show_is_alternative_page_chapter" type="boolean"/>
			<property displayName="Page name" isLocalized="true" name="alternativePageName" nameLabel="Hierarchical_Lesson_Report_property_alternative_page_name" type="html"/>
		</property>
        <property displayName="Lang attribute" name="langAttribute" nameLabel="Hierarchical_Lesson_Report_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Hierarchical_Lesson_Report_property_speech_texts" type="staticlist">

            <property name="Expanded" nameLabel="Hierarchical_Lesson_Report_property_expanded_speech_text" type="staticrow">
                <property name="Expanded" nameLabel="Hierarchical_Lesson_Report_property_expanded_speech_text" type="string"/>
            </property>

            <property name="Collapsed" nameLabel="Hierarchical_Lesson_Report_property_collapsed_speech_text" type="staticrow">
                <property name="Collapsed" nameLabel="Hierarchical_Lesson_Report_property_collapsed_speech_text" type="string"/>
            </property>

            <property name="Results" nameLabel="Hierarchical_Lesson_Report_property_results_speech_text" type="staticrow">
                <property name="Results" nameLabel="Hierarchical_Lesson_Report_property_results_speech_text" type="string"/>
            </property>

            <property name="Checks" nameLabel="Hierarchical_Lesson_Report_property_checks_speech_text" type="staticrow">
                <property name="Checks" nameLabel="Hierarchical_Lesson_Report_property_checks_speech_text" type="string"/>
            </property>

            <property name="Mistakes" nameLabel="Hierarchical_Lesson_Report_property_mistakes_speech_text" type="staticrow">
                <property name="Mistakes" nameLabel="Hierarchical_Lesson_Report_property_mistakes_speech_text" type="string"/>
            </property>

            <property name="Errors" nameLabel="Hierarchical_Lesson_Report_property_errors_speech_text" type="staticrow">
                <property name="Errors" nameLabel="Hierarchical_Lesson_Report_property_errors_speech_text" type="string"/>
            </property>

            <property name="Score" nameLabel="Hierarchical_Lesson_Report_property_score_speech_text" type="staticrow">
                <property name="Score" nameLabel="Hierarchical_Lesson_Report_property_score_speech_text" type="string"/>
            </property>

            <property name="OutOf" nameLabel="Hierarchical_Lesson_Report_property_out_of_speech_text" type="staticrow">
                <property name="OutOf" nameLabel="Hierarchical_Lesson_Report_property_out_of_speech_text" type="string"/>
            </property>

            <property name="Total" nameLabel="Hierarchical_Lesson_Report_property_total_speech_text" type="staticrow">
                <property name="Total" nameLabel="Hierarchical_Lesson_Report_property_total_speech_text" type="string"/>
            </property>
        </property>

    </model>
<css>.hier_report {&#13;
    padding: 15px;&#13;
    border-radius: 5px;&#13;
    border: 1px solid gray;&#13;
    background-color: white;&#13;
    color: gray;&#13;
    overflow: auto;&#13;
}&#13;
&#13;
.hier_report td{&#13;
    padding: 10px;&#13;
}&#13;
&#13;
.hier_report-header{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
.hier_report-footer{&#13;
    font-weight: bold;&#13;
    color: black !important;&#13;
    background-color: #bde0ff;&#13;
}&#13;
&#13;
.hier_report-chapter{&#13;
    background-color: Lavender;&#13;
}&#13;
&#13;
.hier_report-odd{&#13;
    background-color: AliceBlue;&#13;
}&#13;
&#13;
.hier_report-even{&#13;
    background-color: #f0f1ff;&#13;
}&#13;
&#13;
.hier_report-progress {&#13;
    text-align:center;&#13;
    color:#0A8DBD;&#13;
    display: inline-block;&#13;
    width: 190px;&#13;
}&#13;
&#13;
.hier_report-checks {&#13;
    width: 10%;&#13;
    color: green;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-mistakes {&#13;
    width: 10%;&#13;
    color: #990000;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-errors {&#13;
    width: 10%;&#13;
    color: red;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-score {&#13;
    width: 10%;&#13;
    color: blue;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.hier_report-page-non-max-score, .hier_report-page-max-score {&#13;
    width: 10%;&#13;
    text-align: center;&#13;
}&#13;
&#13;
.ui-progressbar {&#13;
    padding:2px;&#13;
    width:	130px  !important;&#13;
    height: 15px    !important;&#13;
    border-radius: 5px;&#13;
    border:2px solid #02789F;&#13;
    background-color: #3CC6CD;&#13;
    border-radius: 5px;&#13;
    float: left;&#13;
}&#13;
&#13;
.hier_drag-source{&#13;
    border: 1px solid orange;&#13;
}&#13;
&#13;
.hier_report .treegrid-expander {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .treegrid-indent {&#13;
	float: left;&#13;
}&#13;
&#13;
.hier_report .text-wrapper {&#13;
	overflow: hidden;&#13;
}&#13;
</css><view> &lt;div class="hier_report"&gt;&#13;
     &lt;table  style="width: 100%"&gt;&#13;
     &lt;/table&gt;&#13;
 &lt;/div&gt;&#13;
&#13;
</view><preview>&lt;div class="hier_report"&gt;&#13;
    &lt;table  style="width: 100%"&gt;&#13;
    &lt;/table&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonHierarchical_Lesson_Report_create() {&#13;
    var presenter = function () {};&#13;
    var presentationController;&#13;
    var pageInChapterIndex = 0;&#13;
    var absolutePageIndex = 0;&#13;
    var realPageIndex = 0;&#13;
    var chapters = 0;&#13;
    var currentRow = 1;&#13;
    var currentColumn = 0;&#13;
    var selectedCellClassName = "keyboard_navigation_active_element";&#13;
    var isWCAGOn = false;&#13;
&#13;
    function getTextVoiceObject (text, lang) {return {text: text, lang: lang};}&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        EXPAND_DEPTH_NOT_NUMERIC: "Depth of expand is not proper",&#13;
&#13;
        C01: "Wrong classes name format",&#13;
        C02: "Class names has to be separated by new line",&#13;
&#13;
        D01: "Values in Disable score on pages property should be numeric and non empty",&#13;
        D02: "Values in Disable score on pages property should be greater than 0",&#13;
        D03: "Values in Disable score on pages property should be unique",&#13;
&#13;
        P01: "Values in Disable pages property should be numeric and non empty",&#13;
        P02: "Values in Disable pages property should be greater than 0",&#13;
        P03: "Values in Disable pages property should be unique",&#13;
&#13;
        A01: "There should be at least one item in Alternative Page Names property",&#13;
        A02: "Values in Alternative Page Number property should be greater than 0"&#13;
    };&#13;
&#13;
    function returnErrorObject(ec) { return { isValid: false, errorCode: ec }; }&#13;
&#13;
    function returnCorrectObject(v) { return { isValid: true, value: v }; }&#13;
&#13;
    presenter.showErrorMessage = function (message, substitutions) {&#13;
        var errorContainer;&#13;
        if (typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                if (substitutions.hasOwnProperty(key)) {&#13;
                    messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
                }&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presentationController = controller;&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    function addHeader() {&#13;
        var headerHTML = "&lt;td&gt; " + presenter.configuration.labels.title + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showResults) headerHTML += "&lt;td class='hier_report-progress'&gt; " + presenter.configuration.labels.results + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showChecks) headerHTML += "&lt;td class='hier_report-checks'&gt; " + presenter.configuration.labels.checks + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showMistakes) headerHTML += "&lt;td class='hier_report-mistakes'&gt; " + presenter.configuration.labels.mistakes + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showErrors) headerHTML += "&lt;td class='hier_report-errors'&gt; " + presenter.configuration.labels.errors + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showPageScore) headerHTML += "&lt;td class='hier_report-page-score'&gt;" + presenter.configuration.labels.pageScores + "&lt;/td&gt;";&#13;
        if (presenter.configuration.showMaxScoreField) headerHTML += "&lt;td class='hier_report-page-max-score'&gt;" + presenter.configuration.labels.maxScoreAward + "&lt;/td&gt;";&#13;
        $("&lt;tr&gt;&lt;/tr&gt;").prependTo($("#" + presenter.treeID).find('table')).addClass("hier_report-header").html(headerHTML);&#13;
    }&#13;
&#13;
    presenter.calculateLessonScaledScore = function () {&#13;
        if (presenter.lessonScore.pageCount == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        return Math.floor((presenter.lessonScore.scaledScore / presenter.lessonScore.pageCount) * 100) / 100;&#13;
    };&#13;
&#13;
    function addFooter() {&#13;
        var row = document.createElement('tr');&#13;
        $(row).appendTo($("#" + presenter.treeID).find('table'));&#13;
        $(row).addClass("hier_report-footer");&#13;
&#13;
        $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).html(presenter.configuration.labels.total);&#13;
&#13;
        if (presenter.configuration.showResults) {&#13;
            createProgressCell(row, {&#13;
                score: presenter.isPreview ? 0 : presenter.calculateLessonScaledScore(),&#13;
                count: 1&#13;
            });&#13;
        }&#13;
&#13;
        if (presenter.configuration.showChecks) {&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-checks").html(presenter.lessonScore.checks);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMistakes) {&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-mistakes").html(presenter.lessonScore.mistakes);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showErrors) {&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-errors").html(presenter.lessonScore.errors);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showPageScore) {&#13;
            var content = presenter.lessonScore.score + "&lt;span class='hier_report-separator'&gt;/&lt;/span&gt;" + presenter.lessonScore.maxScore;&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-page-score").html(content);&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMaxScoreField) {&#13;
            $("&lt;td&gt;&lt;/td&gt;").appendTo($(row));&#13;
        }&#13;
    }&#13;
&#13;
    function createRow(index, parentIndex, isChapter) {&#13;
        var row = document.createElement('tr');&#13;
&#13;
        $(row).appendTo($("#" + presenter.treeID).find('table'));&#13;
        $(row).addClass("treegrid-" + index);&#13;
        $(row).addClass(presenter.configuration.classes[index % presenter.configuration.classes.length]);&#13;
&#13;
        if (parentIndex != null) {&#13;
            $(row).addClass("treegrid-parent-" + parentIndex);&#13;
        }&#13;
&#13;
        if (isChapter) {&#13;
            $(row).addClass("hier_report-chapter");&#13;
        } else {&#13;
            $(row).addClass(index % 2 &gt; 0 ? "hier_report-odd" : "hier_report-even");&#13;
        }&#13;
&#13;
        return row;&#13;
    }&#13;
&#13;
    function createProgressCell(row, score, index, isChapter) {&#13;
        var progressCell = document.createElement('td');&#13;
        $(progressCell).appendTo($(row)).addClass("hier_report-progress");&#13;
&#13;
        var progressbar = document.createElement('div');&#13;
        $(progressbar).appendTo($(progressCell));&#13;
        $(progressbar).attr("id", "progressbar-" + index);&#13;
        $(progressbar).addClass("hier_report-progressbar");&#13;
        var percent = Math.floor(score.score / score.count * 100);&#13;
&#13;
        var progressInfo = document.createElement('div');&#13;
        $(progressInfo).appendTo($(progressCell)).attr("style", "float: right").html(percent + "%");&#13;
&#13;
        if (!isChapter) {&#13;
            $(progressbar).progressbar({&#13;
                value: Math.floor(score.score * 100),&#13;
                max: 100&#13;
            });&#13;
        }&#13;
    }&#13;
&#13;
    presenter.isPageVisited = function (pageId) {&#13;
        return presentationController.getPresentation().getPageById(pageId).isVisited();&#13;
    };&#13;
&#13;
    presenter.getPageScaledScore = function(maxScore, score, isChapter, pageID) {&#13;
        if (maxScore) {&#13;
            return score / maxScore;&#13;
        }&#13;
&#13;
        if (!presenter.isPreview &amp;&amp; !isChapter) {&#13;
            return presenter.isPageVisited(pageID) ? 1 : 0;&#13;
        }&#13;
&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getProperScore = function(score, pageId) {&#13;
        if (!presenter.isPreview) {&#13;
            score.score = score.maxScore !== 0 ? score.score / score.maxScore : presenter.isPageVisited(pageId) ? 1 : 0;&#13;
        } else {&#13;
            score.score = score.maxScore !== 0 ? score.score / score.maxScore : 0;&#13;
        }&#13;
&#13;
        return score.score;&#13;
    };&#13;
&#13;
    function createScoreCells(row, pageId, index, isChapter) {&#13;
        var isScoreEnable = presenter.configuration.disabledScorePages.indexOf(absolutePageIndex) === -1;&#13;
        var score = resetScore();&#13;
        if (!presenter.isPreview) {&#13;
            score = presentationController.getScore().getPageScoreById(pageId);&#13;
        }&#13;
&#13;
        var pageScore = 0;&#13;
&#13;
        if (!isChapter) {&#13;
            pageScore = score.score;&#13;
            score.count = 1;&#13;
            score.score = presenter.getProperScore(score, pageId);&#13;
        }&#13;
&#13;
        if (isScoreEnable) {&#13;
&#13;
            if (presenter.configuration.showResults) {&#13;
                createProgressCell(row, score, index, isChapter);&#13;
            }&#13;
&#13;
            if (!isChapter) {&#13;
                presenter.lessonScore.pageCount++;&#13;
            }&#13;
            presenter.lessonScore.checks += score.checkCount;&#13;
            presenter.lessonScore.mistakes += score.mistakeCount;&#13;
            presenter.lessonScore.errors += score.errorCount;&#13;
            presenter.lessonScore.score += pageScore;&#13;
            presenter.lessonScore.maxScore += score.maxScore;&#13;
            presenter.lessonScore.scaledScore += presenter.getPageScaledScore(score.maxScore, pageScore, isChapter, pageId);&#13;
&#13;
            if (presenter.configuration.showChecks) {&#13;
                var checksCell = document.createElement('td');&#13;
                $(checksCell).appendTo($(row))&#13;
                    .addClass("hier_report-checks")&#13;
                    .html(score.checkCount);&#13;
            }&#13;
&#13;
            if (presenter.configuration.showMistakes) {&#13;
                var mistakesCell = document.createElement('td');&#13;
                $(mistakesCell).appendTo($(row))&#13;
                    .addClass("hier_report-mistakes")&#13;
                    .html(score.mistakeCount);&#13;
            }&#13;
&#13;
            if (presenter.configuration.showErrors) {&#13;
                var errorsCell = document.createElement('td');&#13;
                $(errorsCell).appendTo($(row))&#13;
                    .addClass("hier_report-errors")&#13;
                    .html(score.errorCount);&#13;
            }&#13;
&#13;
            if (presenter.configuration.showPageScore) {&#13;
                $("&lt;td&gt;&lt;/td&gt;").appendTo($(row))&#13;
                    .addClass("hier_report-page-score")&#13;
                    .html(presenter.insertPageScoreValuesToPage(pageScore, score));&#13;
            }&#13;
&#13;
            if (presenter.configuration.showMaxScoreField) {&#13;
                var isMaxScore = pageScore === score.maxScore &amp;&amp; score.maxScore !== 0;&#13;
                var $td = $('&lt;td&gt;&lt;/td&gt;');&#13;
                $td.addClass(isMaxScore ? 'hier_report-page-max-score' : 'hier_report-page-non-max-score');&#13;
                var $element = generateMaxScoreLinks(pageId,isMaxScore);&#13;
                $($td).append($element);&#13;
                $(row).append($td);&#13;
            }&#13;
        } else {&#13;
            var c = presenter.configuration;&#13;
            var columns = [c.showResults, c.showChecks, c.showMistakes, c.showErrors, c.showPageScore, c.showMaxScoreField].filter(function(a) { return a }).length;&#13;
            $("&lt;td colspan='" + columns + "'&gt;&lt;/td&gt;").appendTo($(row)).addClass("hier_report-score-disabled-row");&#13;
        }&#13;
    }&#13;
&#13;
    presenter.insertPageScoreValuesToPage = function(pageScore, score) {&#13;
        if (score.score == 0 &amp;&amp; score.maxScore == 0) {&#13;
            return presenter.configuration.labels.unvisitedPageScore;&#13;
        }&#13;
&#13;
        return pageScore + "&lt;span class='hier_report-separator'&gt;/&lt;/span&gt;" + score.maxScore;&#13;
    };&#13;
&#13;
    function generateMaxScoreLinks(pageId, isMaxScore) {&#13;
        var $element = $(document.createElement('td'));&#13;
        $element.addClass(isMaxScore ? 'hier_report-page-max-score' : 'hier_report-page-non-max-score');&#13;
        var $link = $("&lt;a&gt;&lt;/a&gt;").attr('href', '#').attr('data-page-id', pageId);&#13;
        $link.append($element);&#13;
        return $link;&#13;
    }&#13;
&#13;
    function generatePageLinks(text, isChapter, pageId) {&#13;
        var $element = $(document.createElement('td')),&#13;
            $link = $("&lt;a&gt;&lt;/a&gt;").html(text).attr('href', '#').attr('data-page-id', pageId);&#13;
&#13;
        $element.append($('&lt;div class="text-wrapper"&gt;').html(isChapter ? text : $link));&#13;
&#13;
        return $element;&#13;
    }&#13;
&#13;
    function checkIfChapterHasChildren () {&#13;
        presenter.$view.find(".hier_report-chapter").each(function () {&#13;
           if(!$(this).hasClass('treegrid-collapsed') &amp;&amp; !$(this).hasClass('treegrid-expanded')) {&#13;
               $(this).remove();&#13;
           }&#13;
        });&#13;
    }&#13;
&#13;
    function buildRow (name, index, parrentIndex, isChapter, pageId) {&#13;
        var row = createRow(index, parrentIndex, isChapter);&#13;
&#13;
        var nameCell = generatePageLinks(name, isChapter, pageId);&#13;
        $(nameCell).appendTo($(row));&#13;
&#13;
        createScoreCells(row, pageId, index, isChapter);&#13;
    }&#13;
&#13;
    function checkIfPageEnabled (index) {&#13;
        var realIndex = parseInt(index-chapters, 10);&#13;
        if(presenter.configuration.enablePages != '' &amp;&amp; presenter.configuration.enablePages != undefined){&#13;
            return presenter.configuration.enablePages.indexOf(realIndex) &gt; -1;&#13;
        } else {&#13;
            return true;&#13;
        }&#13;
    }&#13;
&#13;
    function addRow(name, index, parentIndex, isChapter, pageId, isPreview) {&#13;
        if(!isPreview){&#13;
            if(isChapter){&#13;
                chapters++;&#13;
                var alternativeName = presenter.findAlternativeName(chapters, isChapter);&#13;
                name = alternativeName || name;&#13;
&#13;
                buildRow(name, index, parentIndex, isChapter, pageId);&#13;
            } else if (checkIfPageEnabled(index)) {&#13;
                var alternativeName = presenter.findAlternativeName(realPageIndex, isChapter);&#13;
                name = alternativeName || name;&#13;
&#13;
                buildRow(name, index, parentIndex, isChapter, pageId);&#13;
            }&#13;
        } else {&#13;
            buildRow(name, index, parentIndex, isChapter, pageId);&#13;
        }&#13;
    }&#13;
&#13;
    presenter.findAlternativeName = function (index, isChapter){&#13;
        var result = undefined;&#13;
        var alternativeTitles = presenter.configuration.alternativePageTitles;&#13;
&#13;
        for (var i =0; i &lt; alternativeTitles.length; i++){&#13;
            if (alternativeTitles[i].alternativePageNumber === index &amp;&amp; alternativeTitles[i].alternativePageIsChapter === isChapter){&#13;
                result = alternativeTitles[i].alternativePageName;&#13;
            }&#13;
        }&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
    function updateRow(pageIndex, pageScore) {&#13;
        var row = $(".treegrid-" + pageIndex);&#13;
        var hasChildren = pageScore.count &gt; 0;&#13;
&#13;
        if (presenter.configuration.showResults) {&#13;
            var percent = Math.floor((pageScore.score / pageScore.count) * 100) || 0;&#13;
            var progressbar = $(row).find("#progressbar-" + pageIndex);&#13;
            if (hasChildren) {&#13;
                $(progressbar).progressbar({value: Math.floor((pageScore.score / pageScore.count) * 100), max: 100});&#13;
                $(progressbar).closest("div").next().html(percent + '%');&#13;
            } else {&#13;
                $(progressbar).closest("div").next().html('-').attr('style', '');&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.configuration.showChecks) {&#13;
            $(row).find(".hier_report-checks").html(hasChildren ? pageScore.checkCount : '-');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showMistakes) {&#13;
            $(row).find(".hier_report-mistakes").html(hasChildren ? pageScore.mistakeCount : '-');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showErrors) {&#13;
            $(row).find(".hier_report-errors").html(hasChildren ? pageScore.errorCount : '-');&#13;
        }&#13;
&#13;
        if (presenter.configuration.showPageScore) {&#13;
            $(row).find(".hier_report-page-score").html(hasChildren ? presenter.insertPageScoreValuesToChapter(pageScore) : '-');&#13;
        }&#13;
    }&#13;
&#13;
    presenter.insertPageScoreValuesToChapter = function(pageScore) {&#13;
        if (pageScore.countedMaxScore != 0) {&#13;
            return pageScore.countedScore + "&lt;span class='hier_report-separator'&gt;/&lt;/span&gt;" + pageScore.countedMaxScore;&#13;
        } else {&#13;
            return presenter.configuration.labels.unvisitedPageScore;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.updateChapterScore = function(score, update, isEnabled) {&#13;
        if (isEnabled) {&#13;
            score.countedScore += update.countedScore || update.score;&#13;
            score.countedMaxScore += update.countedMaxScore || update.maxScore;&#13;
            score.score += update.maxScore === 0 ? update.score : update.score / update.maxScore;&#13;
            score.errorCount += update.errorCount;&#13;
            score.checkCount += update.checkCount;&#13;
            score.mistakeCount += update.mistakeCount;&#13;
            score.count += update.count;&#13;
        }&#13;
&#13;
        return score;&#13;
    };&#13;
&#13;
    function resetScore() {&#13;
        return {&#13;
            score: 0,&#13;
            countedScore: 0,&#13;
            maxScore: 0,&#13;
            countedMaxScore: 0,&#13;
            errorCount: 0,&#13;
            checkCount: 0,&#13;
            mistakeCount: 0,&#13;
            count: 0&#13;
        };&#13;
    }&#13;
&#13;
    presenter.createPreviewTree = function() {&#13;
        var pagesMockup = [&#13;
            {name : "Page1", parent : null},&#13;
            {name : "Unit1", parent : null},&#13;
            {name : "Page2", parent : 1},&#13;
            {name : "Chapter1", parent : 1},&#13;
            {name : "Page3", parent : 3},&#13;
            {name : "Page4", parent : 3},&#13;
            {name : "Chapter2", parent : 1},&#13;
            {name : "Page5", parent : 6},&#13;
            {name : "Page6", parent : 1},&#13;
            {name : "Page7", parent : null},&#13;
            {name : "Page8", parent : null},&#13;
            {name : "Page9", parent : null},&#13;
            {name : "Page10", parent : null},&#13;
            {name : "Page11", parent : null}&#13;
        ];&#13;
&#13;
        var chapterScore = resetScore();&#13;
        for (var i = 0; i &lt; pagesMockup.length; i++) {&#13;
            addRow(pagesMockup[i].name, i, pagesMockup[i].parent, false, "some_id", true);&#13;
        }&#13;
        return chapterScore;&#13;
    };&#13;
&#13;
    presenter.createTree = function(root, parentIndex, pageCount) {&#13;
        var chapterIndex = 0,&#13;
            chapterScore = resetScore(),&#13;
            pageScore = resetScore(),&#13;
            isEmpty = true,&#13;
            values = {},&#13;
            isEnabled = true;&#13;
&#13;
        for (var i = 0; i &lt; pageCount; i++) {&#13;
            var isChapter = root.get(i).type == 'chapter';&#13;
&#13;
            if (!isChapter) {&#13;
                realPageIndex++;&#13;
                if (root.get(i).isReportable()) {&#13;
                    // at least one page is reportable&#13;
                    isEmpty = false;&#13;
                } else {&#13;
                    if(presenter.configuration.enablePages != '' &amp;&amp; presenter.configuration.enablePages != undefined) {&#13;
                        pageInChapterIndex++;&#13;
                    }&#13;
                    absolutePageIndex++;&#13;
                    continue;&#13;
                }&#13;
            }&#13;
&#13;
            var pageId = isChapter ? "chapter" : root.get(i).getId();&#13;
&#13;
            addRow(root.get(i).getName(), pageInChapterIndex, parentIndex, isChapter, pageId, false);&#13;
            absolutePageIndex++;&#13;
&#13;
            pageScore = presentationController.getScore().getPageScoreById(pageId);&#13;
            pageScore.count = 1;&#13;
            pageInChapterIndex++;&#13;
&#13;
            if (isChapter) {&#13;
                chapterIndex = pageInChapterIndex - 1;&#13;
                values = presenter.createTree(root.get(i), chapterIndex, root.get(i).size());&#13;
                updateRow(chapterIndex, values.pagesScore);&#13;
                pageScore = values.pagesScore;&#13;
            }&#13;
&#13;
            isEnabled = presenter.configuration.disabledScorePages.indexOf(absolutePageIndex) === -1;&#13;
            chapterScore = presenter.updateChapterScore(chapterScore, pageScore, isEnabled);&#13;
        }&#13;
&#13;
        return { pagesScore: chapterScore, isEmpty: isEmpty };&#13;
    };&#13;
&#13;
    function handleMouseClickActions() {&#13;
        var commander = presentationController.getCommands(),&#13;
            $report = presenter.$view.find('.hier_report tr');&#13;
&#13;
        $report.find('td a').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
                commander.gotoPageId($(this).attr('data-page-id'));&#13;
            });&#13;
        });&#13;
&#13;
        $report.find('.treegrid-expander').each(function () {&#13;
            $(this).click(function (event) {&#13;
                event.preventDefault();&#13;
                event.stopPropagation();&#13;
            });&#13;
        });&#13;
    }&#13;
&#13;
    function expandTree(level) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            if ($(this).treegrid('getDepth') &lt; level) {&#13;
                $(this).treegrid('expand');&#13;
            }&#13;
        });&#13;
    }&#13;
&#13;
    function saveTreeState() {&#13;
        var state = [];&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            state.push($(this).treegrid('isExpanded'))&#13;
        });&#13;
        return state;&#13;
    }&#13;
&#13;
    function restoreTreeState(state) {&#13;
        $('.hier_report table').find('tr').not('.hier_report-header').not('.hier_report-footer').each(function () {&#13;
            $(this).treegrid(state[$(this).treegrid('getNodeId')] ? 'expand' : 'collapse');&#13;
        });&#13;
    }&#13;
&#13;
    presenter.getState = function () {&#13;
        return JSON.stringify({&#13;
            'treeState': saveTreeState(),&#13;
            'isVisible': presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (stateString) {&#13;
        var state = JSON.parse(stateString);&#13;
&#13;
        restoreTreeState(state.treeState);&#13;
&#13;
        presenter.setVisibility(state.isVisible);&#13;
        presenter.configuration.isVisible = state.isVisible;&#13;
    };&#13;
&#13;
    function parseClasses(classes_text) {&#13;
        function isValidClassName(class_name) {&#13;
            return /^[a-z_-][a-z\d_-]*$/i.test(class_name);&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isStringEmpty(classes_text)) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        var classes = classes_text.split('\n');&#13;
        for (var i=0; i&lt;classes.length; i++) {&#13;
            if (classes[i].indexOf(' ') !== -1) {&#13;
                return returnErrorObject("C02");&#13;
            }&#13;
&#13;
            if (!isValidClassName(classes[i])) {&#13;
                return returnErrorObject("C01");&#13;
            }&#13;
        }&#13;
&#13;
        return returnCorrectObject(classes);&#13;
    }&#13;
&#13;
    function parseScoreDisable(pages_text, disabledType) {&#13;
        if (ModelValidationUtils.isStringEmpty(pages_text)) {&#13;
            return returnCorrectObject([]);&#13;
        }&#13;
&#13;
        var i;&#13;
&#13;
        var pages = pages_text.split(';');&#13;
        for (i=0; i&lt;pages.length; i++) {&#13;
            var numberObject = ModelValidationUtils.validateInteger(pages[i]);&#13;
            if (!numberObject.isValid) {&#13;
                if(disabledType == 'score'){&#13;
                    return returnErrorObject("D01");&#13;
                } else if (disabledType == 'pages') {&#13;
                    return returnErrorObject("P01");&#13;
                }&#13;
            }&#13;
&#13;
            pages[i] = numberObject.value - 1; // indexing from 0&#13;
&#13;
            if (pages[i] &lt; 0) {&#13;
                if(disabledType == 'score'){&#13;
                    return returnErrorObject("D02");&#13;
                } else if (disabledType == 'pages') {&#13;
                    return returnErrorObject("P02");&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        for (i=1; i&lt;pages.length; i++) {&#13;
            if (pages.sort()[i] === pages.sort()[i-1]) {&#13;
                if(disabledType == 'score'){&#13;
                    return returnErrorObject("D03");&#13;
                } else if (disabledType == 'pages') {&#13;
                    return returnErrorObject("P03");&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        return returnCorrectObject(pages.sort());&#13;
    }&#13;
&#13;
    presenter.validateAlternativePageTitles = function (listOfPages) {&#13;
        var validatedList = [];&#13;
        &#13;
        if (listOfPages.length === undefined || listOfPages.length === 0) {&#13;
            return returnErrorObject('A01');&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; listOfPages.length; i++) {&#13;
             var alternativePageName = listOfPages[i].alternativePageName;&#13;
             var isChapter = ModelValidationUtils.validateBoolean(listOfPages[i].alternativePageIsChapter);&#13;
&#13;
             var alternativePageNumber = "";&#13;
&#13;
             if (!ModelValidationUtils.isStringEmpty(listOfPages[i].alternativePageNumber)) {&#13;
                var alternativePageNumberObject = ModelValidationUtils.validatePositiveInteger(listOfPages[i].alternativePageNumber);&#13;
                if (!alternativePageNumberObject.isValid) {&#13;
                    return returnErrorObject('A02');&#13;
                }&#13;
&#13;
                alternativePageNumber = alternativePageNumberObject.value;&#13;
             }&#13;
&#13;
             validatedList[i] = {&#13;
                 alternativePageName: alternativePageName,&#13;
                 alternativePageNumber: alternativePageNumber,&#13;
                 alternativePageIsChapter: isChapter&#13;
             };&#13;
        }&#13;
&#13;
        return returnCorrectObject(validatedList);&#13;
    };&#13;
&#13;
    presenter.upgradeAlternativePageNamesProperty = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (model["alternativePageTitles"] === undefined) {&#13;
            upgradedModel["alternativePageTitles"] = [{&#13;
                alternativePageNumber: "",&#13;
                alternativePageName: "",&#13;
                alternativePageIsChapter: "false"&#13;
            }];&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeTextToSpeechSupport = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model);&#13;
&#13;
        if (upgradedModel['speechTexts'] === undefined) {&#13;
            upgradedModel['speechTexts'] = {&#13;
                Expanded: {Expanded: "Expanded"},&#13;
                Collapsed: {Collapsed: "Collapsed"},&#13;
                Results: {Results: "Results"},&#13;
                Checks: {Checks: "Checks"},&#13;
                Mistakes: {Mistakes: "Mistakes"},&#13;
                Errors: {Errors: "Errors"},&#13;
                Score: {Score: "Score"},&#13;
                OutOf: {OutOf: "Out of"},&#13;
                Total: {Total: "Total"}&#13;
            };&#13;
        }&#13;
&#13;
        if (upgradedModel['langAttribute'] === undefined) {&#13;
            upgradedModel['langAttribute'] = "";&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        var newModel = presenter.upgradeAlternativePageNamesProperty(model);&#13;
        newModel = presenter.upgradeTextToSpeechSupport(newModel);&#13;
        return newModel;&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    presenter.setSpeechTexts = function(speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            expanded:  'Expanded',&#13;
            collapsed: 'Collapsed',&#13;
            results: 'Percentage results',&#13;
            checks: 'Number of checks',&#13;
            mistakes: 'Number of mistakes',&#13;
            errors: 'Number of errors',&#13;
            score: 'Score',&#13;
            outOf: 'out of',&#13;
            Total: 'Total'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            expanded:    getSpeechTextProperty(speechTexts['Expanded']['Expanded'], presenter.speechTexts.expanded),&#13;
            collapsed: getSpeechTextProperty(speechTexts['Collapsed']['Collapsed'], presenter.speechTexts.collapsed),&#13;
            results:  getSpeechTextProperty(speechTexts['Results']['Results'], presenter.speechTexts.results),&#13;
            checks:     getSpeechTextProperty(speechTexts['Checks']['Checks'], presenter.speechTexts.checks),&#13;
            mistakes:   getSpeechTextProperty(speechTexts['Mistakes']['Mistakes'], presenter.speechTexts.mistakes),&#13;
            errors:      getSpeechTextProperty(speechTexts['Errors']['Errors'], presenter.speechTexts.errors),&#13;
            score:        getSpeechTextProperty(speechTexts['Score']['Score'], presenter.speechTexts.score),&#13;
            outOf:        getSpeechTextProperty(speechTexts['OutOf']['OutOf'], presenter.speechTexts.outOf),&#13;
            total:        getSpeechTextProperty(speechTexts['Total']['Total'], presenter.speechTexts.total)&#13;
        };&#13;
    };&#13;
&#13;
    presenter.validateModel = function (model) {&#13;
        presenter.setSpeechTexts(model['speechTexts']);&#13;
        var expandDepth = returnCorrectObject(0);&#13;
&#13;
        if (model['expandDepth'].length &gt; 0) {&#13;
            expandDepth = ModelValidationUtils.validateInteger(model['expandDepth']);&#13;
            if (!expandDepth.isValid) {&#13;
                return returnErrorObject('EXPAND_DEPTH_NOT_NUMERIC');&#13;
            }&#13;
        }&#13;
&#13;
        var validatedClasses = parseClasses(model["classes"]);&#13;
        if (!validatedClasses.isValid) {&#13;
            return returnErrorObject(validatedClasses.errorCode);&#13;
        }&#13;
&#13;
        var validatedDisabledScorePages = parseScoreDisable(model["scoredisabled"], 'score');&#13;
        if (!validatedDisabledScorePages.isValid) {&#13;
            return returnErrorObject(validatedDisabledScorePages.errorCode);&#13;
        }&#13;
&#13;
        var validatedEnablePages = parseScoreDisable(model["enablePages"], 'pages');&#13;
        if (!validatedEnablePages.isValid) {&#13;
            return returnErrorObject(validatedEnablePages.errorCode);&#13;
        }&#13;
&#13;
        var validatedAlternativePageTitles = presenter.validateAlternativePageTitles(model["alternativePageTitles"]);&#13;
        if (!validatedAlternativePageTitles.isValid) {&#13;
            return returnErrorObject(validatedAlternativePageTitles.errorCode);&#13;
        }&#13;
&#13;
        return {&#13;
            ID: model.ID,&#13;
            isValid: true,&#13;
            width: parseInt(model["Width"], 10),&#13;
            height: parseInt(model["Height"], 10),&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            labels: {&#13;
                results: model['resultsLabel'],&#13;
                errors: model['errorsLabel'],&#13;
                checks: model['checksLabel'],&#13;
                mistakes: model['mistakesLabel'],&#13;
                total: model['totalLabel'],&#13;
                title: model['titleLabel'],&#13;
                pageScores: model['pageScoresLabel'] || "",&#13;
                maxScoreAward: model['maxScoreAwardLabel'] || "",&#13;
                unvisitedPageScore: model['unvisitedPageScoresLabel'] || ""&#13;
            },&#13;
            showResults: ModelValidationUtils.validateBoolean(model["results"]),&#13;
            showErrors: ModelValidationUtils.validateBoolean(model["errors"]),&#13;
            showChecks: ModelValidationUtils.validateBoolean(model["checks"]),&#13;
            showMistakes: ModelValidationUtils.validateBoolean(model["mistakes"]),&#13;
            showTotal: ModelValidationUtils.validateBoolean(model["total"]),&#13;
            expandDepth: expandDepth.value,&#13;
            classes: validatedClasses.value,&#13;
            showPageScore: ModelValidationUtils.validateBoolean(model["showpagescore"]),&#13;
            showMaxScoreField: ModelValidationUtils.validateBoolean(model["showmaxscorefield"]),&#13;
            disabledScorePages: validatedDisabledScorePages.value,&#13;
            enablePages: validatedEnablePages.value,&#13;
            alternativePageTitles: validatedAlternativePageTitles.value,&#13;
            langTag: model['langAttribute']&#13;
        };&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.initialize = function (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.isPreview = isPreview;&#13;
        presenter.lessonScore = {&#13;
            pageCount: 0,&#13;
            checks: 0,&#13;
            errors: 0,&#13;
            mistakes: 0,&#13;
            score: 0,&#13;
            maxScore: 0,&#13;
            scaledScore: 0&#13;
        };&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(model);&#13;
        if (!presenter.configuration.isValid) {&#13;
            presenter.showErrorMessage(presenter.ERROR_MESSAGES[presenter.configuration.errorCode]);&#13;
            return;&#13;
        }&#13;
&#13;
        var padding_width = parseInt(presenter.$view.find('.hier_report').css('padding'));&#13;
        if(isNaN(padding_width)) padding_width = 0;&#13;
        var border_width = parseInt(presenter.$view.find('.hier_report').css('border-width'));&#13;
        if(isNaN(border_width)) border_width = 0;&#13;
        var actual_height = presenter.configuration.height + ( padding_width + border_width ) *2; // makes it so hier_report and the addons view are the same height&#13;
&#13;
        presenter.$view.css('height',actual_height+'px');&#13;
        presenter.$view.find('.hier_report').attr("style", "height: " + presenter.configuration.height + "px");&#13;
        presenter.treeID = presenter.configuration.ID + (isPreview ? "Preview" : "");&#13;
        presenter.$view.find("div").first().attr('id', presenter.treeID);&#13;
&#13;
        presenter.setVisibility(presenter.configuration.isVisible || isPreview);&#13;
&#13;
        addHeader();&#13;
        if (isPreview) {&#13;
            presenter.createPreviewTree();&#13;
        } else {&#13;
            var presentation = presentationController.getPresentation();&#13;
            presenter.createTree(presentation.getTableOfContents(), null, presentation.getTableOfContents().size());&#13;
        }&#13;
&#13;
        if (presenter.configuration.showTotal) {&#13;
            addFooter();&#13;
        }&#13;
&#13;
        $("#" + presenter.treeID).find('table').not('.hier_report-header').not('.hier_report-footer').treegrid({&#13;
            'initialState': 'collapsed',&#13;
            'expanderTemplate': '&lt;div class="treegrid-expander"&gt;&lt;/div&gt;'&#13;
        });&#13;
&#13;
        expandTree(presenter.configuration.expandDepth);&#13;
        if (!isPreview) {&#13;
            handleMouseClickActions();&#13;
        }&#13;
&#13;
        checkIfChapterHasChildren();&#13;
    };&#13;
&#13;
    function getCell(rowNumber, columnNumber) {&#13;
        var $cell = presenter.$view.find('tr:eq('+rowNumber+') &gt; td:eq('+columnNumber+')');&#13;
        if($cell.size()&gt;0){&#13;
            return $cell[0];&#13;
        }&#13;
        return null;&#13;
    }&#13;
&#13;
    presenter.cellIsVisible = function(rowNumber, columnNumber) {&#13;
        var cell = getCell(rowNumber, columnNumber);&#13;
        return cell &amp;&amp; $(cell).is(':visible');&#13;
    };&#13;
&#13;
    function getTableMaxHeight() {&#13;
            return presenter.$view.find('tr').size();&#13;
        }&#13;
&#13;
        function getTableWidth() {&#13;
            return presenter.$view.find('tr:eq(0) &gt; td').size();&#13;
        }&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        event.preventDefault();&#13;
        presenter.shiftPressed = event.shiftKey;&#13;
&#13;
        var keys = {&#13;
            ENTER: 13,&#13;
            ESCAPE: 27,&#13;
            SPACE: 32,&#13;
            ARROW_LEFT: 37,&#13;
            ARROW_UP: 38,&#13;
            ARROW_RIGHT: 39,&#13;
            ARROW_DOWN: 40,&#13;
            TAB: 9&#13;
        };&#13;
&#13;
        function moveTo(newRow, newColumn) {&#13;
            if(!presenter.cellIsVisible(newRow,newColumn)) {&#13;
                return;&#13;
            }&#13;
            currentColumn = newColumn;&#13;
            currentRow = newRow;&#13;
            presenter.$view.find('.' + selectedCellClassName).removeClass(selectedCellClassName);&#13;
            var cell = getCell(currentRow, currentColumn);&#13;
            $(cell).addClass(selectedCellClassName);&#13;
            scrollCellIntoView();&#13;
&#13;
        }&#13;
&#13;
        function scrollCellIntoView () {&#13;
            var cell = getCell(currentRow,currentColumn);&#13;
            var $cell = $(cell);&#13;
            var $hier_report = presenter.$view.find('.hier_report');&#13;
            var scrollPos = $hier_report.scrollTop();&#13;
&#13;
            if($cell.outerHeight() + cell.offsetTop &gt; $hier_report.height() + scrollPos) {&#13;
                $hier_report.scrollTop($cell.height() + parseInt($cell.css('padding-top')) + cell.offsetTop - $hier_report.height() );&#13;
            } else if(cell.offsetTop &lt; scrollPos) {&#13;
                $hier_report.scrollTop(cell.offsetTop + parseInt($cell.css('padding-top')));&#13;
            }&#13;
        };&#13;
&#13;
        function getNextVisibleRowNumber(rowNumber) {&#13;
            var newRow = rowNumber;&#13;
            var nRows = getTableMaxHeight();&#13;
            while (true) {&#13;
                newRow+=1;&#13;
                if(newRow&gt;=nRows) {&#13;
                    return rowNumber;&#13;
                }&#13;
                if(presenter.cellIsVisible(newRow,0)){&#13;
                    return newRow;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        function getPrevVisibleRowNumber(rowNumber) {&#13;
            var newRow = rowNumber;&#13;
            while (true) {&#13;
                newRow-=1;&#13;
                if(newRow&lt;=0) {&#13;
                    return rowNumber;&#13;
                }&#13;
                if(presenter.cellIsVisible(newRow,0)){&#13;
                    return newRow;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        var enter = function (){&#13;
            if(isShiftKeyDown) {&#13;
                return escape();&#13;
            }&#13;
&#13;
            moveTo(currentRow,currentColumn);&#13;
            presenter.readCurrentRowAndCell();&#13;
        };&#13;
&#13;
        var next_element = function (){&#13;
            moveTo(currentRow,currentColumn+1);&#13;
            presenter.readCurrentCell();&#13;
        };&#13;
&#13;
        var previous_element = function (){&#13;
            moveTo(currentRow,currentColumn-1);&#13;
            presenter.readCurrentCell();&#13;
        };&#13;
&#13;
        var next_row = function () {&#13;
            var newRow = getNextVisibleRowNumber(currentRow);&#13;
            moveTo(newRow,currentColumn);&#13;
            presenter.readCurrentRowAndCell();&#13;
        };&#13;
&#13;
        var previous_row = function () {&#13;
            var newRow = getPrevVisibleRowNumber(currentRow);&#13;
            moveTo(newRow,currentColumn);&#13;
            presenter.readCurrentRowAndCell();&#13;
        };&#13;
&#13;
        var space = function (){&#13;
            var $cell = $(getCell(currentRow,currentColumn));&#13;
            var $link = $cell.find('a');&#13;
            if ($link.size()&gt;0) {&#13;
                $link.trigger('click');&#13;
            } else {&#13;
                var $expand = $cell.find('.treegrid-expander');&#13;
                if ($expand.size()&gt;0) {&#13;
                    $expand.trigger("click");&#13;
                    if ($expand.hasClass("treegrid-expander-collapsed")) {&#13;
                        speak([getTextVoiceObject(presenter.speechTexts.collapsed,"")]);&#13;
                    } else if ($expand.hasClass("treegrid-expander-expanded")) {&#13;
                        speak([getTextVoiceObject(presenter.speechTexts.expanded,"")]);&#13;
                    }&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        var escape = function (){&#13;
            presenter.$view.find('.' + selectedCellClassName).removeClass(selectedCellClassName);&#13;
            currentColumn = 0;&#13;
            currentRow = 1;&#13;
        };&#13;
&#13;
        function tabHandler() {&#13;
            var rowChange = false;&#13;
            var maxWidth = getTableWidth();&#13;
&#13;
            var newColumn = currentColumn;&#13;
            var newRow = currentRow;&#13;
&#13;
            if (isShiftKeyDown) {&#13;
                newColumn -= 1;&#13;
            } else {&#13;
                newColumn += 1;&#13;
            }&#13;
&#13;
            if(newColumn&gt;=maxWidth) {&#13;
                newRow = getNextVisibleRowNumber(newRow);&#13;
                if(newRow!==currentRow) {&#13;
                    newColumn = 0;&#13;
                    rowChange=true;&#13;
                } else {&#13;
                    newColumn = maxWidth-1;&#13;
                }&#13;
            } else if(newColumn&lt;0) {&#13;
                newRow = getPrevVisibleRowNumber(newRow);&#13;
                 if(newRow!==currentRow) {&#13;
                    newColumn = maxWidth-1;&#13;
                    rowChange=true;&#13;
                } else {&#13;
                    newColumn = 0;&#13;
                }&#13;
            }&#13;
&#13;
            moveTo(newRow, newColumn);&#13;
            if(rowChange) {&#13;
                presenter.readCurrentRowAndCell();&#13;
            } else {&#13;
                presenter.readCurrentCell();&#13;
            }&#13;
&#13;
        }&#13;
&#13;
        var mapping = {};&#13;
        mapping[keys.ENTER] = enter;&#13;
        mapping[keys.ESCAPE] = escape;&#13;
        mapping[keys.SPACE] = space;&#13;
        mapping[keys.ARROW_LEFT] = previous_element;&#13;
        mapping[keys.ARROW_UP] = previous_row;&#13;
        mapping[keys.ARROW_RIGHT] = next_element;&#13;
        mapping[keys.ARROW_DOWN] = next_row;&#13;
        mapping[keys.TAB] = tabHandler;&#13;
&#13;
        try {&#13;
            mapping[keycode]();&#13;
        } catch (er) {&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    function getColumnList() {&#13;
        var columns = ['page_title'];&#13;
        if(presenter.configuration.showResults){&#13;
            columns.push('results');&#13;
        }&#13;
        if(presenter.configuration.showChecks){&#13;
            columns.push('checks');&#13;
        }&#13;
        if(presenter.configuration.showMistakes){&#13;
            columns.push('mistakes');&#13;
        }&#13;
        if(presenter.configuration.showErrors){&#13;
            columns.push('errors');&#13;
        }&#13;
        if(presenter.configuration.showPageScore){&#13;
            columns.push('score');&#13;
        }&#13;
        return columns;&#13;
    }&#13;
&#13;
    function getCurrentCellTextVoiceArray() {&#13;
        var TextVoiceArray = [];&#13;
        var $cell = $(getCell(currentRow,currentColumn));&#13;
&#13;
        if (currentColumn===0) {&#13;
            if(currentRow === getTableMaxHeight()-1 &amp;&amp; presenter.configuration.showTotal) {&#13;
                TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.total, ""));&#13;
            } else {&#13;
                TextVoiceArray.push(getTextVoiceObject($cell.text(), presenter.configuration.langTag));&#13;
            }&#13;
        } else {&#13;
            TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts[getColumnList()[currentColumn]],""));&#13;
            if (-1 !== getColumnList()[currentColumn].indexOf('score')) {&#13;
                TextVoiceArray.push(getTextVoiceObject($cell.text().replace('/', presenter.speechTexts.outOf, "")));&#13;
            } else {&#13;
                TextVoiceArray.push(getTextVoiceObject($cell.text(), ""));&#13;
            }&#13;
        }&#13;
&#13;
        if ($cell.find(".treegrid-expander-collapsed").size()&gt;0) {&#13;
            TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.collapsed,""));&#13;
        } else if($cell.find(".treegrid-expander-expanded").size()&gt;0) {&#13;
            TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.expanded,""));&#13;
        }&#13;
&#13;
        return TextVoiceArray;&#13;
    }&#13;
&#13;
    presenter.readCurrentCell = function() {&#13;
        speak(getCurrentCellTextVoiceArray());&#13;
    };&#13;
&#13;
    presenter.readCurrentRowAndCell = function() {&#13;
        var TextVoiceArray = [];&#13;
&#13;
        if (currentColumn!==0) {&#13;
            if(currentRow === getTableMaxHeight()-1 &amp;&amp; presenter.configuration.showTotal) {&#13;
                TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.total, ""));&#13;
            } else {&#13;
                TextVoiceArray.push(getTextVoiceObject($(getCell(currentRow,0)).text(), presenter.configuration.langTag));&#13;
            }&#13;
        }&#13;
&#13;
        TextVoiceArray = TextVoiceArray.concat(getCurrentCellTextVoiceArray());&#13;
&#13;
        speak(TextVoiceArray);&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function speak(data) {&#13;
        presenter.speak(data);&#13;
    }&#13;
&#13;
    presenter.speak = function(data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presentationController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>