<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Connection" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property displayName="Is not an activity" name="isNotActivity" nameLabel="Connection_property_is_not_activity" type="boolean"/>
        <property name="Single connection mode" nameLabel="Connection_property_single_connection_mode" type="boolean"/>
        <property isDefault="true" name="Left column" nameLabel="Connection_property_left_column" type="list">
            <property name="id" nameLabel="Connection_property_id" type="string"/>
            <property isLocalized="true" name="content" nameLabel="Connection_property_content" type="html"/>
            <property name="connects to" nameLabel="Connection_property_connects_to" type="string"/>
            <property name="additional class" nameLabel="Connection_property_additional_class" type="string"/>
        </property>
        <property name="Right column" nameLabel="Connection_property_right_column" type="list">
            <property name="id" nameLabel="Connection_property_id" type="string"/>
            <property isLocalized="true" name="content" nameLabel="Connection_property_content" type="html"/>
            <property name="connects to" nameLabel="Connection_property_connects_to" type="string"/>
            <property name="additional class" nameLabel="Connection_property_additional_class" type="string"/>
        </property>
        <property name="Columns width" nameLabel="Connection_property_columns_width" type="list">
            <property name="left" nameLabel="Connection_property_left" type="string"/>
            <property name="middle" nameLabel="Connection_property_middle" type="string"/>
            <property name="right" nameLabel="Connection_property_right" type="string"/>
        </property>
        <property name="Default connection color" nameLabel="Connection_property_default_connection_color" type="string"/>
        <property name="Correct connection color" nameLabel="Connection_property_correct_connection_color" type="string"/>
        <property name="Incorrect connection color" nameLabel="Connection_property_incorrect_connection_color" type="string"/>
        <property name="Connection thickness" nameLabel="Connection_property_connection_thickness" type="string"/>
        <property name="Random order left column" nameLabel="Connection_property_random_order_left_column" type="boolean"/>
        <property name="Random order right column" nameLabel="Connection_property_random_order_right_column" type="boolean"/>
        <property name="Show answers line color" nameLabel="Connection_property_show_answers_line_color" type="string"/>
        <property displayName="Block wrong answers" name="blockWrongAnswers" nameLabel="Connection_property_block_wrong_answers" type="boolean"/>
        <property displayName="Remove dragged element" name="removeDraggedElement" nameLabel="Connection_property_remove_dragged_element" type="boolean"/>

        <property displayName="Lang attribute" name="langAttribute" nameLabel="Connection_property_lang_attribute" type="string"/>
        <property displayName="Speech texts" name="speechTexts" nameLabel="Connection_property_speech_texts" type="staticlist">

            <property name="Connected" nameLabel="Connection_connected" type="staticrow">
                <property name="Connected" nameLabel="Connection_connected" type="string"/>
            </property>

            <property name="Disconnected" nameLabel="Connection_disconnected" type="staticrow">
                <property name="Disconnected" nameLabel="Connection_disconnected" type="string"/>
            </property>

            <property name="ConnectedTo" nameLabel="Connection_connected_to" type="staticrow">
                <property name="Connected to" nameLabel="Connection_connected_to" type="string"/>
            </property>

            <property name="Selected" nameLabel="Connection_selected" type="staticrow">
                <property name="Selected" nameLabel="Connection_selected" type="string"/>
            </property>

            <property name="Deselected" nameLabel="Connection_deselected" type="staticrow">
                <property name="Deselected" nameLabel="Connection_deselected" type="string"/>
            </property>

            <property name="Correct" nameLabel="Connection_correct" type="staticrow">
                <property name="Correct" nameLabel="Connection_correct" type="string"/>
            </property>

            <property name="Wrong" nameLabel="Connection_wrong" type="staticrow">
                <property name="Wrong" nameLabel="Connection_wrong" type="string"/>
            </property>
        </property>
    </model>
<css>.connectionContainer {&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    padding: 0px;&#13;
    border-collapse:collapse;&#13;
    border-spacing: 0px;&#13;
    direction: ltr;&#13;
}&#13;
&#13;
.connectionContainer .connectionLeftColumn {&#13;
    width: 33%;&#13;
    height: 100%;&#13;
    padding: 0px;&#13;
}&#13;
&#13;
.connectionContainer .connectionMiddleColumn {&#13;
    width: 34%;&#13;
    height: 100%;&#13;
    padding: 0px;&#13;
    overflow: hidden;&#13;
    overflow-x: visible;&#13;
}&#13;
&#13;
.connectionContainer .connectionRightColumn {&#13;
    width: 33%;&#13;
    padding: 0px;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.connectionContainer .connections {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
}&#13;
&#13;
.connectionContainer .connectionItem {&#13;
    width: 100%;&#13;
    padding: 0px;&#13;
    border-collapse:collapse;&#13;
    border-spacing: 0px;&#13;
    border: solid 1px black;&#13;
}&#13;
&#13;
.connectionContainer .content {&#13;
    height: 100%;&#13;
    width: 100%;&#13;
    border-collapse:collapse;&#13;
    border-spacing: 0px;&#13;
}&#13;
&#13;
.connectionContainer .content .connectionItemWrapper {&#13;
    padding: 0px;&#13;
}&#13;
&#13;
.connection_line {&#13;
    position: absolute;&#13;
    height:2px;&#13;
}&#13;
</css><view>&lt;table class="connectionContainer"&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="connectionLeftColumn"&gt;&#13;
            &lt;table class="content"&gt;&lt;/table&gt;&#13;
        &lt;/td&gt;&#13;
        &lt;td class="connectionMiddleColumn"&gt;&#13;
            &lt;canvas class="connections"&gt;&lt;/canvas&gt;&#13;
        &lt;/td&gt;&#13;
        &lt;td class="connectionRightColumn"&gt;&#13;
            &lt;table class="content"&gt;&lt;/table&gt;&#13;
        &lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
&lt;/table&gt;&#13;
</view><preview>&lt;table class="connectionContainer"&gt;&#13;
    &lt;tr&gt;&#13;
        &lt;td class="connectionLeftColumn"&gt;&#13;
            &lt;table class="content"&gt;&lt;/table&gt;&#13;
        &lt;/td&gt;&#13;
        &lt;td class="connectionMiddleColumn"&gt;&#13;
            &lt;canvas class="connections"&gt;&lt;/canvas&gt;&#13;
        &lt;/td&gt;&#13;
        &lt;td class="connectionRightColumn"&gt;&#13;
            &lt;table class="content"&gt;&lt;/table&gt;&#13;
        &lt;/td&gt;&#13;
    &lt;/tr&gt;&#13;
&lt;/table&gt;&#13;
</preview><presenter>function AddonConnection_create() {&#13;
&#13;
    function getTextVoiceObject (text, lang) {return {text: text, lang: lang};}&#13;
&#13;
    var presenter = function () {};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
    var addonID;&#13;
    var isWCAGOn = false;&#13;
&#13;
    presenter.uniqueIDs = [];&#13;
    presenter.uniqueElementLeft = [];&#13;
    presenter.uniqueElementRight = [];&#13;
    presenter.elements = [];&#13;
    presenter.lastClickTime = 0;&#13;
    presenter.lastEvent = null;&#13;
    presenter.disabledConnections = [];&#13;
    presenter.keyboardControllerObject = null;&#13;
    presenter.langTag = '';&#13;
    presenter.speechTexts = {};&#13;
    presenter.columnSizes = {};&#13;
    presenter.lineStackSA = [];&#13;
&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.isCheckActive = false;&#13;
&#13;
    var connections;&#13;
    var singleMode = false;&#13;
    var selectedItem = null;&#13;
    presenter.isNotActivity = false;&#13;
&#13;
    presenter.lineStack = new LineStack(true);&#13;
    presenter.correctConnections = new LineStack(false);&#13;
    var isSelectionPossible = true;&#13;
    var isRTL = false;&#13;
&#13;
    var connectionColor = "#000";&#13;
    var correctConnection = "#0d0";&#13;
    var incorrectConnection = "#d00";&#13;
    var connectionThickness = "1px";&#13;
    var showAnswersColor = "#0d0";&#13;
&#13;
    var CORRECT_ITEM_CLASS = 'connectionItem-correct';&#13;
    var WRONG_ITEM_CLASS = 'connectionItem-wrong';&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        'ID not unique': 'One or more IDs are not unique.'&#13;
    };&#13;
&#13;
    presenter.ELEMENT_SIDE = {&#13;
        LEFT: 0,&#13;
        RIGHT: 1&#13;
    };&#13;
&#13;
    presenter.getCurrentActivatedElement = function () {&#13;
        return $('.keyboard_navigation_active_element');&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeFrom_01(model);&#13;
    };&#13;
&#13;
    presenter.upgradeFrom_01 = function (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["Columns width"]) {&#13;
            upgradedModel["Columns width"] = [&#13;
                {&#13;
                    left: "",&#13;
                    middle: "",&#13;
                    right: ""&#13;
                }&#13;
            ];&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function LineStack(sendEvents) {&#13;
        this.stack = [];&#13;
        this.ids = [];&#13;
        this.sendEvents = sendEvents;&#13;
        this.shouldFireEvent = true;&#13;
&#13;
        this.setSendEvents = function (value) {&#13;
            this.sendEvents = value;&#13;
        };&#13;
&#13;
        this.push = function (line) {&#13;
            var pair = [], score, i;&#13;
            for (i = 0; i &lt; presenter.elements.length; i++) {&#13;
                if (presenter.elements[i].element.get(0) == line.from.get(0) || presenter.elements[i].element.get(0) == line.to.get(0)) {&#13;
                    pair.push(presenter.elements[i].id);&#13;
                    if (pair.length == 2) {&#13;
                        break;&#13;
                    }&#13;
                }&#13;
            }&#13;
            this.ids.push(pair);&#13;
            this.stack.push(line);&#13;
&#13;
            if (this.sendEvents) {&#13;
                score = presenter.correctConnections.hasLine(line).length &gt; 0 ? 1 : 0;&#13;
                presenter.sendEvent(pair[0], pair[1], 1, score);&#13;
                if(score == 0 &amp;&amp; presenter.blockWrongAnswers){&#13;
                    this.shouldFireEvent = false;&#13;
                    this.remove(line);&#13;
                }&#13;
            }&#13;
        };&#13;
&#13;
        this.length = function () {&#13;
            return this.stack.length;&#13;
        };&#13;
&#13;
        this.get = function (i) {&#13;
            return this.stack[i];&#13;
        };&#13;
&#13;
        this.remove = function (line) {&#13;
            function getID(element) {&#13;
                // innerWrapper -&gt; td -&gt; tr -&gt; tbody -&gt; table (which has id attribute)&#13;
                var rawID = $(element).find('.innerWrapper').parent().parent().parent().parent().attr('id');&#13;
                return rawID.split('connection-')[1];&#13;
            }&#13;
&#13;
            var linePosition = this.stack.indexOf(line);&#13;
            this.stack.splice(linePosition, 1);&#13;
            var lineFromID = getID(line.from);&#13;
            var lineToID = getID(line.to);&#13;
            var pair = [lineFromID, lineToID];&#13;
            var score;&#13;
&#13;
            for (var i = 0; i &lt; this.ids.length; i++) {&#13;
                if ((this.ids[i][0] == pair[0] &amp;&amp; this.ids[i][1] == pair[1]) ||&#13;
                    (this.ids[i][0] == pair[1] &amp;&amp; this.ids[i][1] == pair[0])) {&#13;
                    this.ids.splice(i, 1);&#13;
                    break;&#13;
                }&#13;
            }&#13;
&#13;
            if (this.sendEvents &amp;&amp; this.shouldFireEvent) {&#13;
                score = presenter.correctConnections.hasLine(line).length &gt; 0 ? 1 : 0;&#13;
                presenter.sendEvent(pair[0], pair[1], 0, score);&#13;
            }&#13;
            this.shouldFireEvent = true;&#13;
        };&#13;
&#13;
        this.clear = function () {&#13;
            this.ids.splice(0, this.ids.length);&#13;
            this.stack.splice(0, this.stack.length);&#13;
        };&#13;
&#13;
        this.hasLine = function (line) {&#13;
            for (var i = 0, stackLength = this.stack.length; i &lt; stackLength; i++) {&#13;
                if ((this.stack[i].from.get(0) == line.from.get(0) &amp;&amp; this.stack[i].to.get(0) == line.to.get(0)) ||&#13;
                    (this.stack[i].from.get(0) == line.to.get(0) &amp;&amp; this.stack[i].to.get(0) == line.from.get(0))) {&#13;
                    return [this.stack[i]];&#13;
                }&#13;
            }&#13;
            return [];&#13;
        };&#13;
&#13;
        this.hasPair = function (pair) {&#13;
            for (var i = 0; i &lt; this.ids.length; i++) {&#13;
                if (this.ids[i][0] == pair[0] &amp;&amp; this.ids[i][1] == pair[1] ||&#13;
                    this.ids[i][1] == pair[0] &amp;&amp; this.ids[i][0] == pair[1]) {&#13;
                    return true;&#13;
                }&#13;
            }&#13;
            return false;&#13;
        };&#13;
&#13;
        this.isItemUsed = function (line) {&#13;
            var lines = [];&#13;
            for (var i = 0; i &lt; this.stack.length; i++) {&#13;
                if ((this.stack[i].from.get(0) == line.from.get(0) || this.stack[i].to.get(0) == line.to.get(0)) ||&#13;
                    (this.stack[i].from.get(0) == line.to.get(0) || this.stack[i].to.get(0) == line.from.get(0))) {&#13;
                    lines.push(this.stack[i])&#13;
                }&#13;
            }&#13;
            return lines;&#13;
        }&#13;
    }&#13;
&#13;
    function Line(from, to) {&#13;
        this.from = from;&#13;
        this.to = to;&#13;
&#13;
        this.connects = function (element) {&#13;
            return from.get(0) == element.get(0) || to.get(0) == element.get(0);&#13;
        };&#13;
&#13;
        this.otherSide = function (element) {&#13;
            if (from.get(0) == element.get(0)) {&#13;
                return to;&#13;
            }&#13;
            return from;&#13;
        }&#13;
    }&#13;
&#13;
    presenter.parseDefinitionLinks = function () {&#13;
        $.each($(presenter.view).find('.innerWrapper'), function (index, element) {&#13;
            $(element).html(presenter.textParser.parse($(element).html()));&#13;
        });&#13;
&#13;
        presenter.textParser.connectLinks($(presenter.view));&#13;
    };&#13;
&#13;
    presenter.removeNonVisibleInnerHTML = function () {&#13;
        $.each($(presenter.view).find('.innerWrapper'), function (index, element) {&#13;
            var newInnerHtml = $(element).html().replace(/\\alt{([^{}|]*?)\|[^{}|]*?}(\[[a-zA-Z0-9_\- ]*?\])*/g, '$1'); // replace \alt{a|b}[c] with a&#13;
            $(element).html(newInnerHtml.replace(/\\alt{([^|{}]*?)\|[^|{}]*?}/g, '$1')); // replace \alt{a|b} with a&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.registerMathJax();&#13;
&#13;
        playerController = controller;&#13;
&#13;
        presenter.textParser = new TextParserProxy(controller.getTextParser());&#13;
    };&#13;
&#13;
    presenter.registerMathJax = function AddonConnection_registerMathJax() {&#13;
        var mathJaxDeferred = new jQuery.Deferred();&#13;
        presenter.mathJaxProcessEndedDeferred = mathJaxDeferred;&#13;
        presenter.mathJaxProcessEnded = mathJaxDeferred.promise();&#13;
&#13;
        MathJax.Hub.Register.MessageHook("End Process", function (message) {&#13;
            if ($(message[1]).hasClass('ic_page')) {&#13;
                presenter.mathJaxProcessEndedDeferred.resolve();&#13;
            }&#13;
            if ($(message[1]).hasClass('ic_popup_page')) {&#13;
                presenter.mathJaxProcessEndedDeferred.resolve();&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setColumnsWidth = function (view, columnsWidth) {&#13;
        var leftColumn = $(view).find(".connectionLeftColumn:first");&#13;
        var middleColumn = $(view).find(".connectionMiddleColumn:first");&#13;
        var rightColumn = $(view).find(".connectionRightColumn:first");&#13;
&#13;
        var leftWidth = columnsWidth[0].left;&#13;
        var middleWidth = columnsWidth[0].middle;&#13;
        var rightWidth = columnsWidth[0].right;&#13;
&#13;
        if (!leftWidth)&#13;
            leftWidth = "auto";&#13;
        if (!middleWidth)&#13;
            middleWidth = "auto";&#13;
        if (!rightWidth)&#13;
            rightWidth = "auto";&#13;
&#13;
        $(leftColumn).css('width', leftWidth);&#13;
        $(middleColumn).css('width', middleWidth);&#13;
        $(rightColumn).css('width', rightWidth);&#13;
    };&#13;
&#13;
    presenter.run = function (view, model) {&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
        eventBus = playerController.getEventBus();&#13;
        addonID = model.ID;&#13;
&#13;
        presenter.initialize(presenter.view, presenter.model, false);&#13;
&#13;
        presenter.parseDefinitionLinks();&#13;
&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function (view, model) {&#13;
        presenter.view = view;&#13;
        presenter.model = model;&#13;
        presenter.initialize(presenter.view, presenter.model, true);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        $(presenter.view).css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.validateTabindexEnabled = function (model) {&#13;
        presenter.isTabindexEnabled = ModelValidationUtils.validateBoolean(model["Is Tabindex Enabled"]);&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function setSpeechTexts (speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            connected:  'connected',&#13;
            disconnected: 'disconnected',&#13;
            connectedTo: 'connected to',&#13;
            selected: 'selected',&#13;
            deselected: 'deselected',&#13;
            correct: 'correct',&#13;
            wrong: 'wrong'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            connected:    getSpeechTextProperty(speechTexts['Connected']['Connected'], presenter.speechTexts.connected),&#13;
            disconnected: getSpeechTextProperty(speechTexts['Disconnected']['Disconnected'], presenter.speechTexts.disconnected),&#13;
            connectedTo:  getSpeechTextProperty(speechTexts['ConnectedTo']['Connected to'], presenter.speechTexts.connectedTo),&#13;
            selected:     getSpeechTextProperty(speechTexts['Selected']['Selected'], presenter.speechTexts.selected),&#13;
            deselected:   getSpeechTextProperty(speechTexts['Deselected']['Deselected'], presenter.speechTexts.deselected),&#13;
            correct:      getSpeechTextProperty(speechTexts['Correct']['Correct'], presenter.speechTexts.correct),&#13;
            wrong:        getSpeechTextProperty(speechTexts['Wrong']['Wrong'], presenter.speechTexts.wrong)&#13;
        };&#13;
    }&#13;
&#13;
    presenter.initialize = function (view, model, isPreview) {&#13;
        if (isPreview) {&#13;
            presenter.lineStack = new LineStack(false);&#13;
        }&#13;
&#13;
        presenter.langTag = model['langAttribute'];&#13;
        presenter.$view = $(view);&#13;
        presenter.$view.attr('lang', presenter.langTag);&#13;
&#13;
        setSpeechTexts(model['speechTexts']);&#13;
&#13;
        presenter.blockWrongAnswers = ModelValidationUtils.validateBoolean(model.blockWrongAnswers);&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.removeDraggedElement = ModelValidationUtils.validateBoolean(model["removeDraggedElement"]);&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        presenter.setVisibility(presenter.isVisible || isPreview);&#13;
&#13;
        isRTL = presenter.$view.css('direction').toLowerCase() === 'rtl';&#13;
        connections = presenter.$view.find('.connections:first');&#13;
&#13;
        model = presenter.upgradeModel(model);&#13;
&#13;
        this.setSingleMode(model['Single connection mode']);&#13;
&#13;
        var isRandomLeft = ModelValidationUtils.validateBoolean(model['Random order left column']);&#13;
        var isRandomRight = ModelValidationUtils.validateBoolean(model['Random order right column']);&#13;
&#13;
        presenter.validateTabindexEnabled(model);&#13;
&#13;
        if (isPreview) {&#13;
            this.loadElements(view, model, 'connectionLeftColumn', 'Left column', false);&#13;
            this.loadElements(view, model, 'connectionRightColumn', 'Right column', true);&#13;
        } else {&#13;
            if (!isRandomLeft) {&#13;
                this.loadElements(view, model, 'connectionLeftColumn', 'Left column', false);&#13;
            } else {&#13;
                this.loadRandomElementsLeft(view, model, 'connectionLeftColumn', 'Left column', false);&#13;
            }&#13;
&#13;
            if (!isRandomRight) {&#13;
                this.loadElements(view, model, 'connectionRightColumn', 'Right column', true);&#13;
            } else {&#13;
                this.loadRandomElementsRight(view, model, 'connectionRightColumn', 'Right column', true);&#13;
            }&#13;
        }&#13;
&#13;
        this.setColumnsWidth(view, model["Columns width"]);&#13;
&#13;
        if (model['Connection thickness'] != '') {&#13;
            connectionThickness = model['Connection thickness'];&#13;
        }&#13;
        if (model['Default connection color'] != '') {&#13;
            connectionColor = model['Default connection color'];&#13;
        }&#13;
        if (model['Correct connection color'] != '') {&#13;
            correctConnection = model['Correct connection color'];&#13;
        }&#13;
        if (model['Incorrect connection color'] != '') {&#13;
            incorrectConnection = model['Incorrect connection color'];&#13;
        }&#13;
        if (model['Show answers line color'] != '') {&#13;
            showAnswersColor = model['Show answers line color'];&#13;
        }&#13;
&#13;
        // isNotActivty may not exist&#13;
        presenter.isNotActivity = ModelValidationUtils.validateBoolean(model['isNotActivity'] || 'False');&#13;
&#13;
        if (isPreview) {&#13;
            presenter.initializeView(view, model);&#13;
            presenter.removeNonVisibleInnerHTML();&#13;
            presenter.drawConfiguredConnections();&#13;
        } else {&#13;
            presenter.mathJaxProcessEnded.then(function () {&#13;
                presenter.initializeView(view, model);&#13;
                presenter.registerListeners(presenter.view);&#13;
            });&#13;
        }&#13;
&#13;
        this.gatherCorrectConnections();&#13;
        presenter.buildKeyboardController();&#13;
    };&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        var elements = [];&#13;
        for (var i = 0; i &lt; presenter.elements.length; i++) {&#13;
            elements.push($(presenter.elements[i].element));&#13;
        }&#13;
&#13;
        presenter.keyboardControllerObject = new ConnectionKeyboardController(elements, 2);&#13;
        presenter.keyboardControllerObject.selectEnabled(true);&#13;
    };&#13;
&#13;
    function getElementById(id) {&#13;
        for (var i = 0; i &lt; presenter.elements.length; i++) {&#13;
            if (presenter.elements[i].id == id) {&#13;
                return presenter.elements[i].element;&#13;
            }&#13;
        }&#13;
&#13;
        return -1;&#13;
    }&#13;
&#13;
    presenter.establishElementSide = function (elementID, modelLeftSide, modelRightSide) {&#13;
        var i, arrayLength;&#13;
&#13;
        for (i = 0, arrayLength = modelLeftSide.length; i &lt; arrayLength; i += 1) {&#13;
            if (modelLeftSide[i].id === elementID) {&#13;
                return presenter.ELEMENT_SIDE.LEFT;&#13;
            }&#13;
        }&#13;
&#13;
        for (i = 0, arrayLength = modelRightSide.length; i &lt; arrayLength; i += 1) {&#13;
            if (modelRightSide[i].id === elementID) {&#13;
                return presenter.ELEMENT_SIDE.RIGHT;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.createEventData = function (source, elementFromID, elementToID, model, value, score) {&#13;
        var leftColumn = model["Left column"];&#13;
        var rightColumn = model["Right column"];&#13;
&#13;
        var fromElementSide = presenter.establishElementSide(elementFromID, leftColumn, rightColumn);&#13;
        var itemStr = "";&#13;
        switch (fromElementSide) {&#13;
            case presenter.ELEMENT_SIDE.LEFT:&#13;
                itemStr = elementFromID + '-' + elementToID;&#13;
                break;&#13;
            case presenter.ELEMENT_SIDE.RIGHT:&#13;
                itemStr = elementToID + '-' + elementFromID;&#13;
                break;&#13;
        }&#13;
&#13;
        return {&#13;
            'source': source,&#13;
            'item': itemStr,&#13;
            'value': value.toString(),&#13;
            'score': score.toString()&#13;
        };&#13;
    };&#13;
&#13;
    presenter.sendEvent = function (fromID, toID, value, score) {&#13;
        if (!presenter.isShowAnswersActive) {&#13;
            var eventData = presenter.createEventData(addonID, fromID, toID, presenter.model, value, score);&#13;
            eventBus.sendEvent('ValueChanged', eventData);&#13;
            if (presenter.isAllOK()) {&#13;
                sendAllOKEvent();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function sendAllOKEvent() {&#13;
        var eventData = {&#13;
            'source': addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
&#13;
        eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
&#13;
    function clickLogic(element) {&#13;
        if (basicClickLogic(element)) {&#13;
            presenter.redraw();&#13;
        }&#13;
    }&#13;
&#13;
    function basicClickLogic(element) {&#13;
        // workaround for android webView&#13;
        // http://code.google.com/p/android/issues/detail?id=38808&#13;
        var current = new Date().getTime();&#13;
        var delta = current - presenter.lastClickTime;&#13;
        if (!isSelectionPossible || delta &lt; 50) return;&#13;
        presenter.lastClickTime = current;&#13;
        if (!$(element).hasClass('selected') &amp;&amp; selectedItem == null) { // first element selected&#13;
            $(element).parent().find('.connectionItem').removeClass('selected');&#13;
            $(element).addClass('selected');&#13;
            selectedItem = $(element);&#13;
            return;&#13;
        }&#13;
        if (selectedItem != null &amp;&amp; $(element).get(0) == selectedItem.get(0)) { // clicking the selected element again&#13;
            $(element).removeClass('selected');&#13;
            selectedItem = null;&#13;
            return;&#13;
        }&#13;
        if (selectedItem != null &amp;&amp;&#13;
            ($(element).parents('.connectionLeftColumn').get(0) == selectedItem.parents('.connectionLeftColumn').get(0) ||&#13;
                $(element).parents('.connectionRightColumn').get(0) == selectedItem.parents('.connectionRightColumn').get(0))) {&#13;
            // element clicked in the same column&#13;
            var linesToSwitch = [];&#13;
            if (singleMode) {&#13;
                for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
                    if (presenter.lineStack.get(i).connects(selectedItem)) {&#13;
                        linesToSwitch.push(presenter.lineStack.get(i))&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            selectedItem.removeClass('selected');&#13;
            if (linesToSwitch.length == 0) {&#13;
                $(element).addClass('selected');&#13;
                selectedItem = $(element);&#13;
                return;&#13;
            } else {&#13;
                for (i in linesToSwitch) {&#13;
                    presenter.lineStack.remove(linesToSwitch[i]);&#13;
                    pushConnection(new Line($(element), linesToSwitch[i].otherSide(selectedItem)), false);&#13;
                }&#13;
            }&#13;
        } else {&#13;
            if(presenter.checkIfConnectionDisabled($(element).attr('id'), selectedItem.attr('id'))){&#13;
                return;&#13;
            }&#13;
            var line = new Line($(element), selectedItem);&#13;
            var shouldDraw = true;&#13;
&#13;
            if (singleMode) {&#13;
                var usedInLines = presenter.lineStack.isItemUsed(line);&#13;
                if (usedInLines.length === 2) {&#13;
                    shouldDraw = false&#13;
                }&#13;
            }&#13;
            if (shouldDraw) {&#13;
                pushConnection(line, false);&#13;
            }&#13;
        }&#13;
&#13;
        selectedItem.removeClass('selected');&#13;
        selectedItem = null;&#13;
        return true;&#13;
    }&#13;
&#13;
    presenter.drawTempLine = function(x,y) {&#13;
        if ($(presenter.view).find('#connection_line_tmp').length &gt; 0) {&#13;
            $(presenter.view).find('#connection_line_tmp').remove();&#13;
        }&#13;
        var m, angle, d, transform,&#13;
            x1 = parseInt(presenter.iconLeft, 10),&#13;
            y1 = parseInt(presenter.iconTop, 10);&#13;
&#13;
        m = (y-y1)/(x-x1);&#13;
        angle = (Math.atan(m))*180/(Math.PI);&#13;
        d = Math.sqrt(((x-x1)*(x-x1)) + ((y-y1)*(y-y1)));&#13;
        if (x &gt;= x1){&#13;
            transform = (360 + angle) % 360;&#13;
        } else {&#13;
            transform = 180 + angle;&#13;
        }&#13;
&#13;
        var div = $('&lt;div&gt;');&#13;
        div.attr('id','connection_line_tmp');&#13;
        div.attr('class','connection_line');&#13;
        div.attr('style','left: '+x1+'px; top: '+y1+'px');&#13;
        $(presenter.view).prepend(div);&#13;
        $(presenter.view).find('#connection_line_tmp').css({&#13;
            'left': x1,&#13;
            'top': y1,&#13;
            'width': d,&#13;
            'background-color': connectionColor,&#13;
            'transform' : 'rotate('+transform+'deg)',&#13;
            'transform-origin' : '0px 0px',&#13;
            '-ms-transform' : 'rotate('+transform+'deg)',&#13;
            '-ms-transform-origin' : '0px 0px',&#13;
            '-moz-transform' : 'rotate('+transform+'deg)',&#13;
            '-moz-transform-origin' : '0px 0px',&#13;
            '-webkit-transform' : 'rotate('+transform+'deg)',&#13;
            '-webkit-transform-origin' : '0px 0px',&#13;
            '-o-transform' : 'rotate('+transform+'deg)',&#13;
            '-o-transform-origin' : '0px 0px'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.registerListeners = function (view) {&#13;
&#13;
        presenter.$connectionContainer = $(view).find('.connectionContainer');&#13;
        presenter.$leftColumn = $(view).find('connectionLeftColumn');&#13;
        presenter.$rightColumn = $(view).find('connectionRightColumn');&#13;
&#13;
        presenter.$connectionContainer.click(function (e){&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$leftColumn.click(function (e){&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        presenter.$rightColumn.click(function (e){&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
        });&#13;
&#13;
        var element = $(view).find('.connectionItem');&#13;
        var draggedElementColumn;&#13;
&#13;
        element.on('touchstart', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
            presenter.lastEvent = e;&#13;
        });&#13;
&#13;
        var scale = playerController.getScaleInformation();&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.2.2", "4.4.2"].indexOf(android_ver) === -1 || window.navigator.userAgent.indexOf('Chrome') &gt; 0) {&#13;
            element.each(function(){&#13;
                var e = $(this);&#13;
                e.draggable({&#13;
                    revert: presenter.removeDraggedElement ? true : "invalid",&#13;
                    opacity: presenter.removeDraggedElement ? 1 : 0.7,&#13;
                    helper: presenter.removeDraggedElement ? "original": "clone",&#13;
                    cursorAt: {&#13;
                        left: Math.round(e.find('.inner').width()/2),&#13;
                        top: Math.round(e.find('.inner').height()/2)&#13;
                    },&#13;
                    start: function (event, ui) {&#13;
                        ui.helper.css("visibility", "hidden");&#13;
                        var $iconWrapper = $(e).find(".iconWrapper");&#13;
                        scale = playerController.getScaleInformation();&#13;
&#13;
                        presenter.iconTop = $iconWrapper.position().top / scale.scaleY + ($iconWrapper.height()/2);&#13;
                        presenter.iconLeft = $iconWrapper.position().left / scale.scaleX +  $iconWrapper.width();&#13;
&#13;
                        if (!isSelectionPossible) {&#13;
                            event.stopPropagation();&#13;
                            event.preventDefault();&#13;
                            return;&#13;
                        }&#13;
                        $(element).removeClass('selected');&#13;
                        selectedItem = null;&#13;
                        ui.helper.zIndex(100);&#13;
                        clickLogic(this);&#13;
                        if (presenter.removeDraggedElement) {&#13;
                            ui.helper.find('.icon').hide();&#13;
                            ui.helper.removeClass('selected');&#13;
                        } else {&#13;
                            ui.helper.find('.icon').remove();&#13;
                            ui.helper.width($(this).find('.inner').width());&#13;
                            ui.helper.height($(this).find('.inner').height());&#13;
                        }&#13;
                        if ($(this).parents('.connectionLeftColumn').length) {&#13;
                            draggedElementColumn = 'left';&#13;
                        } else {&#13;
                            draggedElementColumn = 'right';&#13;
                        }&#13;
                    },&#13;
                    drag: function (event, ui) {&#13;
                        presenter.mouseSX = parseInt(event.pageX,10) - parseInt($(presenter.view).offset().left,10);&#13;
                        presenter.mouseSY = parseInt(event.pageY,10) - parseInt($(presenter.view).offset().top,10);&#13;
&#13;
                        presenter.drawTempLine(presenter.mouseSX / scale.scaleX, presenter.mouseSY / scale.scaleY);&#13;
                    },&#13;
                    stop: function (event, ui) {&#13;
                        ui.helper.zIndex(0);&#13;
                        if (presenter.removeDraggedElement) {&#13;
                            ui.helper.find('.icon').show();&#13;
                        } else {&#13;
                            ui.helper.remove();&#13;
                        }&#13;
                        presenter.redraw();&#13;
                        if ($(presenter.view).find('#connection_line_tmp').length &gt; 0) {&#13;
                            $(presenter.view).find('#connection_line_tmp').remove();&#13;
                        }&#13;
                    }&#13;
                });&#13;
&#13;
                e.droppable({&#13;
                    tolerance: "pointer",&#13;
                    drop: function (event, ui) {&#13;
                        $(this).removeClass('selected');&#13;
                        basicClickLogic(this);&#13;
                        ui.draggable.removeClass('selected');&#13;
                        if (presenter.lastEvent) {&#13;
                            presenter.lastEvent.type = "touchend";&#13;
                        }&#13;
                    },&#13;
                    over: function (event, ui) {&#13;
                        var elementColumn;&#13;
                        if ($(this).parents('.connectionLeftColumn').length) {&#13;
                            elementColumn = 'left';&#13;
                        } else {&#13;
                            elementColumn = 'right';&#13;
                        }&#13;
                        if (elementColumn != draggedElementColumn) {&#13;
                            $(this).addClass('selected');&#13;
                        }&#13;
                    },&#13;
                    out: function (event, ui) {&#13;
                        $(this).removeClass('selected');&#13;
                    }&#13;
                });&#13;
            });&#13;
        } else {&#13;
            element.on('mouseleave', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mouseenter', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mouseup', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mousedown', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mouseover', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
&#13;
            element.on('mouseout', function (e) {&#13;
                e.stopPropagation();&#13;
            });&#13;
        }&#13;
        element.on('touchend', function (e) {&#13;
            e.preventDefault();&#13;
            e.stopPropagation();&#13;
            if (presenter.lastEvent.type != e.type) {&#13;
                presenter.isClicked = false;&#13;
                clickLogic(this);&#13;
                presenter.isClicked = true;&#13;
            }&#13;
        });&#13;
&#13;
        element.click(function (e) {&#13;
            e.stopPropagation();&#13;
            if(!presenter.isClicked){&#13;
                clickLogic(this);&#13;
            }&#13;
        });&#13;
&#13;
    };&#13;
&#13;
    presenter.setSingleMode = function (singleModeString) {&#13;
        singleMode = (singleModeString.toLowerCase() === 'true')&#13;
    };&#13;
&#13;
    presenter.addClassToElement = function (element, additionalClass) {&#13;
        if (additionalClass) {&#13;
            $(element).addClass(additionalClass);&#13;
        }&#13;
&#13;
        return element;&#13;
    };&#13;
&#13;
    presenter.loadElements = function (view, model, columnClass, columnModel, isRightColumn) {&#13;
        var column = $(view).find('.' + columnClass + ':first').find('.content:first');&#13;
        for (var i = 0, columnLength = model[columnModel].length; i &lt; columnLength; i++) {&#13;
            presenter.appendElements(i, model, columnModel, column, isRightColumn);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isIDUnique = function (id) {&#13;
        if (id == '') return true;&#13;
        if ($.inArray(id, presenter.uniqueIDs) &lt; 0) {&#13;
            presenter.uniqueIDs.push(id);&#13;
            return true;&#13;
        } else {&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addTabindexToElement = function(element, tabindexValue){&#13;
        element.attr("tabindex", tabindexValue);&#13;
    };&#13;
&#13;
    presenter.appendElements = function (i, model, columnModel, column, isRightColumn) {&#13;
        presenter.columnSizes[columnModel] = model[columnModel].length;&#13;
        var id = model[columnModel][i]['id'];&#13;
        if (!this.isIDUnique(id)) {&#13;
            return $(this.view).html(this.ERROR_MESSAGES['ID not unique']);&#13;
        }&#13;
        var element = $('&lt;table class="connectionItem" id="connection-' + id + '"&gt;&lt;/div&gt;');&#13;
        var row = $('&lt;tr&gt;&lt;/tr&gt;');&#13;
        element.append(row);&#13;
        var innerElement = $('&lt;td class="inner"&gt;&lt;/td&gt;');&#13;
        var innerWrapper = $('&lt;div class="innerWrapper"&gt;&lt;/div&gt;');&#13;
        innerWrapper = presenter.addClassToElement(innerWrapper, model[columnModel][i]['additional class']);&#13;
        $(innerWrapper).css('direction', isRTL ? 'rtl' : 'ltr');&#13;
        innerWrapper.html(model[columnModel][i]['content']);&#13;
&#13;
        if(presenter.isTabindexEnabled) {&#13;
            presenter.addTabindexToElement(innerWrapper, 0);&#13;
        }&#13;
&#13;
        innerElement.append(innerWrapper);&#13;
        var iconElement = $('&lt;td class="icon"&gt;&lt;/td&gt;');&#13;
        var iconWrapper = $('&lt;div class="iconWrapper"&gt;&lt;/div&gt;');&#13;
        iconElement.append(iconWrapper);&#13;
        if (isRightColumn) {&#13;
            row.append(iconElement);&#13;
            row.append(innerElement);&#13;
        } else {&#13;
            row.append(innerElement);&#13;
            row.append(iconElement);&#13;
        }&#13;
        presenter.elements.push({&#13;
            element: element,&#13;
            id: id,&#13;
            connects: model[columnModel][i]['connects to']&#13;
        });&#13;
        var newRow = $('&lt;tr&gt;&lt;/tr&gt;');&#13;
        var newCell = $('&lt;td class="connectionItemWrapper"&gt;&lt;/td&gt;');&#13;
        newCell.append(element);&#13;
        newRow.append(newCell);&#13;
        column.append(newRow);&#13;
    };&#13;
&#13;
    presenter.loadRandomElementsLeft = function (view, model, columnClass, columnModel, isRightColumn) {&#13;
        var column = $(view).find('.' + columnClass + ':first').find('.content:first');&#13;
        var elementCounterLeft = 0;&#13;
        var columnLength = model[columnModel].length;&#13;
        while (elementCounterLeft &lt; model[columnModel].length) {&#13;
            var i = Math.floor((Math.random() * columnLength));&#13;
            if (presenter.isElementLeftUnique(i)){&#13;
                presenter.appendElements(i, model, columnModel, column, isRightColumn);&#13;
                elementCounterLeft++;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.loadRandomElementsRight = function (view, model, columnClass, columnModel, isRightColumn) {&#13;
        var column = $(view).find('.' + columnClass + ':first').find('.content:first');&#13;
        var elementCounterRight = 0;&#13;
        var columnLength = model[columnModel].length;&#13;
        while (elementCounterRight &lt; model[columnModel].length) {&#13;
            var i = Math.floor((Math.random() * columnLength));&#13;
            if (presenter.isElementRightUnique(i)){&#13;
                presenter.appendElements(i, model, columnModel, column, isRightColumn);&#13;
                elementCounterRight++;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isElementLeftUnique = function (element) {&#13;
        var isElement = false;&#13;
        for (var i=0; i&lt;presenter.uniqueElementLeft.length; i++){&#13;
            if(presenter.uniqueElementLeft[i] == element){&#13;
              isElement = true;&#13;
            }&#13;
        }&#13;
        if(isElement){&#13;
            return false;&#13;
        }else{&#13;
            presenter.uniqueElementLeft.push(element);&#13;
            return true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isElementRightUnique = function (element) {&#13;
        var isElement = false;&#13;
        for (var i=0; i&lt;presenter.uniqueElementRight.length; i++){&#13;
            if(presenter.uniqueElementRight[i] == element){&#13;
                isElement = true;&#13;
            }&#13;
        }&#13;
        if(isElement){&#13;
            return false;&#13;
        }else{&#13;
            presenter.uniqueElementRight.push(element);&#13;
            return true;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.initializeView = function (view, model) {&#13;
        var leftColumnHeight = $(view).find('.connectionLeftColumn:first').outerHeight();&#13;
        var rightColumnHeight = $(view).find('.connectionRightColumn:first').outerHeight();&#13;
        var height = model['Height'];// leftColumnHeight &gt; rightColumnHeight ? leftColumnHeight : rightColumnHeight;&#13;
        var leftColumnWidth = $(view).find('.connectionLeftColumn:first').outerWidth(true);&#13;
        var rightColumnWidth = $(view).find('.connectionRightColumn:first').outerWidth(true);&#13;
        var width = model['Width'] - leftColumnWidth - rightColumnWidth;&#13;
&#13;
        presenter.height = height;&#13;
        presenter.width = width;&#13;
&#13;
        var context = connections[0].getContext('2d');&#13;
        context.canvas.width = width;&#13;
        context.canvas.height = height;&#13;
        connections.css({&#13;
            width: width + 'px',&#13;
            height: height + 'px'&#13;
        });&#13;
        connections.translateCanvas({&#13;
            x: 0.5, y: 0.5&#13;
        });&#13;
    };&#13;
&#13;
    presenter.gatherCorrectConnections = function () {&#13;
        presenter.correctConnections.clear();&#13;
        var elements = presenter.elements;&#13;
        for (var i = 0, elementsLength = elements.length; i &lt; elementsLength; i++) {&#13;
            var connects = elements[i]['connects'].split(',');&#13;
            for (var j = 0; j &lt; connects.length; j++) {&#13;
                if (connects[j] != "" &amp;&amp;&#13;
                    $.inArray(connects[j], presenter.uniqueIDs) &gt;= 0) {&#13;
                    var pair = [elements[i]['id'], connects[j]];&#13;
                    var line = new Line(&#13;
                        getElementById(pair[0]),&#13;
                        getElementById(pair[1])&#13;
                    );&#13;
                   if (!presenter.correctConnections.hasPair(pair)) {&#13;
                        presenter.correctConnections.push(line);&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.drawConfiguredConnections = function () {&#13;
        for (var i = 0; i &lt; presenter.correctConnections.length(); i++) {&#13;
            pushConnection(presenter.correctConnections.get(i), true)&#13;
        }&#13;
        presenter.redraw();&#13;
    };&#13;
&#13;
    presenter.getElementSnapPoint = function AddonConnection_getElementSnapPoint(element) {&#13;
        var offset = element.offset();&#13;
        var scale = playerController.getScaleInformation();&#13;
        var snapPoint = [0, 0];&#13;
&#13;
        var elementWidth = element.outerWidth(true) * scale.scaleX;&#13;
        var elementHeight = element.outerHeight() * scale.scaleY;&#13;
&#13;
        if (element.parents('.connectionLeftColumn').length &gt; 0) {&#13;
            snapPoint = [offset.left + elementWidth, offset.top + elementHeight / 2];&#13;
        }&#13;
        if (element.parents('.connectionRightColumn').length &gt; 0) {&#13;
            snapPoint = [offset.left, offset.top + elementHeight / 2];&#13;
        }&#13;
&#13;
        // snapPoint[0] is x offset, [1] is y offset&#13;
        snapPoint[0] /= scale.scaleX;&#13;
        snapPoint[1] /= scale.scaleY;&#13;
&#13;
        return snapPoint;&#13;
    };&#13;
&#13;
    function pushConnection(line, isPreview) {&#13;
        var addLine = true, linesToRemove = [], existingLines;&#13;
        if (singleMode) {&#13;
            existingLines = presenter.lineStack.isItemUsed(line);&#13;
            if (existingLines.length &gt; 0) {&#13;
                if (!isPreview) {&#13;
                    linesToRemove.push.apply(linesToRemove, existingLines)&#13;
                }&#13;
                if (presenter.lineStack.hasLine(line).length &gt; 0) {&#13;
                    addLine = false&#13;
                }&#13;
            }&#13;
        } else {&#13;
            existingLines = presenter.lineStack.hasLine(line);&#13;
            if (existingLines.length &gt; 0) {&#13;
                if (!isPreview) {&#13;
                    linesToRemove.push.apply(linesToRemove, existingLines);&#13;
                }&#13;
                addLine = false;&#13;
            }&#13;
        }&#13;
        for (var i = 0; i &lt; linesToRemove.length; i++) {&#13;
            presenter.lineStack.remove(linesToRemove[i]);&#13;
        }&#13;
        if (addLine) {&#13;
            presenter.lineStack.push(line);&#13;
        }&#13;
        readConnected(addLine);&#13;
    }&#13;
&#13;
    presenter.redraw = function AddonConnection_redraw() {&#13;
        connections.width = connections.width;&#13;
&#13;
        var android_ver = MobileUtils.getAndroidVersion(window.navigator.userAgent);&#13;
        if (["4.1.1", "4.1.2", "4.2.2", "4.3", "4.4.2"].indexOf(android_ver) !== -1) {&#13;
            $(presenter.view).find('.connections').remove();&#13;
            var canvas2 = $('&lt;canvas&gt;&lt;/canvas&gt;');&#13;
            canvas2.addClass('connections');&#13;
            $(presenter.view).find('.connectionMiddleColumn').append(canvas2);&#13;
&#13;
            var context = canvas2[0].getContext('2d');&#13;
            context.canvas.width = presenter.width;&#13;
            context.canvas.height = presenter.height;&#13;
            canvas2.css({&#13;
                width: presenter.width + 'px',&#13;
                height: presenter.height + 'px'&#13;
            });&#13;
            canvas2.translateCanvas({&#13;
                x: 0.5, y: 0.5&#13;
            });&#13;
&#13;
            connections = $(presenter.view).find('.connections');&#13;
        } else{&#13;
            connections.clearCanvas();&#13;
        }&#13;
&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            drawLine(presenter.lineStack.get(i), connectionColor)&#13;
        }&#13;
    };&#13;
&#13;
    presenter.redrawShowAnswers = function AddonConnection_redrawShowAnswers () {&#13;
        connections.clearCanvas();&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            drawLine(presenter.lineStack.get(i), showAnswersColor)&#13;
        }&#13;
    };&#13;
&#13;
    function drawLine(line, color) {&#13;
        var from = presenter.getElementSnapPoint(line.from);&#13;
        var to = presenter.getElementSnapPoint(line.to);&#13;
        var canvasOffset = connections.offset();&#13;
        var scale = playerController.getScaleInformation();&#13;
&#13;
        canvasOffset.left /= scale.scaleX;&#13;
        canvasOffset.top /= scale.scaleY;&#13;
&#13;
        connections.drawLine({&#13;
            strokeStyle: color,&#13;
            strokeWidth: connectionThickness,&#13;
            x1: to[0] - canvasOffset.left, y1: to[1] - canvasOffset.top,&#13;
            x2: from[0] - canvasOffset.left, y2: from[1] - canvasOffset.top&#13;
        });&#13;
    }&#13;
&#13;
    presenter.setShowErrorsMode = function () {&#13;
        presenter.isCheckActive = true;&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.isNotActivity) return 0;&#13;
&#13;
        connections.clearCanvas();&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            var line = presenter.lineStack.get(i);&#13;
            if (presenter.correctConnections.hasLine(line).length &gt; 0) {&#13;
                drawLine(presenter.lineStack.get(i), correctConnection);&#13;
                var fromElementCorrect = $(presenter.view).find('#'+presenter.lineStack.get(i).from[0].id);&#13;
                var toElementCorrect = $(presenter.view).find('#'+presenter.lineStack.get(i).to[0].id);&#13;
                $(fromElementCorrect).addClass('connectionItem-correct');&#13;
                $(toElementCorrect).addClass('connectionItem-correct');&#13;
            } else {&#13;
                drawLine(presenter.lineStack.get(i), incorrectConnection);&#13;
                var fromElementIncorrect = $(presenter.view).find('#'+presenter.lineStack.get(i).from[0].id);&#13;
                var toElementIncorrect = $(presenter.view).find('#'+presenter.lineStack.get(i).to[0].id);&#13;
                $(fromElementIncorrect).addClass('connectionItem-wrong');&#13;
                $(toElementIncorrect).addClass('connectionItem-wrong');&#13;
            }&#13;
        }&#13;
        $(presenter.view).find('.connectionItem').each(function () {&#13;
           if ($(this).hasClass('connectionItem-correct') &amp;&amp; $(this).hasClass('connectionItem-wrong')) {&#13;
               $(this).removeClass('connectionItem-correct');&#13;
           }&#13;
        });&#13;
        presenter.$connectionContainer.find('.selected').removeClass('selected');&#13;
        selectedItem = null;&#13;
        isSelectionPossible = false;&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function () {&#13;
        presenter.isCheckActive = false;&#13;
        presenter.gatherCorrectConnections();&#13;
        presenter.redraw();&#13;
        $(presenter.view).find('.connectionItem').each(function () {&#13;
            $(this).removeClass('connectionItem-correct');&#13;
            $(this).removeClass('connectionItem-wrong');&#13;
        });&#13;
        isSelectionPossible = true;&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        presenter.keyboardControllerObject.selectEnabled(true);&#13;
        presenter.lineStack.clear();&#13;
        isSelectionPossible = true;&#13;
        presenter.$connectionContainer.find('.selected').removeClass('selected');&#13;
        $(presenter.view).find('.connectionItem').each(function () {&#13;
            $(this).removeClass('connectionItem-correct');&#13;
            $(this).removeClass('connectionItem-wrong');&#13;
        });&#13;
&#13;
        presenter.redraw();&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
        presenter.disabledConnections = [];&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function () {&#13;
        if (presenter.isNotActivity) return 0;&#13;
&#13;
        var errors = 0;&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            var line = presenter.lineStack.get(i);&#13;
            if (presenter.correctConnections.hasLine(line).length == 0) {&#13;
                errors++;&#13;
            }&#13;
        }&#13;
        return errors;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function () {&#13;
        if (presenter.isNotActivity) return 0;&#13;
&#13;
        return presenter.correctConnections.length();&#13;
    };&#13;
&#13;
    presenter.getScore = function () {&#13;
        if (presenter.isNotActivity) return 0;&#13;
&#13;
        var score = 0;&#13;
        for (var i = 0; i &lt; presenter.lineStack.length(); i++) {&#13;
            var line = presenter.lineStack.get(i);&#13;
            if (presenter.correctConnections.hasLine(line).length &gt; 0) {&#13;
                score++;&#13;
            }&#13;
        }&#13;
        return score;&#13;
    };&#13;
&#13;
    presenter.getState = function () {&#13;
        var id = [];&#13;
        for (var i = 0; i &lt; presenter.lineStack.ids.length; i++) {&#13;
            id.push(presenter.lineStack.ids[i].join(':'))&#13;
        }&#13;
        return JSON.stringify({&#13;
            id: id,&#13;
            isVisible: presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function (state) {&#13;
        var hookExecuted = false;&#13;
&#13;
        presenter.mathJaxProcessEnded.then(function () {&#13;
            if (state != '' &amp;&amp; !hookExecuted) {&#13;
                presenter.lineStack.setSendEvents(false);&#13;
&#13;
                var parsedState = JSON.parse(state);&#13;
                var id;&#13;
                if(typeof parsedState.isVisible !== "undefined"){&#13;
                    id = parsedState.id;&#13;
                    presenter.setVisibility(parsedState.isVisible);&#13;
                    presenter.isVisible = parsedState.isVisible;&#13;
                }else{&#13;
                    id = parsedState;&#13;
                }&#13;
                for (var i = 0; i &lt; id.length; i++) {&#13;
                    var pair = id[i].split(':');&#13;
                    pushConnection(new Line(getElementById(pair[0]), getElementById(pair[1])), false);&#13;
                }&#13;
&#13;
                presenter.lineStack.setSendEvents(true);&#13;
                presenter.redraw();&#13;
            }&#13;
&#13;
            hookExecuted = true;&#13;
        });&#13;
    };&#13;
&#13;
    presenter.validateAdditionalClass = function (view, additionalClass) {&#13;
        var additionalClassElements = $(view).find('.' + additionalClass);&#13;
        var isAdditionalClass = $(view).find('.' + additionalClass).length &gt; 0;&#13;
&#13;
        if (!isAdditionalClass) {&#13;
            return { isPresent: false, count: 0 };&#13;
        }&#13;
&#13;
        return { isPresent: true, count: additionalClassElements.length };&#13;
    };&#13;
&#13;
    presenter.validateView = function (view, searchingKeyword) {&#13;
        var validatedAdditionalClass = presenter.validateAdditionalClass(view, searchingKeyword);&#13;
        if (!validatedAdditionalClass.isPresent) {&#13;
            return { isPresent: false, count: validatedAdditionalClass.count };&#13;
        }&#13;
        return { isPresent: true, count: validatedAdditionalClass.count };&#13;
    };&#13;
&#13;
    presenter.getElementById = function (id) {&#13;
        return getElementById(id);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
&#13;
    presenter.isSelected = function (leftIndex, rightIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var leftElement = getElementById(leftIndex);&#13;
        var rightElement = getElementById(rightIndex);&#13;
        var line = new Line(leftElement, rightElement);&#13;
        return (presenter.lineStack.hasLine(line).length &gt; 0);&#13;
    };&#13;
&#13;
    presenter.isAttempted = function () {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        return (presenter.lineStack.stack.length &gt; 0)&#13;
    };&#13;
&#13;
&#13;
    presenter.markAsCorrect = function (leftIndex, rightIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var leftElement = getElementById(leftIndex);&#13;
        var rightElement = getElementById(rightIndex);&#13;
        var line = new Line(leftElement, rightElement);&#13;
        presenter.correctConnections.push(line);&#13;
        if (presenter.lineStack.hasLine(line))&#13;
            drawLine(line, correctConnection);&#13;
&#13;
    };&#13;
&#13;
    presenter.markAsWrong = function (leftIndex, rightIndex) {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        var leftElement = getElementById(leftIndex);&#13;
        var rightElement = getElementById(rightIndex);&#13;
        var line = new Line(leftElement, rightElement);&#13;
        if (presenter.correctConnections.hasLine(line))&#13;
            presenter.correctConnections.remove(line);&#13;
        if (presenter.lineStack.hasLine(line))&#13;
            drawLine(line, incorrectConnection);&#13;
&#13;
    };&#13;
&#13;
    presenter.isSelectedCommand = function (params) {&#13;
        presenter.isSelected(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.markAsCorrectCommand = function (params) {&#13;
        presenter.markAsCorrect(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.markAsWrongCommand = function (params) {&#13;
        presenter.markAsWrong(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.isAttemptedCommand = function () {&#13;
        return presenter.isAttempted();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (!isSelectionPossible) {&#13;
            return;&#13;
        }&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isSelected': presenter.isSelectedCommand,&#13;
            'markAsCorrect': presenter.markAsCorrectCommand,&#13;
            'markAsWrong': presenter.markAsWrongCommand,&#13;
            'isAttempted' : presenter.isAttemptedCommand,&#13;
            'showAnswers': presenter.showAnswers,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide,&#13;
            'hideAnswers': presenter.hideAnswers,&#13;
            'disable': presenter.disableCommand,&#13;
            'enable': presenter.enableCommand&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.disableCommand = function (params) {&#13;
        presenter.disable(params[0], params[1]);&#13;
    };&#13;
&#13;
    presenter.disable = function(id1, id2) {&#13;
        presenter.disabledConnections.push({id1: id1, id2: id2});&#13;
    };&#13;
&#13;
    presenter.enableCommand = function (params) {&#13;
        presenter.enable(params[0], params[1]);&#13;
    };&#13;
&#13;
    function convertIds (id1, id2){&#13;
        id1 = id1.toString();&#13;
        id2 = id2.toString();&#13;
&#13;
        id1 = id1.substr(id1.indexOf("-") + 1);&#13;
        id2 = id2.substr(id2.indexOf("-") + 1);&#13;
&#13;
        return {&#13;
            id1: id1,&#13;
            id2: id2&#13;
        }&#13;
    }&#13;
&#13;
    presenter.enable = function(id1, id2) {&#13;
        var convertedIds = convertIds(id1, id2);&#13;
        id1 = convertedIds.id1;&#13;
        id2 = convertedIds.id2;&#13;
&#13;
        for (var i=0; i &lt; presenter.disabledConnections.length; i++){&#13;
            if((presenter.disabledConnections[i].id1 == id1 &amp;&amp; presenter.disabledConnections[i].id2 == id2) ||&#13;
                (presenter.disabledConnections[i].id1 == id2 &amp;&amp; presenter.disabledConnections[i].id2 == id1)){&#13;
                presenter.disabledConnections.splice(i, 1);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.checkIfConnectionDisabled = function (id1, id2) {&#13;
        var convertedIds = convertIds(id1, id2);&#13;
        id1 = convertedIds.id1;&#13;
        id2 = convertedIds.id2;&#13;
&#13;
        for (var i=0; i &lt; presenter.disabledConnections.length; i++){&#13;
            if((presenter.disabledConnections[i].id1 == id1 &amp;&amp; presenter.disabledConnections[i].id2 == id2) ||&#13;
                (presenter.disabledConnections[i].id1 == id2 &amp;&amp; presenter.disabledConnections[i].id2 == id1)){&#13;
                return true;&#13;
            }&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.isNotActivity) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.keyboardControllerObject.selectEnabled(false);&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.tmpElements = [];&#13;
        for (var elem = 0; elem &lt; presenter.lineStack.ids.length; elem++) {&#13;
            presenter.tmpElements.push(presenter.lineStack.ids[elem].join(':'))&#13;
        }&#13;
&#13;
        presenter.lineStack.clear();&#13;
        presenter.redraw();&#13;
&#13;
        var elements = presenter.elements;&#13;
        for (var i = 0, elementsLength = elements.length; i &lt; elementsLength; i++) {&#13;
            var connects = elements[i]['connects'].split(',');&#13;
            for (var j = 0; j &lt; connects.length; j++) {&#13;
                if (connects[j] != "" &amp;&amp; $.inArray(connects[j], presenter.uniqueIDs) &gt;= 0) {&#13;
                    var pair = [elements[i]['id'], connects[j]];&#13;
                    var line = new Line(&#13;
                        getElementById(pair[0]),&#13;
                        getElementById(pair[1])&#13;
                    );&#13;
                    presenter.lineStack.push(line);&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        presenter.lineStackSA = {&#13;
            stack: presenter.lineStack ? presenter.lineStack.stack.concat([]) : []&#13;
        };&#13;
        presenter.redrawShowAnswers();&#13;
        presenter.lineStack.clear();&#13;
        isSelectionPossible = false;&#13;
&#13;
        for (var element = 0; element &lt; presenter.tmpElements.length; element++) {&#13;
            var pairs =  presenter.tmpElements[element].split(':');&#13;
            pushConnection(new Line(getElementById(pairs[0]), getElementById(pairs[1])), false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.isNotActivity) {&#13;
            return;&#13;
        }&#13;
        presenter.keyboardControllerObject.selectEnabled(true);&#13;
        presenter.redraw();&#13;
        presenter.isShowAnswersActive = false;&#13;
        isSelectionPossible = true;&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftDown, event);&#13;
    };&#13;
&#13;
    function ConnectionKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    function readConnected (isDrawing) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
        if (tts &amp;&amp; presenter.$view.hasClass('ic_active_module')) {&#13;
            speak([getTextVoiceObject(&#13;
                isDrawing ? presenter.speechTexts.connected : presenter.speechTexts.disconnected&#13;
            )]);&#13;
        }&#13;
    }&#13;
&#13;
    function getConnections ($element) {&#13;
        var element = $element[0];&#13;
        var result = [];&#13;
        var lines = presenter.isShowAnswersActive ? presenter.lineStackSA : presenter.lineStack;&#13;
&#13;
        for (var i=0; i&lt;lines.stack.length; i++) {&#13;
            var line = lines.stack[i];&#13;
&#13;
            if (element === line.from[0]) {&#13;
                result.push(line.to);&#13;
            }&#13;
&#13;
            if (element === line.to[0]) {&#13;
                result.push(line.from);&#13;
            }&#13;
        }&#13;
&#13;
        return result;&#13;
    }&#13;
&#13;
    function getConnectionsInfo (connections) {&#13;
        var result = [];&#13;
&#13;
        for (var i=0; i&lt;connections.length; i++) {&#13;
&#13;
            result = result.concat(window.TTSUtils.getTextVoiceArrayFromElement(connections[i],presenter.langTag));&#13;
&#13;
            if (connections[i].hasClass(CORRECT_ITEM_CLASS) &amp;&amp; presenter.isCheckActive) {&#13;
                result.push(getTextVoiceObject(presenter.speechTexts.correct));&#13;
            }&#13;
&#13;
            if (connections[i].hasClass(WRONG_ITEM_CLASS) &amp;&amp; presenter.isCheckActive) {&#13;
                result.push(getTextVoiceObject(presenter.speechTexts.wrong));&#13;
            }&#13;
        }&#13;
&#13;
        return result;&#13;
    }&#13;
&#13;
    function readActivatedElementConnections () {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
        if (tts) {&#13;
            var $active = presenter.getCurrentActivatedElement();&#13;
            var connections = getConnections($active);&#13;
            var TextVoiceArray = window.TTSUtils.getTextVoiceArrayFromElement($active, presenter.langTag);&#13;
&#13;
            if ($active.hasClass('selected') &amp;&amp; !presenter.isShowAnswersActive) {&#13;
                 TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.selected, ''));&#13;
            }&#13;
&#13;
            if (connections.length) {&#13;
                TextVoiceArray.push(getTextVoiceObject(presenter.speechTexts.connectedTo, ''));&#13;
                TextVoiceArray = TextVoiceArray.concat(getConnectionsInfo(connections));&#13;
            }&#13;
&#13;
            speak(TextVoiceArray);&#13;
        }&#13;
    }&#13;
&#13;
    function speak (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(playerController);&#13;
&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    }&#13;
&#13;
    ConnectionKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    ConnectionKeyboardController.prototype.constructor = ConnectionKeyboardController;&#13;
&#13;
    ConnectionKeyboardController.prototype.nextRow = function (event) {&#13;
         event.preventDefault();&#13;
        var new_position_index = this.keyboardNavigationCurrentElementIndex + 1;&#13;
        if (new_position_index &gt;= this.keyboardNavigationElementsLen || new_position_index &lt; 0) {&#13;
            new_position_index = this.keyboardNavigationCurrentElementIndex;&#13;
        }&#13;
        if (new_position_index === presenter.columnSizes['Left column']) {&#13;
            new_position_index = this.keyboardNavigationCurrentElementIndex;&#13;
        }&#13;
        this.markCurrentElement(new_position_index);&#13;
        readActivatedElementConnections();&#13;
    };&#13;
&#13;
    ConnectionKeyboardController.prototype.previousRow = function (event) {&#13;
        event.preventDefault();&#13;
        var new_position_index = this.keyboardNavigationCurrentElementIndex - 1;&#13;
        if (new_position_index &gt;= this.keyboardNavigationElementsLen || new_position_index &lt; 0) {&#13;
            new_position_index = this.keyboardNavigationCurrentElementIndex&#13;
        }&#13;
        if (new_position_index === presenter.columnSizes['Left column']-1) {&#13;
            new_position_index = this.keyboardNavigationCurrentElementIndex;&#13;
        }&#13;
        this.markCurrentElement(new_position_index);&#13;
        readActivatedElementConnections();&#13;
    };&#13;
&#13;
    function indexesInTheSameColumn (index1, index2) {&#13;
        var leftColumnSize = presenter.columnSizes['Left column'];&#13;
&#13;
        return (index1 &lt; leftColumnSize &amp;&amp; index2 &lt; leftColumnSize) || (index1 &gt;= leftColumnSize &amp;&amp; index2 &gt;= leftColumnSize);&#13;
    }&#13;
&#13;
    ConnectionKeyboardController.prototype.nextElement = function () {&#13;
        var new_position_index = this.keyboardNavigationCurrentElementIndex + presenter.columnSizes['Left column'];&#13;
&#13;
        if (new_position_index &gt;= this.keyboardNavigationElementsLen) {&#13;
            new_position_index = this.keyboardNavigationElementsLen - 1;&#13;
        }&#13;
&#13;
        if (indexesInTheSameColumn(new_position_index, this.keyboardNavigationCurrentElementIndex)) {&#13;
            new_position_index = this.keyboardNavigationCurrentElementIndex;&#13;
        }&#13;
&#13;
        this.markCurrentElement(new_position_index);&#13;
        readActivatedElementConnections();&#13;
    };&#13;
&#13;
    ConnectionKeyboardController.prototype.previousElement = function () {&#13;
        var new_position_index = this.keyboardNavigationCurrentElementIndex - presenter.columnSizes['Right column'];&#13;
&#13;
        if (new_position_index &lt; 0) {&#13;
            new_position_index = 0;&#13;
        }&#13;
&#13;
        if (indexesInTheSameColumn(new_position_index, this.keyboardNavigationCurrentElementIndex)) {&#13;
            new_position_index = this.keyboardNavigationCurrentElementIndex;&#13;
        }&#13;
&#13;
        this.markCurrentElement(new_position_index);&#13;
        readActivatedElementConnections();&#13;
    };&#13;
&#13;
    ConnectionKeyboardController.prototype.enter = function (event) {&#13;
        if (event.shiftKey || event.ctrlKey) {&#13;
            Object.getPrototypeOf(ConnectionKeyboardController.prototype).escape.call(this);&#13;
        } else {&#13;
            Object.getPrototypeOf(ConnectionKeyboardController.prototype).enter.call(this);&#13;
            readActivatedElementConnections();&#13;
        }&#13;
    };&#13;
&#13;
    ConnectionKeyboardController.prototype.select = function (event) {&#13;
        event.preventDefault();&#13;
        if (presenter.getCurrentActivatedElement().hasClass('selected')) {&#13;
            speak([getTextVoiceObject(presenter.speechTexts.deselected)]);&#13;
        }&#13;
&#13;
        Object.getPrototypeOf(ConnectionKeyboardController.prototype).select.call(this);&#13;
&#13;
        if (presenter.getCurrentActivatedElement().hasClass('selected')) {&#13;
            speak([getTextVoiceObject(presenter.speechTexts.selected)]);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>