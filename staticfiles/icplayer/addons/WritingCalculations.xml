<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="WritingCalculations" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property isDefault="true" name="Value" nameLabel="WritingCalculations_property_value" type="text"/>
        <property name="Signs" nameLabel="WritingCalculations_property_signs" type="list">
            <property name="Addition" nameLabel="WritingCalculations_property_addition" type="string"/>
            <property name="Subtraction" nameLabel="WritingCalculations_property_subtraction" type="string"/>
            <property name="Division" nameLabel="WritingCalculations_property_division" type="string"/>
            <property name="Multiplication" nameLabel="WritingCalculations_property_multiplication" type="string"/>
            <property name="Equals" nameLabel="WritingCalculations_property_equals" type="string"/>
        </property>
        <property displayName="Styles" name="Styles" nameLabel="WritingCalculations_property_styles" type="list">
            <property name="Column" nameLabel="WritingCalculations_property_column" type="string"/>
            <property name="Row" nameLabel="WritingCalculations_property_row" type="string"/>
            <property name="Class" nameLabel="WritingCalculations_property_class" type="string"/>
            <property name="Style" nameLabel="WritingCalculations_property_style" type="string"/>
        </property>
        <property displayName="Commutativity" name="Commutativity" nameLabel="WritingCalculations_property_commutativity" type="boolean"/>
        <property displayName="Is not activity" name="Is not activity" nameLabel="WritingCalculations_property_is_not_activity" type="boolean"/>
        <property displayName="Enable more digits in gap" name="Multisigns" nameLabel="WritingCalculations_property_is_not_activity" type="boolean"/>
    </model>
<css>.wrapper-cell, .writing-calculations-input {&#13;
    float: left;&#13;
    width: 50px;&#13;
    height: 25px;&#13;
    line-height: 25px;&#13;
    padding: 0;&#13;
    text-align: center;&#13;
    font-size: 12px;&#13;
    margin: 1px 0;&#13;
}&#13;
&#13;
.writing-calculations-input {&#13;
    width: 25px;&#13;
    float: none;&#13;
    height: 23px;&#13;
    text-align: center !important;&#13;
}&#13;
&#13;
.wrapper-row {&#13;
    float: left;&#13;
}&#13;
&#13;
.writing-calculations-input.incorrect {&#13;
    border: 1px solid red !important;&#13;
    background-color: #faa !important;&#13;
}&#13;
&#13;
.writing-calculations-input.correct {&#13;
    border: 1px solid green !important;&#13;
    background-color: #afa !important;&#13;
}&#13;
&#13;
.wrapper-line {&#13;
    float: left;&#13;
    width: 50px;&#13;
}&#13;
&#13;
.container-line {&#13;
    border-bottom: 1px solid #111;&#13;
    height: 5px;&#13;
}&#13;
&#13;
.wrapper-empty-space {&#13;
    float: left;&#13;
    height: 1px;&#13;
    width: 50px;&#13;
}&#13;
&#13;
.wrapper-dot {&#13;
    float: left;&#13;
    width: 0px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.container-dot {&#13;
    position: absolute;&#13;
    left: -4px;&#13;
    top: 4px;&#13;
}&#13;
&#13;
.wrapper-cell {&#13;
    min-height: 3px;&#13;
}&#13;
&#13;
.wrong {&#13;
    border: 1px solid #ff1111;&#13;
}&#13;
&#13;
.correct {&#13;
    border: 1px solid #00bb00;&#13;
}&#13;
</css><view>&lt;div id="writing-calculations-wrapper"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div id="writing-calculations-wrapper"&gt;&lt;/div&gt;&#13;
</preview><presenter>function AddonWritingCalculations_create() {&#13;
    var presenter = function () {};&#13;
&#13;
    presenter.$view = null;&#13;
    presenter.model = null;&#13;
    presenter.correctAnswersList = [];&#13;
    presenter.array = [];&#13;
    presenter.playerController = null;&#13;
    presenter.answers = [];&#13;
    presenter.isCommutativity;&#13;
    var eventBus;&#13;
&#13;
    presenter.ELEMENT_TYPE = {&#13;
        "NUMBER" : 1,&#13;
        "EMPTY_BOX" : 2,&#13;
        "SYMBOL" : 3,&#13;
        "EMPTY_SPACE" : 4,&#13;
        "LINE" : 5,&#13;
        "DOT" : 6&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function (model) {&#13;
        return presenter.upgradeSigns(model);&#13;
    };&#13;
&#13;
    presenter.upgradeSigns = function (model) {&#13;
        if ('Signs' in model) return model;&#13;
&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
        upgradedModel['Signs'] = [{&#13;
            'Addition' : '',&#13;
            'Subtraction' : '',&#13;
            'Division' : '',&#13;
            'Multiplication' : '',&#13;
            'Equals' : ''&#13;
        }];&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        "OUT_OF_RANGE" : "Number between brackets must be from 0 to 9"&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenterLogic(view, model);&#13;
        presenter.setVisibility(presenter.isVisible);&#13;
        eventBus = presenter.playerController.getEventBus();&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenterLogic(view, model);&#13;
        presenter.setVisibility(true);&#13;
    };&#13;
&#13;
    function presenterLogic(view, model) {&#13;
        presenter.array = presenter.convertStringToArray(model.Value);&#13;
        presenter.isCommutativity = ModelValidationUtils.validateBoolean(model['Commutativity']) || false;&#13;
        presenter.$view = $(view);&#13;
        presenter.model = presenter.upgradeModel(model);&#13;
        presenter.signs = presenter.readSigns( presenter.model['Signs'][0] );&#13;
        presenter.isNotActivity = ModelValidationUtils.validateBoolean(model['Is not activity']);&#13;
        presenter.multisigns = ModelValidationUtils.validateBoolean(model['Multisigns']);&#13;
        presenter.isVisible = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.isVisibleByDefault = ModelValidationUtils.validateBoolean(model['Is Visible']);&#13;
        presenter.createView(presenter.array);&#13;
        presenter.bindValueChangeEvent();&#13;
        presenter.setContainerWidth();&#13;
        presenter.addAdditionalStyles();&#13;
    }&#13;
&#13;
    presenter.readSigns = function( signs ) {&#13;
        var properSigns = {};&#13;
        for ( var key in signs ) {&#13;
            if ( signs.hasOwnProperty(key) ) {&#13;
                if ( signs[key] == '' || signs[key] == '&lt;br&gt;' ) {&#13;
                    properSigns[key] = presenter.useDefaultSign( key );&#13;
                } else {&#13;
                    properSigns[key] = signs[key];&#13;
                }&#13;
            }&#13;
        }&#13;
        return properSigns;&#13;
    };&#13;
&#13;
    presenter.useDefaultSign = function( key ) {&#13;
        if (key == 'Addition') {&#13;
            return "\\(+\\)";&#13;
        }&#13;
        if (key == 'Subtraction') {&#13;
            return "\\(-\\)";&#13;
        }&#13;
        if (key == 'Division') {&#13;
            return "\\(\\big)\\)";&#13;
        }&#13;
        if (key == 'Multiplication') {&#13;
            return "\\(\\times\\)";&#13;
        }&#13;
        if (key == 'Equals') {&#13;
            return "\\(=\\)";&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addAdditionalStyleToElement = function (row, column, style, clazz) {&#13;
        var rowElement = presenter.$view.find('.row-' + row),&#13;
            cellElement = rowElement.find('.cell-' + column);&#13;
&#13;
        cellElement.addClass(clazz);&#13;
        cellElement.attr('style', style);&#13;
    };&#13;
&#13;
    presenter.addAdditionalStyles = function() {&#13;
        if (!presenter.model['Styles']) {&#13;
            return;&#13;
        }&#13;
        $.each(presenter.model['Styles'], function() {&#13;
            var columns = this['Column'],&#13;
                rows = this['Row'];&#13;
&#13;
            if (rows) {&#13;
                rows = rows.split(',');&#13;
            }&#13;
&#13;
            if (columns) {&#13;
                columns = columns.split(',');&#13;
            }&#13;
&#13;
            for (var row = 0; row &lt; rows.length; row++) {&#13;
                for (var column = 0; column &lt; columns.length; column++) {&#13;
                    presenter.addAdditionalStyleToElement(rows[row], columns[column], this['Style'], this['Class']);&#13;
                }&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setContainerWidth = function() {&#13;
        var viewWrapper = this.$view.find("#writing-calculations-wrapper");&#13;
        var width = $(viewWrapper).children().outerWidth();&#13;
        $(viewWrapper).css('width', width);&#13;
    };&#13;
&#13;
    presenter.bindValueChangeEvent = function() {&#13;
        var $input = presenter.$view.find(".writing-calculations-input");&#13;
        $input.on('click', function(event) {&#13;
            event.stopPropagation();&#13;
        });&#13;
&#13;
        $input.on("change", function(event) {&#13;
            event.stopPropagation();&#13;
&#13;
            var value = event.target.value;&#13;
            var rowIndex = $(event.target).attr("row");&#13;
            var cellIndex = $(event.target).attr("cell");&#13;
            var item = rowIndex + "-" + cellIndex;&#13;
            var isCorrect = 0;&#13;
            var answer = presenter.createAnswer(rowIndex, cellIndex, value);&#13;
            if(presenter.isCorrect(answer)) {&#13;
                isCorrect = 1;&#13;
            }&#13;
&#13;
            if (presenter.isCommutativity &amp;&amp; presenter.isAllFilled()) {&#13;
                presenter.triggerValueChangeEvent("", "all", presenter.isAllCorrectlyFilled() ? 1 : 0);&#13;
            }&#13;
&#13;
            if (!presenter.isCommutativity) {&#13;
                presenter.triggerValueChangeEvent(value, item, isCorrect);&#13;
            }&#13;
&#13;
            if(!presenter.isCommutativity &amp;&amp; presenter.allAnswersCorrect()) {&#13;
                presenter.triggerValueChangeEvent("", "all", "");&#13;
            }&#13;
        });&#13;
    };&#13;
&#13;
    presenter.createView = function(convertedArray) {&#13;
        var viewWrapper = this.$view.find("#writing-calculations-wrapper"), columnItemIndex = 0;&#13;
        for(var rowIndex = 0; rowIndex &lt; convertedArray.length; rowIndex++) {&#13;
            var rowWrapper = this.createRowWrapper(rowIndex),&#13;
                cellIndex = 0;&#13;
&#13;
            columnItemIndex = 0;&#13;
            for(var index = 0; index &lt; convertedArray[rowIndex].length; index++) {&#13;
                var element, row = convertedArray[rowIndex],&#13;
                    isGap = row[index] == '[';&#13;
                var correctAnswer = {};&#13;
                if( isGap ) {&#13;
                    element = row.slice(index, index + 3);&#13;
                    presenter.verifyElementRange(element);&#13;
                    correctAnswer = {&#13;
                        rowIndex: rowIndex + 1,&#13;
                        cellIndex: ++columnItemIndex,&#13;
                        value: this.getValueOfElement(element)&#13;
                    };&#13;
&#13;
                    if (presenter.answers[rowIndex] === undefined) {&#13;
                        presenter.answers[rowIndex] = [];&#13;
                    }&#13;
&#13;
                    presenter.answers[rowIndex].push(correctAnswer.value);&#13;
&#13;
                    this.correctAnswersList.push(correctAnswer);&#13;
                    index += 2;&#13;
                } else {&#13;
                    element = row[index];&#13;
                    if(presenter.isCommutativity){&#13;
                        correctAnswer = {&#13;
                            rowIndex: rowIndex + 1,&#13;
                            cellIndex: ++columnItemIndex,&#13;
                            value: this.getValueOfElement(element)&#13;
                        };&#13;
                    }&#13;
                    if (!isNaN(parseInt(element, 10))) {&#13;
                        if (presenter.answers[rowIndex] === undefined) {&#13;
                            presenter.answers[rowIndex] = [];&#13;
                        }&#13;
&#13;
                        presenter.answers[rowIndex].push(element);&#13;
                    }&#13;
                }&#13;
                var elementType = this.getElementType(element);&#13;
&#13;
                var createdElement = this.createElement(element, elementType);&#13;
                if (elementType != presenter.ELEMENT_TYPE.LINE) {&#13;
                    addCellClass(createdElement, cellIndex);&#13;
                }&#13;
&#13;
                this.transformElement(createdElement, element, elementType);&#13;
&#13;
                if ( elementType == this.ELEMENT_TYPE.EMPTY_BOX || elementType == this.ELEMENT_TYPE.NUMBER) {&#13;
                    this.addPosition(createdElement, correctAnswer);&#13;
                }&#13;
&#13;
                rowWrapper.append(createdElement);&#13;
&#13;
                if (elementType != this.ELEMENT_TYPE.DOT) {&#13;
                    cellIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            viewWrapper.append(rowWrapper);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    function addCellClass(createdElement, cellIndex) {&#13;
        $(createdElement).addClass('cell-' + (cellIndex + 1));&#13;
    }&#13;
&#13;
    presenter.verifyElementRange = function(element) {&#13;
        if( element[2] != ']' ) {&#13;
            return this.$view.html(this.ERROR_MESSAGES.OUT_OF_RANGE);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.addPosition = function(element, position) {&#13;
        var input = $(element).find(".writing-calculations-input, .container-number")[0];&#13;
&#13;
        $(input).attr({&#13;
            "row" : position.rowIndex,&#13;
            "cell" : position.cellIndex&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getValueOfElement = function(element) {&#13;
        if( !this.isEmptyBox(element) ) {&#13;
            return;&#13;
        }&#13;
        var pattern = /[\d.,]/g;&#13;
        var value = element.match(pattern)[0];&#13;
        if( this.isInteger(value) ) {&#13;
            value = parseInt(value, 10);&#13;
        }&#13;
        return value;&#13;
    };&#13;
&#13;
    presenter.createRowWrapper = function(index) {&#13;
        var rowWrapper = $("&lt;div&gt;&lt;/div&gt;");&#13;
        rowWrapper.addClass("wrapper-row row-" + (index + 1));&#13;
        return rowWrapper;&#13;
    };&#13;
&#13;
    presenter.createElement = function(value, type) {&#13;
        var createdElement;&#13;
        switch(type) {&#13;
            case this.ELEMENT_TYPE.NUMBER:&#13;
                createdElement = this.createWrapperAndContainer("number");&#13;
                break;&#13;
            case this.ELEMENT_TYPE.SYMBOL:&#13;
                createdElement = this.createWrapperAndContainer("symbol");&#13;
                break;&#13;
            case this.ELEMENT_TYPE.EMPTY_SPACE:&#13;
                createdElement = this.createWrapperAndContainer("emptySpace", 'wrapper-empty-space');&#13;
                break;&#13;
            case this.ELEMENT_TYPE.EMPTY_BOX:&#13;
                createdElement = this.createWrapperAndContainer("emptyBox");&#13;
                break;&#13;
            case this.ELEMENT_TYPE.LINE:&#13;
                createdElement = this.createWrapperAndContainer("line", 'wrapper-line');&#13;
                break;&#13;
            case this.ELEMENT_TYPE.DOT:&#13;
                createdElement = this.createWrapperAndContainer("dot", 'wrapper-dot');&#13;
                break;&#13;
        }&#13;
&#13;
        return createdElement;&#13;
    };&#13;
&#13;
    presenter.createWrapperAndContainer = function(cssClass, wrapperClass) {&#13;
        if (!wrapperClass || wrapperClass === undefined) {&#13;
            wrapperClass = "wrapper-cell";&#13;
        }&#13;
        var wrapper = $("&lt;div&gt;&lt;/div&gt;");&#13;
        wrapper.addClass(wrapperClass);&#13;
        var container = $("&lt;div&gt;&lt;/div&gt;");&#13;
        container.addClass("container-" + cssClass);&#13;
        wrapper.append(container);&#13;
        return wrapper;&#13;
    };&#13;
&#13;
    presenter.transformElement = function(element, value, type) {&#13;
        var container = $(element).find("[class*=container]");&#13;
        switch(type) {&#13;
            case this.ELEMENT_TYPE.EMPTY_SPACE:&#13;
                break;&#13;
            case this.ELEMENT_TYPE.EMPTY_BOX:&#13;
                var input = $("&lt;input type='text'&gt;");&#13;
                input.addClass("writing-calculations-input");&#13;
                if(!presenter.multisigns){&#13;
                    input.attr("maxlength", 1);&#13;
                }&#13;
                container.append(input);&#13;
                break;&#13;
            case this.ELEMENT_TYPE.LINE:&#13;
                break;&#13;
            case this.ELEMENT_TYPE.SYMBOL:&#13;
                container.html(this.convertLaTeX(value));&#13;
                break;&#13;
            case this.ELEMENT_TYPE.DOT:&#13;
                container.html(value);&#13;
                break;&#13;
            default:&#13;
                container.html(value);&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.convertLaTeX = function (value) {&#13;
        if (value === "*") {&#13;
            return presenter.signs['Multiplication'];&#13;
        }&#13;
        else if (value === ":" || value === ")") {&#13;
            return presenter.signs['Division'];&#13;
        }&#13;
        else if (value === "+") {&#13;
            return presenter.signs['Addition'];&#13;
        } else if (value === "-") {&#13;
            return presenter.signs['Subtraction'];&#13;
        } else if (value === "#") {&#13;
            return presenter.signs['Equals'];&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getElementType = function(element) {&#13;
        if( this.isInteger(element) ) return this.ELEMENT_TYPE.NUMBER;&#13;
        if( this.isSymbol(element) ) return this.ELEMENT_TYPE.SYMBOL;&#13;
        if( this.isEmptySpace(element) ) return this.ELEMENT_TYPE.EMPTY_SPACE;&#13;
        if( this.isEmptyBox(element) ) return this.ELEMENT_TYPE.EMPTY_BOX;&#13;
        if( this.isLine(element) ) return this.ELEMENT_TYPE.LINE;&#13;
        if( this.isDot(element)) return this.ELEMENT_TYPE.DOT;&#13;
    };&#13;
&#13;
    presenter.isDot = function(element) {&#13;
        return element == "." || element == ",";&#13;
    };&#13;
&#13;
    presenter.isEmptyBox = function(element) {&#13;
        var pattern = /\[[\d.,]?\]/g; // matches: '[number]' or '[.]' or '[,]'&#13;
        return pattern.test(element);&#13;
    };&#13;
&#13;
    presenter.isEmptySpace = function(element) {&#13;
        return element == "_";&#13;
    };&#13;
&#13;
    presenter.isSymbol = function(element) {&#13;
        var pattern = /[#+\-*:\)]/g; // matches: '#', '+', '-', ':', ')' and '*'&#13;
        return pattern.test(element);&#13;
    };&#13;
&#13;
    presenter.isInteger = function(element) {&#13;
        return element % 1 === 0 &amp;&amp; element !== null &amp;&amp; /\d/.test(element);&#13;
    };&#13;
&#13;
    presenter.isLine = function(element) {&#13;
        return element == "=";&#13;
    };&#13;
&#13;
    presenter.convertStringToArray = function(stringToConvert) {&#13;
        return stringToConvert.split(/[\n\r]+/);&#13;
    };&#13;
&#13;
    presenter.isCorrect = function(answer) {&#13;
        var result = false;&#13;
        var correctAnswers = this.correctAnswersList;&#13;
        for(var i = 0; i &lt; correctAnswers.length; i++) {&#13;
            if( this.isEqual(answer, correctAnswers[i]) ) {&#13;
                result = true;&#13;
            }&#13;
        }&#13;
        return result;&#13;
    };&#13;
&#13;
    presenter.allAnswersCorrect = function() {&#13;
        var maxScore = presenter.getPoints("all");&#13;
        var score = presenter.getPoints("correct");&#13;
        var errorCount = presenter.getPoints("incorrect");&#13;
&#13;
        return maxScore === score &amp;&amp; errorCount === 0;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.isAllOK = function () {&#13;
        var maxScore = presenter.getPoints("all"),&#13;
            score = presenter.getPoints("correct"),&#13;
            errorCount = presenter.getPoints("incorrect");&#13;
&#13;
        return maxScore === score &amp;&amp; errorCount === 0;&#13;
    };&#13;
&#13;
    presenter.isEqual = function(answer, correctAnswer) {&#13;
        return answer.value === correctAnswer.value &amp;&amp; answer.rowIndex === correctAnswer.rowIndex &amp;&amp; answer.cellIndex === correctAnswer.cellIndex;&#13;
    };&#13;
&#13;
    presenter.getInputs = function() {&#13;
        return $(this.$view).find(".writing-calculations-input");&#13;
    };&#13;
&#13;
    presenter.isAllFilled = function() {&#13;
        var inputs = presenter.getInputs();&#13;
&#13;
        for (var i = 0; i &lt; inputs.length; i++) {&#13;
            if ($(inputs[i]).val().length == 0) return false;&#13;
        }&#13;
&#13;
        return true;&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
&#13;
        if (!presenter.isCommutativity) {&#13;
            $.each(inputs, function(){&#13;
                var answer = presenter.createAnswer($(this).attr("row"), $(this).attr("cell"), $(this).val());&#13;
&#13;
                if (ModelValidationUtils.isStringEmpty($(this).val())) {&#13;
                    presenter.markEmpty($(this));&#13;
                } else if( presenter.isCorrect(answer) ) {&#13;
                    presenter.markCorrect($(this));&#13;
                } else {&#13;
                    presenter.markIncorrect($(this));&#13;
                }&#13;
            });&#13;
        } else if (presenter.isAllFilled()) {&#13;
            var isCorrect = presenter.isAllCorrectlyFilled();&#13;
&#13;
            if (isCorrect) {&#13;
                presenter.$view.addClass('correct');&#13;
            } else {&#13;
                presenter.$view.addClass('wrong');&#13;
            }&#13;
&#13;
            disableAllInputs(inputs);&#13;
        } else {&#13;
            disableAllInputs(inputs);&#13;
        }&#13;
    };&#13;
&#13;
    function disableAllInputs(inputs) {&#13;
        $(inputs).attr("disabled", "disabled");&#13;
    }&#13;
&#13;
    presenter.compareAnswers = function(correctAnswers, userAnswers) {&#13;
        var answers = $.extend(true, [], userAnswers);&#13;
&#13;
        correctAnswers = $.extend(true, [], correctAnswers);&#13;
&#13;
        var userResult = answers.pop(),&#13;
            declaredResult = correctAnswers.pop();&#13;
&#13;
        var cleanedAnswers = [],&#13;
            cleanedCorrectAnswers = [],&#13;
            logicalFoundArray = [],&#13;
            found = false,&#13;
            result = true,&#13;
            i;&#13;
&#13;
        for (i = 0; i &lt;= answers.length; i++) {&#13;
            if (answers[i] !== undefined) {&#13;
                cleanedAnswers.push(answers[i]);&#13;
            }&#13;
&#13;
            if (correctAnswers[i] !== undefined) {&#13;
                cleanedCorrectAnswers.push(correctAnswers[i]);&#13;
            }&#13;
        }&#13;
&#13;
        for (i = 0; i &lt; cleanedCorrectAnswers.length; i++) {&#13;
            found = presenter.wasRowFound(cleanedCorrectAnswers[i], cleanedAnswers);&#13;
            logicalFoundArray.push(found);&#13;
        }&#13;
&#13;
        jQuery.each(logicalFoundArray, function (_, element) {&#13;
            if (!element) {&#13;
                result = false;&#13;
                return false; // jQuery.each break statement&#13;
            }&#13;
        });&#13;
&#13;
        result = result &amp;&amp; presenter.compareResults(userResult, declaredResult);&#13;
&#13;
        return result;&#13;
    };&#13;
&#13;
&#13;
    presenter.compareResults = function(userResult, declaredResult) {&#13;
        return userResult.toString() === declaredResult.toString();&#13;
    };&#13;
&#13;
    /*&#13;
     This method get one of correctAnswers row&#13;
     and comparing it with each givenAnswers rows.&#13;
&#13;
     Takes: correctAnswers as all correct values in one row&#13;
     and givenAnswers as answers in all rows given by user.&#13;
&#13;
     Returns: boolean value if declared row in correctAnswers&#13;
     was found in givenAnswers.&#13;
     */&#13;
    presenter.wasRowFound = function(correctAnswers, givenAnswers) {&#13;
        var wasRowFound = false;&#13;
&#13;
        for (var j = 0; j &lt; givenAnswers.length; j++) { //answers given by user&#13;
            if (givenAnswers[j] !== undefined &amp;&amp; correctAnswers.toString() === givenAnswers[j].toString()) {&#13;
                delete givenAnswers[j];&#13;
                wasRowFound = true;&#13;
                break;&#13;
            } else {&#13;
                wasRowFound = false;&#13;
            }&#13;
        }&#13;
&#13;
        return wasRowFound;&#13;
    };&#13;
&#13;
    presenter.getAllAnswers = function(elements) {&#13;
        var answers = [];&#13;
&#13;
        $.each(elements, function(){&#13;
            if ($(this).hasClass('writing-calculations-input')) {&#13;
                if (answers[$(this).attr("row") - 1] === undefined) {&#13;
                    answers[$(this).attr("row") - 1] = [$(this).val()];&#13;
                } else {&#13;
                    answers[$(this).attr("row") - 1].push($(this).val());&#13;
                }&#13;
            } else if ($(this).hasClass('container-number')) {&#13;
                if (answers[$(this).attr("row") - 1] === undefined) {&#13;
                    answers[$(this).attr("row") - 1] = [$(this).html()];&#13;
                } else {&#13;
                    answers[$(this).attr("row") - 1].push($(this).html());&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        return answers;&#13;
    };&#13;
&#13;
    presenter.isAllCorrectlyFilled = function() {&#13;
        var elements = $(this.$view).find('.container-number, .writing-calculations-input');&#13;
        var answers = presenter.getAllAnswers(elements);&#13;
&#13;
        return presenter.compareAnswers(presenter.answers, answers);&#13;
    };&#13;
&#13;
    presenter.createAnswer = function(row, cell, value) {&#13;
        var answer = {&#13;
            rowIndex: parseInt(row, 10),&#13;
            cellIndex: parseInt(cell, 10)&#13;
        };&#13;
&#13;
        if( this.isInteger(value) ) {&#13;
            value = parseInt(value, 10);&#13;
        }&#13;
&#13;
        answer.value = value;&#13;
        return answer;&#13;
    };&#13;
&#13;
    presenter.markIncorrect = function(element) {&#13;
        presenter.markAs(element, "incorrect");&#13;
    };&#13;
&#13;
    presenter.markCorrect = function(element) {&#13;
        presenter.markAs(element, "correct");&#13;
    };&#13;
&#13;
    presenter.markEmpty = function(element) {&#13;
        presenter.markAs(element, "empty");&#13;
    };&#13;
&#13;
    presenter.markAs = function(element, className) {&#13;
        $(element).addClass(className);&#13;
        $(element).attr("disabled", "disabled");&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        this.clean(true, false);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        this.clean(true, true);&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        if(typeof(presenter.userAnswers) !== "undefined") {&#13;
            $.each(inputs, function(index){&#13;
                presenter.userAnswers[index] = '';&#13;
            });&#13;
        }&#13;
&#13;
        presenter.setVisibility(presenter.isVisibleByDefault);&#13;
        presenter.isVisible = presenter.isVisibleByDefault;&#13;
    };&#13;
&#13;
    presenter.clean = function(removeMarks, removeValues) {&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        $.each(inputs, function(){&#13;
            if(removeMarks) {&#13;
                presenter.removeMark($(this));&#13;
            }&#13;
            if(removeValues) {&#13;
                presenter.removeValue($(this));&#13;
            }&#13;
        });&#13;
        if (presenter.$view.hasClass('wrong')) {&#13;
            presenter.$view.removeClass('wrong');&#13;
        } else if (presenter.$view.hasClass('correct')) {&#13;
            presenter.$view.removeClass('correct');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.removeMark = function(element) {&#13;
        $(element).removeClass("incorrect correct empty");&#13;
        $(element).removeAttr("disabled");&#13;
    };&#13;
&#13;
    presenter.removeValue = function(element) {&#13;
        $(element).val("");&#13;
    };&#13;
&#13;
&#13;
    presenter.getInputsData = function() {&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        var inputsData = {&#13;
            values : [],&#13;
            correctAnswersCount : 0,&#13;
            incorrectAnswersCount : 0&#13;
        };&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        $.each(inputs, function () {&#13;
            var value = $(this).val();&#13;
            if (presenter.isInteger(value)) {&#13;
                value = parseInt(value, 10);&#13;
            }&#13;
            inputsData.values.push(value);&#13;
&#13;
            if (value === undefined || value === "") return true; // jQuery.each continue&#13;
&#13;
            var answer = presenter.createAnswer($(this).attr("row"), $(this).attr("cell"), $(this).val());&#13;
            if( presenter.isCorrect(answer) ) {&#13;
                inputsData.correctAnswersCount++;&#13;
            } else {&#13;
                inputsData.incorrectAnswersCount++;&#13;
            }&#13;
        });&#13;
        return inputsData;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return JSON.stringify({&#13;
            "inputsData" : this.getInputsData(),&#13;
            "isVisible" : presenter.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function(stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return;&#13;
&#13;
        var state = JSON.parse(stateString);&#13;
        if (state.inputsData) {&#13;
            var inputs = $(this.$view).find(".writing-calculations-input");&#13;
            var inputsData = state.inputsData;&#13;
            $.each(inputs, function(index){&#13;
                $(this).val(inputsData.values[index]);&#13;
            });&#13;
        }&#13;
&#13;
        if(state.isVisible != undefined) {&#13;
            presenter.isVisible = state.isVisible;&#13;
            presenter.setVisibility(presenter.isVisible);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentScore;&#13;
        }&#13;
        return this.getPoints("correct");&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentMaxScore;&#13;
        }&#13;
        return this.getPoints("all");&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if(presenter.isNotActivity){&#13;
            return 0;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            return presenter.currentErrorCount;&#13;
        }&#13;
        return this.getPoints("incorrect");&#13;
    };&#13;
&#13;
    presenter.getPoints = function(type) {&#13;
        var inputsData = this.getInputsData();&#13;
&#13;
        if (presenter.isCommutativity) {&#13;
            switch (type) {&#13;
                case 'correct':&#13;
                    return presenter.isAllCorrectlyFilled() ? 1 : 0;&#13;
                case 'incorrect':&#13;
                    if (presenter.isAllFilled()) {&#13;
                        return presenter.isAllCorrectlyFilled() ? 0 : 1;&#13;
                    } else {&#13;
                        return 0;&#13;
                    }&#13;
                case 'all':&#13;
                    return 1;&#13;
                default:&#13;
                    return 0;&#13;
            }&#13;
        } else {&#13;
            switch (type) {&#13;
                case 'correct':&#13;
                    return inputsData.correctAnswersCount;&#13;
                case 'incorrect':&#13;
                    return inputsData.incorrectAnswersCount;&#13;
                case 'all':&#13;
                    return inputsData.values.length;&#13;
                default:&#13;
                    return 0;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.createEventData = function(value, item, isCorrect) {&#13;
        return {&#13;
            source : this.model.ID,&#13;
            item : "" + item,&#13;
            value : "" + value,&#13;
            score : "" + isCorrect&#13;
        };&#13;
    };&#13;
&#13;
    presenter.triggerValueChangeEvent = function(value, item, isCorrect) {&#13;
        var eventData = this.createEventData(value, item, isCorrect);&#13;
        if (this.playerController !== null) {&#13;
            this.playerController.getEventBus().sendEvent('ValueChanged', eventData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        this.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if(presenter.isNotActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.userAnswers = [];&#13;
        presenter.currentScore = presenter.getScore();&#13;
        presenter.currentErrorCount = presenter.getErrorCount();&#13;
        presenter.currentMaxScore = presenter.getMaxScore();&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.clean(true,false);&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        var correctAnswers = this.correctAnswersList;&#13;
&#13;
        $.each(inputs, function(index){&#13;
            $(this).addClass('writing-calculations_show-answers');&#13;
            $(this).attr("disabled", true);&#13;
            presenter.userAnswers.push($(this).val());&#13;
            $(this).val(correctAnswers[index].value);&#13;
        });&#13;
    };&#13;
&#13;
    presenter.hideAnswers = function () {&#13;
        if(presenter.isNotActivity){&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isShowAnswersActive = false;&#13;
        var inputs = $(this.$view).find(".writing-calculations-input");&#13;
        $.each(inputs, function(index){&#13;
            $(this).val(presenter.userAnswers[index]);&#13;
            $(this).removeClass('writing-calculations_show-answers');&#13;
            $(this).attr("disabled", false);&#13;
        });&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>