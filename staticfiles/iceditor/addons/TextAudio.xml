<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="TextAudio" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
        <property displayName="Controls" name="controls" nameLabel="TextAudio_property_controls" type="{None, Browser, Custom}"/>
        <property displayName="Display time" name="displayTime" nameLabel="TextAudio_property_display_time" type="boolean"/>
        <property displayName="Enable loop" name="enableLoop" nameLabel="TextAudio_property_enable_loop" type="boolean"/>

        <property isDefault="true" name="Slides" nameLabel="TextAudio_property_slides" type="list">
            <property isLocalized="true" name="Text" nameLabel="TextAudio_property_text" type="html"/>
            <property isLocalized="true" name="Times" nameLabel="TextAudio_property_times" type="text"/>
            <property displayName="Position and Dimentions" isLocalized="true" name="positionAndDimentions" nameLabel="TextAudio_property_position_and_dimentions" type="text"/>
        </property>
        <property name="mp3" nameLabel="TextAudio_property_mp3" type="audio"/>
        <property name="ogg" nameLabel="TextAudio_property_ogg" type="audio"/>

        <property displayName="On Text Click Behavior" name="clickAction" nameLabel="TextAudio_property_click_action" type="{Play from the moment, Play the interval, Play the interval from vocabulary file}"/>
        <property displayName="Vocabulary mp3" name="vocabulary_mp3" nameLabel="TextAudio_property_vocabulary_mp3" type="audio"/>
        <property displayName="Vocabulary ogg" name="vocabulary_ogg" nameLabel="TextAudio_property_vocabulary_ogg" type="audio"/>
        <property displayName="Vocabulary intervals" isLocalized="true" name="vocabulary_intervals" nameLabel="TextAudio_property_vocabulary_intervals" type="text"/>

        <property displayName="On end" name="onEnd" nameLabel="TextAudio_property_vocabulary_on_end" type="event"/>
        <property displayName="Is Click Disabled" name="isClickDisabled" nameLabel="TextAudio_property_is_click_disabled" type="boolean"/>
        <property displayName="Show Slides" name="showSlides" nameLabel="TextAudio_property_show_slides" type="{Show current slide, Show all slides}"/>
    </model>
<css>.wrapper-addon-textaudio {&#13;
    height: 30px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.wrapper-addon-textaudio audio {&#13;
    bottom: 0;&#13;
    position: absolute;&#13;
}&#13;
&#13;
.wrapper-addon-textaudio .textaudio-text {&#13;
    width: 100%;&#13;
}&#13;
&#13;
.wrapper-addon-textaudio  span {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.wrapper-addon-textaudio span.active {&#13;
    color: #cc0000;&#13;
}&#13;
&#13;
.text-audio-loading-area {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    display: none;&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    background: url("/media/images/loading.gif") no-repeat center;&#13;
    background-size: 30px;&#13;
}&#13;
&#13;
&#13;
.textaudioplayer {&#13;
    top: -40px;&#13;
    background-color: #EBEFF0;&#13;
    border-radius: 20px;&#13;
    width: 340px;&#13;
    height: 40px;&#13;
    display: table;&#13;
    padding-right: 2px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.textaudio-play-pause-btn {&#13;
    width: 38px;&#13;
    height: 40px;&#13;
    float:left;&#13;
    border: solid 1px #444;&#13;
    border-radius: 30px;&#13;
    background-position: center center;&#13;
    background-repeat: no-repeat;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-play-btn {&#13;
    background-image: url('resources/audio-play-btn.png');&#13;
}&#13;
&#13;
.textaudio-pause-btn {&#13;
    background-image: url('resources/audio-pause-btn.png');&#13;
}&#13;
&#13;
.textaudio-stop-btn {&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-stop-btn.png') no-repeat center center;&#13;
    float:left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-volume-btn {&#13;
    width: 40px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-volume-btn.png') no-repeat center center;&#13;
    float:left;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-volume0 {&#13;
    background-image: url('resources/volume-0.png');&#13;
}&#13;
&#13;
.textaudio-volume1 {&#13;
    background-image: url('resources/volume-1.png');&#13;
}&#13;
&#13;
.textaudio-volume2 {&#13;
    background-image: url('resources/volume-2.png');&#13;
}&#13;
&#13;
.textaudio-volume3 {&#13;
    background-image: url('resources/volume-3.png');&#13;
}&#13;
&#13;
.textaudio-player-time {&#13;
    vertical-align: middle;&#13;
    display: table-cell;&#13;
    height: 40px;&#13;
    line-height: 16px;&#13;
    padding-right: 10px;&#13;
    font-size: 14px;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
    color: grey;&#13;
}&#13;
&#13;
.textaudio-progress-bar {&#13;
    -ms-touch-action: none;&#13;
    touch-action: none;&#13;
    width: 100px;&#13;
    float:left;&#13;
    padding-left: 0px;&#13;
    margin-top: 15px;&#13;
    margin-left: 5px;&#13;
    height: 10px;&#13;
    background-color: #FFF;&#13;
    border-radius: 5px;&#13;
    position: relative;&#13;
}&#13;
&#13;
.textaudio-slider-btn {&#13;
    width: 20px;&#13;
    height: 20px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat;&#13;
    float:left;&#13;
    margin-left: -10px;&#13;
    margin-top: -5px;&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-bar {&#13;
    background-color: #BDC2C7;&#13;
    float: left;&#13;
    height: 10px;&#13;
    margin-left: 0px;&#13;
    border-bottom-left-radius: 5px;&#13;
    border-top-left-radius: 5px;&#13;
}&#13;
&#13;
.textaudio-volume-layer {&#13;
    width: 100px;&#13;
    height: 40px;&#13;
    position: absolute;&#13;
    right: 15px;&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.textaudio-volume-control-background {&#13;
    position: absolute;&#13;
    width: 100%;&#13;
    height: 50%;&#13;
    border-bottom: solid 1px #808080;&#13;
}&#13;
&#13;
.textaudio-volume-control {&#13;
    position: absolute;&#13;
    width: 20px;&#13;
    height: 40px;&#13;
    background: url('resources/audio-slider-btn.png') no-repeat center;&#13;
    margin-left: -10px;&#13;
}&#13;
</css><view>&lt;div class="wrapper-addon-textaudio"&gt;&#13;
    &lt;div class="textaudio-player"&gt;&lt;/div&gt;&#13;
    &lt;div class="textaudio-text slide-id-0"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
&lt;div class="text-audio-loading-area"&gt;&lt;/div&gt;&#13;
</view><preview>&lt;div class="wrapper-addon-textaudio"&gt;&#13;
    &lt;div class="textaudio-player"&gt;&lt;/div&gt;&#13;
    &lt;div class="textaudio-text slide-id-0"&gt;&lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>function AddonTextAudio_create() {&#13;
    var presenter = function() {};&#13;
&#13;
    presenter.originalFile = {};&#13;
    presenter.vocabularyFile = {};&#13;
    presenter.eventBus = null;&#13;
    presenter.currentTimeAlreadySent = null;&#13;
    presenter.hasBeenStarted = false;&#13;
    presenter.isPlaying = false;&#13;
    presenter.globalIntervalNumber = 0;&#13;
    presenter.isVocabularyAudioLoaded = false;&#13;
    presenter.isVocabularyPlaying = false;&#13;
    presenter.buzzAudio = [];&#13;
    presenter.audio = {};&#13;
    presenter.current_slide_data = {&#13;
        slide_id: -1,&#13;
        selection_id: -1&#13;
    };&#13;
    presenter.playerController = null;&#13;
    presenter.selectionId = undefined;&#13;
    presenter.playedByClick = false;&#13;
    presenter.addonID = null;&#13;
    presenter.fps = 10;&#13;
    presenter.previousSelectionId = -1;&#13;
    presenter.mouseData = {};&#13;
    presenter.slidesMade = false;&#13;
&#13;
    /**&#13;
     * play_interval_or_vocabulary - this option if for compatibility sake. If user had both&#13;
     * 'Individual fragment playback' and 'Vocabulary audio files playback' options selected the result was&#13;
     * different than can be now obtained by selecting one of the 'On Text Click Behavior' property option.&#13;
     */&#13;
    presenter.ALLOWED_CLICK_BEHAVIOUR = {&#13;
        play_from_the_moment: 'Play from the moment',&#13;
        play_interval: 'Play the interval',&#13;
        play_vocabulary_file: 'Play vocabulary audio file',&#13;
        play_vocabulary_interval: 'Play the interval from vocabulary file',&#13;
        play_interval_or_vocabulary: 'Play interval from base file or vocabulary audio file'&#13;
    };&#13;
&#13;
    presenter.ERROR_CODES = {&#13;
        'M01': 'This addon needs at least 1 audio file.',&#13;
        'M02': 'Number of texts in the slide should be the same as number of time entities',&#13;
        'M03': 'Incorrectly defined period of time',&#13;
        'M04': 'Entry ends before start',&#13;
        'M05': 'Duplicated text for second',&#13;
        'SAF01': 'Property Vocabulary audio files cannot be empty',&#13;
        'SAF02': 'Number of Vocabulary audio files and time items must be the same',&#13;
        'SAF03': 'All values in property Vocabulary audio files has to be filled',&#13;
        'VI01': 'At least one vocabulary audio file have to be set.',&#13;
        'VI02': 'Number of parts in Vocabulary intervals have to be equal to sum of times periods defined in Slides property',&#13;
        'VI03': 'Vocabulary time intervals are not set'&#13;
    };&#13;
&#13;
&#13;
    presenter.getErrorObject = function AddonTextAudio_getErrorObject (ec) {&#13;
        return {&#13;
            isValid: false,&#13;
            errorCode: ec&#13;
        };&#13;
    };&#13;
&#13;
    presenter.getCorrectObject = function AddonTextAudio_getCorrectObject (val) {&#13;
        return {&#13;
            isValid: true,&#13;
            value: val&#13;
        };&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function AddonTextAudio_onEventReceived (eventName, eventData) {&#13;
        if(eventData.value == 'dropdownClicked') {&#13;
            presenter.audio.load();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showLoadingArea = function AddonTextAudio_showLoadingArea (clickAction) {&#13;
        if (clickAction === 'play_vocabulary_interval' &amp;&amp; presenter.buzzAudio.length === 0 &amp;&amp; !MobileUtils.isMobileUserAgent(navigator.userAgent)) {&#13;
            presenter.$view.find('div.text-audio-loading-area').css('display','block');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.hideLoadingArea = function AddonTextAudio_hideLoadingArea () {&#13;
        var $loadingArea = presenter.$view.find('div.text-audio-loading-area');&#13;
        $loadingArea.css('display','none');&#13;
        $loadingArea.remove();&#13;
    };&#13;
&#13;
    presenter.transposeDict = function AddonTextAudio_transposeDict (dict) {&#13;
        var transp = {};&#13;
        for (var key in dict) {&#13;
            if (dict.hasOwnProperty(key))&#13;
                transp[dict[key]] = key;&#13;
        }&#13;
        return transp;&#13;
    };&#13;
&#13;
    presenter.startTimeMeasurement = function AddonTextAudio_startTimeMeasurement () {&#13;
        presenter.isPlaying = true;&#13;
        if (!presenter.audioClock) {&#13;
            presenter.audioClock = setInterval(function AddonTextAudio_audioClockInterval () { presenter.onTimeUpdateCallback(); }, 1000 / presenter.fps);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopTimeMeasurement = function AddonTextAudio_stopTimeMeasurement () {&#13;
        presenter.isPlaying = false;&#13;
        clearInterval(presenter.audioClock);&#13;
        presenter.audioClock = null;&#13;
    };&#13;
&#13;
    presenter.startVocabularyTimeMeasurement = function AddonTextAudio_startVocabularyTimeMeasurement () {&#13;
        presenter.isVocabularyPlaying = true;&#13;
        if (!presenter.audioVocClock) {&#13;
            presenter.audioVocClock = setInterval(function AddonTextAudio_audioVOcClockInterval () { presenter.onTimeUpdateCallback(); }, 1000 / presenter.fps);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopVocabularyTimeMeasurement = function AddonTextAudio_stopVocabularyTimeMeasurement () {&#13;
        presenter.isVocabularyPlaying = false;&#13;
        clearInterval(presenter.audioVocClock);&#13;
        presenter.audioVocClock = null;&#13;
        presenter.clearSelection();&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function AddonTextAudio_setPlayerController (controller) {&#13;
        presenter.playerController = controller;&#13;
    };&#13;
&#13;
    presenter.stopSingleAudioPlayer = function AddonTextAudio_stopSingleAudioPlayer () {&#13;
        presenter.removeMarkFromItems();&#13;
&#13;
        for (var i=0; i&lt;presenter.buzzAudio.length; i++) {&#13;
            presenter.buzzAudio[i].stop();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playSingleAudioPlayer = function AddonTextAudio_playSingleAudioPlayer (slideId, elementID) {&#13;
        presenter.stopSingleAudioPlayer();&#13;
&#13;
        for (var i=0; i&lt;slideId; i++) {&#13;
            elementID += presenter.slidesLengths[i];&#13;
        }&#13;
&#13;
        presenter.buzzAudio[elementID].play();&#13;
    };&#13;
&#13;
    presenter.markItem = function AddonTextAudio_markItem (selectionId) {&#13;
        var selector = 'span[data-selectionid="[NUMBER]"]'.replace('[NUMBER]', selectionId);&#13;
        presenter.$view.find('.textaudio-text').find(selector).addClass('active');&#13;
    };&#13;
&#13;
    presenter.removeMarkFromItems = function AddonTextAudio_removeMarkFromItems () {&#13;
        presenter.$view.find('span.active').removeClass('active');&#13;
    };&#13;
&#13;
    presenter.upgradeModel = function AddonTextAudio_upgradeModel (model) {&#13;
    	var upgradedModel = presenter.upgradeControls(model);&#13;
&#13;
        return presenter.upgradeClickAction(upgradedModel);&#13;
    };&#13;
&#13;
    presenter.upgradeClickAction = function AddonTextAudio_upgradeClickAction (model) {&#13;
        var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (model.playPart != undefined || model.playSeparateFiles != undefined || model.separateFiles != undefined) {&#13;
            var playPart = ModelValidationUtils.validateBoolean(model.playPart),&#13;
                playSeparateFiles = ModelValidationUtils.validateBoolean(model.playSeparateFiles),&#13;
                clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_from_the_moment;&#13;
&#13;
            if (playPart &amp;&amp; !playSeparateFiles) {&#13;
                clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_interval;&#13;
            } else if (!playPart &amp;&amp; playSeparateFiles) {&#13;
                clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_vocabulary_file;&#13;
            } else if (playPart &amp;&amp; playSeparateFiles) {&#13;
                clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_interval_or_vocabulary;&#13;
            }&#13;
&#13;
            upgradedModel["clickAction"] = clickAction;&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.upgradeControls = function AddonTextAudio_upgradeControls (model) {&#13;
    	var upgradedModel = {};&#13;
&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (typeof upgradedModel['controls'] == "undefined") {&#13;
        	if (upgradedModel['defaultControls'] == "True") {&#13;
        		upgradedModel['controls'] = "Browser";&#13;
        	} else {&#13;
        		upgradedModel['controls'] = "None";&#13;
        	}&#13;
        }&#13;
&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    presenter.getSlideNumber = function addonTextAudio_getSlideNumber () {&#13;
        return presenter.current_slide_data.slide_id + 1;&#13;
    };&#13;
&#13;
    presenter.getEventObject = function AddonTextAudio_getEventObject (_item, _value, _score) {&#13;
        return {&#13;
            source : presenter.addonID,&#13;
            item: _item + "",&#13;
            value: _value + "",&#13;
            score: _score + ""&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createTimeUpdateEventData = function AddonTextAudio_createTimeUpdateEventData (data) {&#13;
        return presenter.getEventObject(presenter.getSlideNumber(), data.currentTime, "");&#13;
    };&#13;
&#13;
    presenter.createOnEndEventData = function AddonTextAudio_createOnEndEventData () {&#13;
        return presenter.getEventObject("end", "", "");&#13;
    };&#13;
&#13;
    presenter.createOnPlayEventData = function AddonTextAudio_createOnPlayEventData () {&#13;
        return presenter.getEventObject(presenter.getSlideNumber(), "playing", "");&#13;
    };&#13;
&#13;
    presenter.createOnPauseEventData = function AddonTextAudio_createOnPauseEventData () {&#13;
        return presenter.getEventObject(presenter.getSlideNumber(), "stop", "");&#13;
    };&#13;
&#13;
    presenter.getAudioCurrentTime = function AddonTextAudio_getAudioCurrentTime () {&#13;
        return presenter.audio.currentTime;&#13;
    };&#13;
&#13;
    presenter.formatTime = function addonTextAudio_formatTime (seconds) {&#13;
        function addonTextAudio_addZero(v) { return (v &lt; 10 ? '0' : '') + v }&#13;
&#13;
        var minutes = Math.floor(seconds / 60);&#13;
        var remainingSeconds = Math.floor(seconds % 60);&#13;
&#13;
        return addonTextAudio_addZero(minutes) + ":" + addonTextAudio_addZero(remainingSeconds);&#13;
    };&#13;
&#13;
    presenter.onLoadedMetadataCallback = function AddonTextAudio_onLoadedMetadataCallback () {&#13;
        var duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
        presenter.displayTimer(0, duration);&#13;
&#13;
        if (presenter.configuration.controls === "Custom"){&#13;
            presenter.$playerTime.html('0:00 / ' + presenter.formatTime(duration))&#13;
        }&#13;
    };&#13;
&#13;
    presenter.sendEventAndSetCurrentTimeAlreadySent = function AddonTextAudio_sendEventAndSetCurrentTimeAlreadySent (eventData, currentTime) {&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
        presenter.currentTimeAlreadySent = currentTime;&#13;
    };&#13;
&#13;
    presenter.sendOnEndEvent = function AddonTextAudio_sendOnEndEvent () {&#13;
        var eventData = presenter.createOnEndEventData();&#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateSendEventCallback = function AddonTextAudio_onTimeUpdateSendEventCallback () {&#13;
        var currentTime = presenter.formatTime(presenter.getAudioCurrentTime());&#13;
        if (currentTime !== presenter.currentTimeAlreadySent) { // to prevent duplicated value&#13;
            var eventData = presenter.createTimeUpdateEventData({'currentTime' : currentTime});&#13;
            presenter.sendEventAndSetCurrentTimeAlreadySent(eventData, currentTime);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onTimeUpdateCallback = function AddonTextAudio_onTimeUpdateCallback () {&#13;
        var bar_width, currentTime, duration;&#13;
&#13;
        if (presenter.isVocabularyPlaying) {&#13;
            if (presenter.vocabulary.getTime() &gt;= presenter.vocabulary_end) {&#13;
                presenter.stopVocabularyAudioPlaying();&#13;
            }&#13;
            return;&#13;
        }&#13;
        currentTime = presenter.audio.currentTime;&#13;
        duration = parseInt(presenter.audio.duration, 10);&#13;
        duration = isNaN(duration) ? 0 : duration;&#13;
&#13;
        if (presenter.configuration.displayTime) {&#13;
            presenter.displayTimer(currentTime, duration);&#13;
        }&#13;
&#13;
        if (presenter.configuration.controls === "Custom"){&#13;
            presenter.$playerTime.html(presenter.formatTime(currentTime) + ' / ' + presenter.formatTime(duration));&#13;
            bar_width = presenter.$progressWrapper.width() * currentTime / duration;&#13;
            presenter.$progressBar.width(Math.round(bar_width));&#13;
            presenter.$progressSlider.css('left', Math.round(bar_width));&#13;
        }&#13;
&#13;
        if(presenter.configuration.showSlides == "Show all slides"){&#13;
            presenter.changeSlideAll(currentTime);&#13;
        }else{&#13;
            presenter.changeSlide(currentTime);&#13;
        }&#13;
&#13;
        if (presenter.stopClicked) {&#13;
            presenter.$view.find('span').removeClass('active');&#13;
            presenter.hasBeenStarted = false;&#13;
            presenter.stopClicked = false;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeVolumeClass = function addonTextAudio_changeVolumeClass (volume_btn, volume_class) {&#13;
        if (volume_btn.hasClass(volume_class)) {&#13;
            return;&#13;
        }&#13;
        for (var i=0; i&lt;=3; i++) {&#13;
            if (volume_btn.hasClass('textaudio-volume'+i)) {&#13;
                volume_btn.removeClass('textaudio-volume'+i);&#13;
            }&#13;
        }&#13;
        volume_btn.addClass(volume_class);&#13;
    };&#13;
&#13;
    presenter.onVolumeChanged = function AddonTextAudio_onVolumeChanged () {&#13;
        var volume, volume_class;&#13;
        if (presenter.configuration.controls === "Custom"){&#13;
            volume = presenter.audio.volume;&#13;
            volume_class = '';&#13;
            presenter.$volumeControl.css('left', volume * presenter.$volumeLayer.width());&#13;
            if (volume &lt; 0.1) {&#13;
                volume_class = 'textaudio-volume0';&#13;
                if (volume &gt; 0) {&#13;
                    presenter.audio.volume = 0;&#13;
                }&#13;
            } else if (volume &lt; 0.4) {&#13;
                volume_class = 'textaudio-volume1';&#13;
            } else if (volume &lt; 0.7) {&#13;
                volume_class = 'textaudio-volume2';&#13;
            } else {&#13;
                volume_class = 'textaudio-volume3';&#13;
            }&#13;
            presenter.changeVolumeClass(presenter.$volumeBtn, volume_class);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playPauseCallback = function AddonTextAudio_playPauseCallback () {&#13;
        if (presenter.$playPauseBtn.hasClass('textaudio-pause-btn')) {&#13;
            presenter.pause();&#13;
        }&#13;
        else {&#13;
            presenter.play();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.displayTimer = function AddonTextAudio_displayTimer (current, duration) {&#13;
        presenter.$view.find('#currentTime').html(presenter.formatTime(current) + ' / ');&#13;
        presenter.$view.find('#durationTime').html(presenter.formatTime(duration));&#13;
    };&#13;
&#13;
    presenter.goTo =  function AddonTextAudio_goTo (slide_id, selectionId) {&#13;
        if (slide_id &gt;= 0 || selectionId &gt;= 0) {&#13;
            var frame2go = presenter.configuration.slides[slide_id].Times[selectionId].start + 0.1;&#13;
            presenter.audio.currentTime = frame2go / presenter.fps;&#13;
        }&#13;
        presenter.play();&#13;
    };&#13;
&#13;
    presenter.setPositionAndDimentions = function AddonTextAudio_setPositionAndDimentions (element, slide_id) {&#13;
        element.css('position', 'absolute');&#13;
        element.css('left', presenter.configuration.slides[slide_id].positionAndDimentions[0]+ 'px');&#13;
        element.css('top', presenter.configuration.slides[slide_id].positionAndDimentions[1]+ 'px');&#13;
        element.css('width', presenter.configuration.slides[slide_id].positionAndDimentions[2]+ 'px');&#13;
        element.css('height', presenter.configuration.slides[slide_id].positionAndDimentions[3]+ 'px');&#13;
    };&#13;
&#13;
    presenter.removePositionAndDimentions = function AddonTextAudio_removePositionAndDimentions (element) {&#13;
        element.css('position', '');&#13;
        element.css('left', '');&#13;
        element.css('top', '');&#13;
        element.css('width', '');&#13;
        element.css('height', '');&#13;
    };&#13;
&#13;
    presenter.makeSlide =  function AddonTextAudio_makeSlide (textWrapper, slide_id) {&#13;
        slide_id = parseInt(slide_id, 10);&#13;
        if (slide_id &lt; 0) {&#13;
            textWrapper.html('');&#13;
        } else {&#13;
            if(presenter.configuration.showSlides == "Show all slides" &amp;&amp; slide_id &gt;=1){&#13;
                var textElement = $('&lt;div class="textaudio-text"&gt;&lt;/div&gt;');&#13;
                textElement.addClass('slide-id-'+slide_id);&#13;
                presenter.$view.find('.wrapper-addon-textaudio').append(textElement);&#13;
                textWrapper = presenter.$view.find('.slide-id-'+slide_id);&#13;
            }&#13;
            if(presenter.configuration.showSlides == "Show all slides"){&#13;
                textWrapper.append(presenter.configuration.slides[slide_id].html);&#13;
                if(presenter.configuration.slides[slide_id].positionAndDimentions != '' &amp;&amp; presenter.configuration.slides[slide_id].positionAndDimentions != undefined){&#13;
                    presenter.setPositionAndDimentions(textWrapper, slide_id);&#13;
                }&#13;
            }else{&#13;
                textWrapper.html(presenter.configuration.slides[slide_id].html);&#13;
                if(presenter.configuration.slides[slide_id].positionAndDimentions != '' &amp;&amp; presenter.configuration.slides[slide_id].positionAndDimentions != undefined){&#13;
                    presenter.setPositionAndDimentions(textWrapper, slide_id);&#13;
                }else{&#13;
                    presenter.removePositionAndDimentions(textWrapper);&#13;
                }&#13;
            }&#13;
            textWrapper.attr('data-slideId', slide_id);&#13;
            textWrapper.find("span[class^='textelement']").each(function AddonTextAudio_textWrapperTextElementEach () {&#13;
                var that = this;&#13;
                if(!presenter.configuration.isClickDisabled){&#13;
                    presenter.slidesSpanElements.push(that);&#13;
                    $(that).on('click', function addonTextAudio_textWrapperTextElementOnClick (e) {&#13;
                        e.stopPropagation();&#13;
&#13;
                        var isVocabularyInterval = presenter.configuration.clickAction == 'play_vocabulary_interval';&#13;
                        var isLoaded = presenter.isVocabularyAudioLoaded || presenter.buzzAudio.length !== 0;&#13;
                        if (isVocabularyInterval &amp;&amp; !MobileUtils.isMobileUserAgent(navigator.userAgent) &amp;&amp; !isLoaded) {&#13;
                            return false;&#13;
                        }&#13;
&#13;
                        presenter.playedByClick = true;&#13;
                        presenter.selectionId = parseInt($(this).attr('data-selectionId'), 10);&#13;
&#13;
                        switch (presenter.configuration.clickAction) {&#13;
                            case 'play_vocabulary_interval':&#13;
                                if (presenter.isVocabularyPlaying || !presenter.isPlaying) {&#13;
                                    var intervalId = parseInt($(this).attr('data-intervalId'), 10);&#13;
                                    var frame = presenter.configuration.vocabularyIntervals[intervalId];&#13;
&#13;
                                    if (presenter.isPlaying) {&#13;
                                        presenter.vocabulary.stop();&#13;
                                    }&#13;
                                    presenter.clearSelection();&#13;
                                    presenter.vocabulary.setTime(frame.start / presenter.fps);&#13;
                                    presenter.vocabulary_end = frame.end / presenter.fps;&#13;
                                    presenter.vocabulary.play();&#13;
                                    presenter.markItem(presenter.selectionId);&#13;
                                    break;&#13;
                                }&#13;
                            case 'play_interval_or_vocabulary':&#13;
                            case 'play_vocabulary_file':&#13;
                                if (!presenter.isPlaying) {&#13;
                                    presenter.pause();&#13;
                                    presenter.playSingleAudioPlayer(slide_id, presenter.selectionId);&#13;
                                    presenter.markItem(presenter.selectionId);&#13;
                                    break;&#13;
                                }&#13;
                            case 'play_interval':&#13;
                            case 'play_from_the_moment':&#13;
                                presenter.play();&#13;
&#13;
                                if ($(this).hasClass("tmp-active")) {&#13;
                                    $(this).removeClass("tmp-active");&#13;
                                    $(this).addClass("active");&#13;
                                }&#13;
&#13;
                                if (MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
                                    function AddonTextAudio_fun() {&#13;
                                        if (slide_id &gt;= 0 || presenter.selectionId &gt;= 0) {&#13;
                                            var frame2go = presenter.configuration.slides[slide_id].Times[presenter.selectionId].start;&#13;
                                            presenter.audio.currentTime = frame2go / presenter.fps;&#13;
                                        }&#13;
                                        presenter.audio.removeEventListener("playing", AddonTextAudio_fun, false);&#13;
                                    }&#13;
                                    if (presenter.hasBeenStarted) {&#13;
                                        presenter.pause();&#13;
                                        presenter.goTo(slide_id, presenter.selectionId);&#13;
                                    } else {&#13;
                                        presenter.audio.addEventListener("playing", AddonTextAudio_fun, false);&#13;
                                    }&#13;
                                } else {&#13;
                                    presenter.goTo(slide_id, presenter.selectionId);&#13;
                                }&#13;
                        }&#13;
                    });&#13;
                }&#13;
            });&#13;
&#13;
        }&#13;
    };&#13;
&#13;
    presenter.highlightSelection = function AddonTextAudio_highlightSelection (textWrapper, selection_id) {&#13;
        textWrapper.find('span').each(function () {&#13;
            $(this).removeClass('active');&#13;
        });&#13;
        if (selection_id &gt;= 0) {&#13;
            textWrapper.find('span.textelement' + selection_id).addClass('active');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.areSlidesEqual = function addonTextAudio_areSlidesEqual (slide1, slide2) {&#13;
        return slide1.slide_id == slide2.slide_id &amp;&amp; slide1.selection_id == slide2.selection_id;&#13;
    };&#13;
&#13;
    presenter.highlightSelectionAll = function AddonTextAudio_highlightSelectionAll (textWrapper, selection_id) {&#13;
        presenter.$view.find('.textaudio-text').find('span').each(function () {&#13;
            $(this).removeClass('active');&#13;
        });&#13;
&#13;
        if(presenter.currentSlide &gt;= 1){&#13;
            textWrapper = presenter.$view.find('.slide-id-'+presenter.currentSlide);&#13;
        }&#13;
&#13;
        if (selection_id &gt;= 0) {&#13;
            textWrapper.find('span.textelement' + selection_id).addClass('active');&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeSlideAll = function AddonTextAudio_changeSlideAll (currentTime) {&#13;
        currentTime = Math.round(currentTime * presenter.fps);&#13;
        var frames_array = presenter.configuration.frames;&#13;
        var isCurrentTimeInRange = currentTime &lt; frames_array.length;&#13;
        var slide_data = {&#13;
            slide_id: isCurrentTimeInRange ? frames_array[currentTime].slide_id : -1,&#13;
            selection_id: isCurrentTimeInRange ? frames_array[currentTime].selection_id : 0&#13;
        };&#13;
        presenter.currentSlide = slide_data.slide_id;&#13;
        if (!presenter.hasBeenStarted) {&#13;
            slide_data.selection_id = -1;&#13;
        }&#13;
        var difference = slide_data.selection_id - presenter.previousSelectionId;&#13;
        if (difference &gt; 1 &amp;&amp; !presenter.playedByClick &amp;&amp; presenter.previousSelectionId != -1) {&#13;
            slide_data.selection_id -= difference - 1;&#13;
        }&#13;
        presenter.previousSelectionId = slide_data.selection_id;&#13;
        presenter.changeSlideFromDataAll(slide_data);&#13;
    };&#13;
&#13;
    presenter.changeSlideFromDataAll = function AddonTextAudio_changeSlideFromDataAll (slide_data) {&#13;
        var textWrapper = presenter.$view.find(".slide-id-0");&#13;
        if (!presenter.areSlidesEqual(slide_data, presenter.current_slide_data)) {&#13;
            var blockHighlight = false;&#13;
            var currentSelId = presenter.current_slide_data.selection_id;&#13;
            if (presenter.configuration.playPart &amp;&amp; currentSelId !== -1 &amp;&amp; presenter.selectionId === currentSelId) {&#13;
                presenter.pause();&#13;
                blockHighlight = true;&#13;
            }&#13;
            if (slide_data.slide_id != presenter.current_slide_data.slide_id &amp;&amp; !presenter.slidesMade) {&#13;
                presenter.makeSlide(textWrapper, slide_data.slide_id);&#13;
            }&#13;
            presenter.highlightSelectionAll(textWrapper, slide_data.selection_id);&#13;
&#13;
            if (blockHighlight) {&#13;
                textWrapper.find('span').each(function AddonTextAudio_textWrapperSpanEach2 () {&#13;
                    if ($(this).hasClass('active')) {&#13;
                        $(this).removeClass('active');&#13;
                        $(this).addClass("tmp-active");&#13;
                    }&#13;
                });&#13;
            }&#13;
            presenter.current_slide_data = slide_data;&#13;
            presenter.playedByClick = false;&#13;
        } else {&#13;
            if (presenter.$view.find('.active').length === 0) {&#13;
                presenter.highlightSelectionAll(textWrapper, slide_data.selection_id);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeSlideFromData = function AddonTextAudio_changeSlideFromData (slide_data) {&#13;
        var textWrapper = presenter.$view.find(".wrapper-addon-textaudio .textaudio-text");&#13;
&#13;
        if (!presenter.areSlidesEqual(slide_data, presenter.current_slide_data)) {&#13;
            var blockHighlight = false;&#13;
&#13;
            var currentSelId = presenter.current_slide_data.selection_id;&#13;
            if (presenter.configuration.playPart &amp;&amp; currentSelId !== -1 &amp;&amp; presenter.selectionId === currentSelId) {&#13;
                presenter.pause();&#13;
                blockHighlight = true;&#13;
            }&#13;
&#13;
            if (slide_data.slide_id != presenter.current_slide_data.slide_id) {&#13;
                presenter.makeSlide(textWrapper, slide_data.slide_id);&#13;
            }&#13;
            presenter.highlightSelection(textWrapper, slide_data.selection_id);&#13;
&#13;
            if (blockHighlight) {&#13;
                textWrapper.find('span').each(function AddonTextAudio_textWrapperSpanEach3 () {&#13;
                    if ($(this).hasClass('active')) {&#13;
                        $(this).removeClass('active');&#13;
                        $(this).addClass("tmp-active");&#13;
                    }&#13;
                });&#13;
            }&#13;
&#13;
            presenter.current_slide_data = slide_data;&#13;
            presenter.playedByClick = false;&#13;
        } else {&#13;
            if (presenter.$view.find('.active').length === 0) {&#13;
                presenter.highlightSelection(textWrapper, slide_data.selection_id);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.changeSlide = function AddonTextAudio_changeSlide (currentTime) {&#13;
        currentTime = Math.round(currentTime * presenter.fps);&#13;
&#13;
        var frames_array = presenter.configuration.frames;&#13;
        var isCurrentTimeInRange = currentTime &lt; frames_array.length;&#13;
&#13;
        var slide_data = {&#13;
            slide_id: isCurrentTimeInRange ? frames_array[currentTime].slide_id : -1,&#13;
            selection_id: isCurrentTimeInRange ? frames_array[currentTime].selection_id : 0&#13;
        };&#13;
&#13;
        if (!presenter.hasBeenStarted) {&#13;
            slide_data.selection_id = -1;&#13;
        }&#13;
&#13;
        var difference = slide_data.selection_id - presenter.previousSelectionId;&#13;
        if (difference &gt; 1 &amp;&amp; !presenter.playedByClick) {&#13;
            slide_data.selection_id -= difference - 1;&#13;
        }&#13;
&#13;
        presenter.previousSelectionId = slide_data.selection_id;&#13;
        presenter.changeSlideFromData(slide_data);&#13;
    };&#13;
&#13;
    presenter.progressMouseDownCallback = function AddonTextAudio_progressMouseDownCallback (event) {&#13;
        if ($(event.target).hasClass('textaudio-slider-btn')) {&#13;
            presenter.mouseData.oldPosition = event.pageX;&#13;
            presenter.mouseData.isMouseDragged = true;&#13;
            presenter.mouseData.playedBeforeDragging = !presenter.audio.paused;&#13;
            if (!presenter.audio.paused) {&#13;
                presenter.pause();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.progressMouseUpCallback = function AddonTextAudio_progressMouseUpCallback () {&#13;
        var duration;&#13;
        if (presenter.mouseData.isMouseDragged) {&#13;
            duration = presenter.audio.duration;&#13;
            duration = isNaN(duration) ? 0 : duration;&#13;
            presenter.audio.currentTime = duration * presenter.$progressBar.width() / presenter.$progressWrapper.width();&#13;
            presenter.mouseData.isMouseDragged = false;&#13;
            presenter.mouseData.oldPosition = 0;&#13;
            if (presenter.mouseData.playedBeforeDragging) {&#13;
                presenter.play();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.progressMouseMoveCallback = function AddonTextAudio_progressMouseMoveCallback (event) {&#13;
        var relativeDistance, barWidth, oldWidth;&#13;
        if (presenter.mouseData.isMouseDragged){&#13;
            relativeDistance = event.pageX - presenter.mouseData.oldPosition;&#13;
            barWidth = 0;&#13;
            oldWidth = presenter.$progressBar.width();&#13;
            if (oldWidth + relativeDistance &lt; presenter.$progressWrapper.width()) {&#13;
                barWidth = oldWidth + relativeDistance;&#13;
            }&#13;
            else {&#13;
                barWidth = presenter.$progressWrapper.width();&#13;
            }&#13;
            presenter.$progressBar.width(barWidth);&#13;
            presenter.$progressSlider.css('left',Math.round(barWidth));&#13;
            presenter.mouseData.oldPosition = event.pageX;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isMoreThanOneFingerGesture = function addonTextAudio_isMoreThanOneFingerGesture (event) {&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touchPoints = event.touches;&#13;
        return touchPoints.length&gt; 1;&#13;
    };&#13;
&#13;
    presenter.progressTouchStartCallback = function addonTextAudio_progressTouchStartCallback (event) {&#13;
        if (presenter.isMoreThanOneFingerGesture(event)) return;&#13;
        var touch, touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0];&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        presenter.progressMouseDownCallback(touch);&#13;
    };&#13;
&#13;
    presenter.progressTouchEndCallback =  function AddonTextAudio_progressTouchEndCallback () {&#13;
        presenter.progressMouseUpCallback();&#13;
    };&#13;
&#13;
    presenter.progressTouchMoveCallback = function AddonTextAudio_progressTouchMoveCallback (event) {&#13;
        if (presenter.isMoreThanOneFingerGesture(event)) return;&#13;
&#13;
        var touch;&#13;
        var touchPoints = (typeof event.changedTouches != 'undefined') ? event.changedTouches : [event];&#13;
&#13;
        if (event.hasOwnProperty('touches'))&#13;
            touch = event.touches[0];&#13;
        else&#13;
            touch = touchPoints[0];&#13;
        presenter.progressMouseMoveCallback(touch);&#13;
    };&#13;
&#13;
    presenter.attachProgressListeners = function AddonTextAudio_attachProgressListeners () {&#13;
        presenter.isMobileDevice = MobileUtils.isMobileUserAgent(navigator.userAgent) || MobileUtils.isEventSupported('touchend');&#13;
        if (MobileUtils.isWindowsMobile(window.navigator)) {&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerDown", presenter.progressTouchStartCallback , false);&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerUp", presenter.progressTouchEndCallback, false);&#13;
            presenter.$progressWrapper[0].addEventListener("MSPointerMove", presenter.progressTouchMoveCallback, false);&#13;
        }&#13;
        else if (presenter.isMobileDevice) {&#13;
            presenter.$progressWrapper[0].ontouchstart=presenter.progressTouchStartCallback ;&#13;
            presenter.$customPlayer[0].ontouchend=presenter.progressTouchEndCallback;&#13;
            presenter.$progressWrapper[0].ontouchmove=presenter.progressTouchMoveCallback;&#13;
        }&#13;
        else {&#13;
            presenter.$progressWrapper.on('mousedown', presenter.progressMouseDownCallback);&#13;
            presenter.$progressWrapper.on('mouseup', presenter.progressMouseUpCallback);&#13;
            presenter.$progressWrapper.on('mousemove', presenter.progressMouseMoveCallback);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.toogleVolumeLayer = function AddonTextAudio_toogleVolumeLayer (){&#13;
        presenter.onVolumeChanged();&#13;
        presenter.$volumeLayer.toggle();&#13;
        presenter.$playerTime.toggle();&#13;
    };&#13;
&#13;
    presenter.createHtmlPlayer = function AddonTextAudio_createHtmlPlayer () {&#13;
        var $volumeControlBackground;&#13;
&#13;
        presenter.$customPlayer = $('&lt;div&gt;').&#13;
            addClass('textaudioplayer');&#13;
&#13;
        presenter.$playPauseBtn = $('&lt;div&gt;').&#13;
            addClass('textaudio-play-pause-btn').&#13;
            addClass('textaudio-play-btn').&#13;
            on('click', presenter.playPauseCallback);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$playPauseBtn);&#13;
&#13;
        presenter.$stopBtn = $('&lt;div&gt;').&#13;
            addClass('textaudio-stop-btn').&#13;
            on('click', presenter.stop);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$stopBtn);&#13;
&#13;
        presenter.$progressWrapper = $('&lt;div&gt;').&#13;
            addClass('textaudio-progress-bar');&#13;
&#13;
        presenter.$progressBar = $('&lt;div&gt;').&#13;
            addClass('textaudio-bar');&#13;
&#13;
        presenter.$progressSlider = $('&lt;div&gt;').&#13;
            addClass('textaudio-slider-btn');&#13;
&#13;
        presenter.attachProgressListeners();&#13;
&#13;
        presenter.$progressWrapper.&#13;
            append(presenter.$progressBar).&#13;
            append(presenter.$progressSlider);&#13;
&#13;
        presenter.$customPlayer.append(presenter.$progressWrapper);&#13;
&#13;
        if (!MobileUtils.isSafariMobile(navigator.userAgent)) {&#13;
            presenter.$volumeBtn = $('&lt;div&gt;').&#13;
                addClass('textaudio-volume-btn').&#13;
                on('click', presenter.toogleVolumeLayer);&#13;
&#13;
            presenter.$volumeLayer = $('&lt;div&gt;').&#13;
                addClass('textaudio-volume-layer').&#13;
                on('click', presenter.volumeLayerOnClick).&#13;
                hide();&#13;
&#13;
            $volumeControlBackground = $('&lt;div&gt;').&#13;
                addClass('textaudio-volume-control-background');&#13;
&#13;
            presenter.$volumeControl = $('&lt;div&gt;').&#13;
                addClass('textaudio-volume-control');&#13;
&#13;
            presenter.$volumeLayer.&#13;
                append($volumeControlBackground).&#13;
                append(presenter.$volumeControl);&#13;
&#13;
            presenter.$customPlayer.&#13;
                append(presenter.$volumeBtn).&#13;
                append(presenter.$volumeLayer);&#13;
        }&#13;
&#13;
        presenter.$playerTime = $('&lt;div&gt;').&#13;
            addClass('textaudio-player-time').&#13;
            text('00:00 / --:--');&#13;
&#13;
        presenter.$customPlayer.append(presenter.$playerTime);&#13;
&#13;
        presenter.$audioWrapper.append(presenter.$customPlayer);&#13;
    };&#13;
&#13;
    presenter.volumeLayerOnClick = function AddonTextAudio_volumeLayerOnClick (e) {&#13;
        presenter.audio.volume = e.offsetX / $(this).width();&#13;
    };&#13;
&#13;
    presenter.createView = function AddonTextAudio_createView (view, model, isPreview) {&#13;
        presenter.$view.bind('click', function (event) {&#13;
            event.stopPropagation();&#13;
        });&#13;
        presenter.originalFile .mp3 = model.mp3;&#13;
        presenter.originalFile .ogg = model.ogg;&#13;
&#13;
        presenter.audio = document.createElement('audio');&#13;
        presenter.$audioWrapper = presenter.$view.find(".wrapper-addon-textaudio .textaudio-player");&#13;
&#13;
        if (presenter.configuration.controls === "Browser") {&#13;
            presenter.audio.setAttribute("controls", "controls");&#13;
            presenter.audio.setAttribute("preload", "auto");&#13;
        } else if (presenter.configuration.controls === "Custom") {&#13;
            presenter.createHtmlPlayer();&#13;
        }&#13;
&#13;
        var currentTime = document.createElement("span");&#13;
        var durationTime = document.createElement("span");&#13;
        $(currentTime).attr("id", "currentTime").addClass('current-time');&#13;
        $(durationTime).attr("id", "durationTime").addClass('duration-time');&#13;
&#13;
        presenter.$audioWrapper.append(presenter.audio);&#13;
        if (presenter.configuration.displayTime) {&#13;
            presenter.$audioWrapper.append(currentTime).append(durationTime);&#13;
            presenter.audio.addEventListener('loadeddata', presenter.onLoadedMetadataCallback, false);&#13;
        }&#13;
&#13;
        if(presenter.configuration.showSlides == "Show all slides"){&#13;
            var frames_array = presenter.configuration.frames;&#13;
            for (var i = 0; i&lt; frames_array.length; i++){&#13;
                if(frames_array[i].slide_id &gt;= 0){&#13;
                    var slide_data = {&#13;
                        slide_id: frames_array[i].slide_id,&#13;
                        selection_id: frames_array[i].selection_id&#13;
                    };&#13;
                    presenter.changeSlideFromDataAll(slide_data);&#13;
                }&#13;
            }&#13;
            presenter.$view.find('.textaudio-text span').removeClass('active');&#13;
        }else{&#13;
            presenter.changeSlide(0);&#13;
        }&#13;
&#13;
        presenter.slidesMade = true;&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.audio.addEventListener('timeupdate', presenter.onTimeUpdateSendEventCallback, false);&#13;
            presenter.audio.addEventListener('playing', presenter.onAudioPlaying, false);&#13;
            presenter.audio.addEventListener('play', presenter.onAudioPlay, false);&#13;
            presenter.audio.addEventListener('pause', presenter.onAudioPause, false);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onAudioPlaying = function AddonTextAudio_onAudioPlaying () {&#13;
        presenter.hasBeenStarted = true;&#13;
    };&#13;
&#13;
    presenter.onAudioPlay =  function AddonTextAudio_onAudioPlay () {&#13;
        if (presenter.isVocabularyPlaying) {&#13;
            presenter.vocabulary.pause();&#13;
        }&#13;
        if (!presenter.playedByClick) {&#13;
            presenter.selectionId = undefined;&#13;
        }&#13;
        presenter.eventBus.sendEvent('ValueChanged', presenter.createOnPlayEventData());&#13;
        presenter.startTimeMeasurement();&#13;
    };&#13;
&#13;
    presenter.onAudioPause = function AddonTextAudio_onAudioPause () {&#13;
        presenter.stopTimeMeasurement();&#13;
        presenter.eventBus.sendEvent('ValueChanged', presenter.createOnPauseEventData())&#13;
    };&#13;
&#13;
    presenter.attachEventListeners = function AddonTextAudio_attachEventListeners () {&#13;
        presenter.audio.addEventListener('loadeddata', presenter.onLoadedMetadataCallback, false);&#13;
        presenter.audio.addEventListener('timeupdate', presenter.onTimeUpdateCallback, false);&#13;
        presenter.audio.addEventListener('volumechange', presenter.onVolumeChanged, false);&#13;
        presenter.audio.addEventListener('ended', presenter.onEnded, false);&#13;
        presenter.audio.addEventListener('click', presenter.onAudioClick, false);&#13;
    };&#13;
&#13;
    presenter.onEnded = function AddonTextAudio_onEnded () {&#13;
        if (presenter.configuration.enableLoop) {&#13;
            presenter.currentTime = 0;&#13;
            presenter.play();&#13;
        } else {&#13;
            presenter.executeOnEndEvent();&#13;
            presenter.sendOnEndEvent();&#13;
            presenter.stop();&#13;
            presenter.$view.find(".wrapper-addon-textaudio .textaudio-text :last-child").removeClass('active');&#13;
        }&#13;
&#13;
        presenter.playedByClick = false;&#13;
    };&#13;
&#13;
    presenter.onAudioClick = function AddonTextAudio_onAudioClick (event) {&#13;
        event.stopPropagation();&#13;
    };&#13;
&#13;
    presenter.loadFiles = function AddonTextAudio_loadFiles () {&#13;
        var canPlayMp3 = false;&#13;
        var canPlayOgg = false;&#13;
&#13;
        if (presenter.audio.canPlayType) {&#13;
            canPlayMp3 = presenter.audio.canPlayType &amp;&amp; "" != presenter.audio.canPlayType('audio/mpeg');&#13;
            canPlayOgg = presenter.audio.canPlayType &amp;&amp; "" != presenter.audio.canPlayType('audio/ogg; codecs="vorbis"');&#13;
&#13;
            if (canPlayMp3) {&#13;
                presenter.audio.setAttribute("src", presenter.originalFile .mp3);&#13;
            } else if (canPlayOgg) {&#13;
                presenter.audio.setAttribute("src", presenter.originalFile .ogg);&#13;
            }&#13;
&#13;
            if (presenter.configuration.clickAction == 'play_vocabulary_interval') {&#13;
                presenter.vocabulary = new buzz.sound([&#13;
                    presenter.configuration.vocabulary_mp3,&#13;
                    presenter.configuration.vocabulary_ogg&#13;
                ]);&#13;
                presenter.vocabulary.bind('canplaythrough', function AddonTextAudio_vocabularyCanPlayThrough () {&#13;
                    presenter.vocabulary.unbind('canplaythrough');&#13;
                    presenter.isVocabularyAudioLoaded = true;&#13;
                    presenter.hideLoadingArea();&#13;
                }, false);&#13;
                presenter.vocabulary.bind('ended', function AddonTextAudio_vocabularyEnded () {&#13;
                    presenter.clearSelection();&#13;
                });&#13;
                presenter.vocabulary.bind('play', function AddonTextAudio_vocabularyPlay () {&#13;
                    if (!presenter.playedByClick) {&#13;
                        presenter.selectionId = undefined;&#13;
                    }&#13;
                    presenter.startVocabularyTimeMeasurement();&#13;
                }, false);&#13;
                presenter.vocabulary.bind('pause', function AddonTextAudio_vocabularyPause () {&#13;
                    presenter.stopVocabularyTimeMeasurement();&#13;
                }, false);&#13;
            }&#13;
        } else {&#13;
            var infoSpan = document.createElement('span');&#13;
            infoSpan.innerHTML = "Your browser doesn't support audio.";&#13;
            presenter.audio.appendChild(infoSpan);&#13;
        }&#13;
&#13;
        presenter.audio.load();&#13;
        presenter.attachEventListeners();&#13;
    };&#13;
&#13;
    presenter.createSeparateAudioFiles = function AddonTextAudio_createSeparateAudioFiles (audioFiles) {&#13;
        for (var i=0; i&lt;audioFiles.length; i++) {&#13;
            var localBuzz = new buzz.sound([&#13;
                audioFiles[i].mp3,&#13;
                audioFiles[i].ogg&#13;
            ]);&#13;
&#13;
            localBuzz.bind('ended', function AddonTextAudio_localBuzzEnded () {&#13;
                presenter.clearSelection();&#13;
            });&#13;
&#13;
            presenter.buzzAudio.push(localBuzz);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function AddonTextAudio_run (view, model) {&#13;
        presenter.initialize(view, model, false);&#13;
&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
        presenter.isLoaded = false;&#13;
        if (presenter.configuration.isValid) {&#13;
            presenter.audio.addEventListener("loadeddata", presenter.onAudioLoadedData);&#13;
        }&#13;
        presenter.addonID = model.ID;&#13;
&#13;
        presenter.eventBus.addEventListener('ValueChanged', this);&#13;
    };&#13;
&#13;
    presenter.onAudioLoadedData = function AddonTextAudio_onAudioLoadedData () {&#13;
        presenter.isLoaded = true;&#13;
    };&#13;
&#13;
    presenter.destroy = function AddonTextAudio_destroy (event) {&#13;
        if (event.target !== presenter.view) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.view.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        if (presenter.$customPlayer) {&#13;
            presenter.$customPlayer[0].ontouchend = null;&#13;
            presenter.$customPlayer = null;&#13;
        }&#13;
        if (presenter.$playPauseBtn) {&#13;
            presenter.$playPauseBtn.off();&#13;
            presenter.$playPauseBtn = null;&#13;
        }&#13;
        if (presenter.$stopBtn) {&#13;
            presenter.$stopBtn.off();&#13;
            presenter.$stopBtn = null;&#13;
        }&#13;
        if (presenter.$progressWrapper) {&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerDown", presenter.progressTouchStartCallback , false);&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerUp", presenter.progressTouchEndCallback, false);&#13;
            presenter.$progressWrapper[0].removeEventListener("MSPointerMove", presenter.progressTouchMoveCallback, false);&#13;
            presenter.$progressWrapper[0].ontouchstart = null;&#13;
            presenter.$progressWrapper[0].ontouchmove = null;&#13;
            presenter.$progressWrapper.off();&#13;
            presenter.$progressWrapper = null;&#13;
        }&#13;
        if (presenter.$progressBar) {&#13;
            presenter.$progressBar = null;&#13;
        }&#13;
        if (presenter.$progressSlider) {&#13;
            presenter.$progressSlider = null;&#13;
        }&#13;
        if (presenter.$volumeBtn) {&#13;
            presenter.$volumeBtn.off();&#13;
            presenter.$volumeBtn = null;&#13;
        }&#13;
        if (presenter.$volumeLayer) {&#13;
            presenter.$volumeLayer.off();&#13;
            presenter.$volumeLayer = null;&#13;
        }&#13;
        if (presenter.$volumeControl) {&#13;
            presenter.$volumeControl = null;&#13;
        }&#13;
        if (presenter.$playerTime) {&#13;
            presenter.$playerTime = null;&#13;
        }&#13;
&#13;
        if (presenter.audio) {&#13;
            presenter.audio.pause();&#13;
            presenter.audio.removeEventListener('loadeddata', presenter.onLoadedMetadataCallback, false);&#13;
            presenter.audio.removeEventListener('timeupdate', presenter.onTimeUpdateSendEventCallback, false);&#13;
            presenter.audio.removeEventListener('playing', presenter.onAudioPlaying, false);&#13;
            presenter.audio.removeEventListener('play', presenter.onAudioPlay, false);&#13;
            presenter.audio.removeEventListener('pause', presenter.onAudioPause, false);&#13;
            presenter.audio.removeEventListener('timeupdate', presenter.onTimeUpdateCallback, false);&#13;
            presenter.audio.removeEventListener('volumechange', presenter.onVolumeChanged, false);&#13;
            presenter.audio.removeEventListener('ended', presenter.onEnded, false);&#13;
            presenter.audio.removeEventListener('click', presenter.onAudioClick, false);&#13;
            presenter.audio.removeEventListener("loadeddata", presenter.onAudioLoadedData);&#13;
            presenter.audio.removeEventListener("loadeddata", presenter.stopAudioLoadedData);&#13;
            presenter.audio.removeEventListener("loadeddata", presenter.playAudioLoadedData);&#13;
            presenter.audio.setAttribute('src', '');&#13;
            presenter.audio.removeAttribute('src');&#13;
            presenter.audio.load();&#13;
        }&#13;
&#13;
        if (presenter.vocabulary) {&#13;
            presenter.vocabulary.unbind('ended play pause canplaythrough');&#13;
            presenter.stopVocabularyAudioPlaying();&#13;
            presenter.vocabulary = null;&#13;
        }&#13;
&#13;
        presenter.buzzAudio.forEach(function (singleBuzzAudio, index) {&#13;
            singleBuzzAudio.unbind('ended play pause canplaythrough');&#13;
            presenter.buzzAudio[index] = null;&#13;
        });&#13;
&#13;
        presenter.slidesSpanElements.forEach(function (spanElement, index) {&#13;
            $(spanElement).off();&#13;
            presenter.slidesSpanElements[index] = null;&#13;
        });&#13;
&#13;
        try {&#13;
            clearInterval(presenter.audioClock);&#13;
        } catch (e) {}&#13;
&#13;
        try {&#13;
            clearInterval(presenter.audioVocClock);&#13;
        } catch (e) {}&#13;
&#13;
        presenter.$audioWrapper = null;&#13;
        presenter.originalFile = null;&#13;
        presenter.vocabularyFile = null;&#13;
        presenter.eventBus = null;&#13;
        presenter.currentTimeAlreadySent = null;&#13;
        presenter.buzzAudio = null;&#13;
        presenter.audio = null;&#13;
        presenter.current_slide_data = null;&#13;
        presenter.playerController = null;&#13;
        presenter.mouseData = null;&#13;
        presenter.audioClock = null;&#13;
        presenter.audioVocClock = null;&#13;
        presenter.configuration = null;&#13;
        presenter.slidesSpanElements = null;&#13;
        presenter.$view.unbind();&#13;
        presenter.view = null;&#13;
        presenter.$view = null;&#13;
    };&#13;
&#13;
    presenter.stopVocabularyAudioPlaying = function AddonTextAudio_stopVocabularyAudioPlaying() {&#13;
        presenter.vocabulary.setTime(0);&#13;
        presenter.vocabulary.pause();&#13;
    };&#13;
&#13;
    presenter.createPreview = function AddonTextAudio_createPreview (view, model) {&#13;
        presenter.initialize(view, model, true);&#13;
    };&#13;
&#13;
    presenter.initialize = function AddonTextAudio_initialize (view, model, isPreview) {&#13;
        presenter.view = view;&#13;
        presenter.$view = $(view);&#13;
        presenter.view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
&#13;
        buzz.defaults.preload = 'auto';&#13;
        buzz.defaults.autoplay = false;&#13;
        buzz.defaults.loop = false;&#13;
&#13;
        presenter.slidesSpanElements = [];&#13;
&#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
        if (!presenter.configuration.isValid) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            delete presenter.play;&#13;
            delete presenter.stop;&#13;
            delete presenter.pause;&#13;
            delete presenter.show;&#13;
            delete presenter.hide;&#13;
            delete presenter.executeCommand;&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.isVisibleByDefault = presenter.configuration.isVisible;&#13;
&#13;
        presenter.createView(view, upgradedModel, isPreview);&#13;
&#13;
        if (!isPreview) {&#13;
            presenter.loadFiles();&#13;
&#13;
            if (presenter.configuration.playSeparateFiles) {&#13;
                presenter.createSeparateAudioFiles(presenter.configuration.separateFiles);&#13;
            }&#13;
&#13;
            presenter.showLoadingArea(presenter.configuration.clickAction);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.roundTimeEntry = function addonTextAudio_roundTimeEntry (time_entry) {&#13;
        var time = time_entry.replace(',', '.').split(':'),&#13;
            minutes = time[0],&#13;
            seconds = parseFloat(time[1]).toFixed(1).split('.');&#13;
&#13;
        if (seconds[0].length &lt; 2) {&#13;
            seconds[0] = '0' + seconds[0];&#13;
        }&#13;
&#13;
        return minutes + ':' + seconds[0] + '.' + seconds[1];&#13;
    };&#13;
&#13;
    presenter.toFrames = function addonTextAudio_toFrames (time_entry) {&#13;
        time_entry =  presenter.roundTimeEntry(time_entry);&#13;
&#13;
        var entry = time_entry.split(':');&#13;
        var minutes = parseInt(entry[0], 10);&#13;
        var seconds = 0;&#13;
        var decyseconds = 0;&#13;
        if (entry[1].indexOf('.') &gt; -1) {&#13;
            var seconds_with_decyseconds = entry[1].split('.');&#13;
            seconds = parseInt(seconds_with_decyseconds[0], 10);&#13;
            decyseconds = parseInt(seconds_with_decyseconds[1], 10);&#13;
            if (decyseconds.toString().length &gt; 1) {&#13;
                decyseconds = parseInt(decyseconds.toString().substr(0,1), 10);&#13;
            }&#13;
        } else {&#13;
            seconds = parseInt(entry[1], 10);&#13;
        }&#13;
        minutes = isNaN(minutes) ? 0 : minutes;&#13;
        seconds = isNaN(seconds) ? 0 : seconds;&#13;
        decyseconds = isNaN(decyseconds) ? 0 : decyseconds;&#13;
&#13;
        return ((minutes * 60 + seconds) * presenter.fps) + decyseconds;&#13;
    };&#13;
&#13;
    presenter.timeEntry = function AddonTextAudio_timeEntry (slide_time) {&#13;
        var entry = slide_time.split('-');&#13;
        if (entry.length != 2) {&#13;
            return {&#13;
                errorCode: 'M03',&#13;
                errorData: slide_time&#13;
            }&#13;
        }&#13;
&#13;
        return {&#13;
            start: presenter.toFrames(entry[0]),&#13;
            end: presenter.toFrames(entry[1])&#13;
        };&#13;
    };&#13;
&#13;
    presenter.createNewSpan = function addonTextAudio_createNewSpan(n1, n2, text) {&#13;
        var $span = $('&lt;span&gt;&lt;/span&gt;').&#13;
            addClass('textelement' + n1).&#13;
            attr('data-selectionid', n1).&#13;
            attr('data-intervalid', n2).&#13;
            html(text);&#13;
        return $span.prop("outerHTML");&#13;
    };&#13;
&#13;
    presenter.parseSlideText = function addonTextAudio_parseSlideText (text) {&#13;
        var elemNumber = 0;&#13;
        var resultHTML = "";&#13;
&#13;
        HTMLParser(text, {&#13;
            start: function (tag, attrs, unary) {&#13;
                resultHTML += "&lt;" + tag;&#13;
                for (var i=0; i&lt;attrs.length; i++) {&#13;
                    resultHTML += " " + attrs[i].name + '="' + attrs[i].escaped + '"';&#13;
                }&#13;
                resultHTML += (unary ? "/" : "") + "&gt;";&#13;
            },&#13;
            end: function (tag) {&#13;
                resultHTML += "&lt;/" + tag + "&gt;";&#13;
            },&#13;
            chars: function (text) {&#13;
                var localParts = text.split('||');&#13;
&#13;
                for (var i=0; i&lt;localParts.length; i++) {&#13;
                    if (localParts[i] !== '') {&#13;
                        resultHTML += presenter.createNewSpan(elemNumber, presenter.globalIntervalNumber, localParts[i]);&#13;
                    }&#13;
&#13;
                    if (i !== localParts.length-1) {&#13;
                        elemNumber++;&#13;
                        presenter.globalIntervalNumber++;&#13;
                    }&#13;
                }&#13;
            }&#13;
        });&#13;
&#13;
        return resultHTML;&#13;
    };&#13;
&#13;
    presenter.validateSlides = function AddonTextAudio_validateSlides (slides) {&#13;
        var validationResult = {&#13;
            isValid: false,&#13;
            value: [{&#13;
                Text: [''],&#13;
                Times: [{start: 0, end: 0}],&#13;
                PosAndDim: ['']&#13;
            }],&#13;
            errorCode: false&#13;
        };&#13;
        var frames = [],&#13;
            interval = 0;&#13;
        for (var i=0; i&lt;slides.length; i++) {&#13;
            var slide = slides[i];&#13;
            var slide_texts = slide.Text.split('||');&#13;
            var parsed_slide_texts = presenter.parseSlideText(slide.Text);&#13;
            var slide_times = slide.Times.split('\n');&#13;
            var slide_intervals = [];&#13;
            var posAndDims;&#13;
&#13;
            if(slide.positionAndDimentions != '' &amp;&amp; slide.positionAndDimentions != undefined){&#13;
                posAndDims = slide.positionAndDimentions.split(';');&#13;
            }else{&#13;
                posAndDims = '';&#13;
            }&#13;
&#13;
            if (slide_texts.length != slide_times.length) {&#13;
                validationResult.errorCode = 'M02';&#13;
                return validationResult;&#13;
            }&#13;
&#13;
            for (var j=0; j&lt;slide_times.length; j++) {&#13;
                var entry = slide_times[j];&#13;
                slide_times[j] = presenter.timeEntry(entry);&#13;
                if (slide_times[j].errorCode) {&#13;
                    validationResult.errorCode = slide_times[j].errorCode;&#13;
                    validationResult.errorData = entry;&#13;
                    return validationResult;&#13;
                }&#13;
&#13;
                var entry_start = slide_times[j].start,&#13;
                    entry_end = slide_times[j].end;&#13;
&#13;
                if (entry_start &gt; entry_end) {&#13;
                    validationResult.errorCode = 'M04';&#13;
                    return validationResult;&#13;
                }&#13;
                if (frames.length &gt; entry_start) {&#13;
                    validationResult.errorData = entry_start;&#13;
                    validationResult.errorCode = 'M05';&#13;
                    return validationResult;&#13;
                }&#13;
&#13;
                var frame;&#13;
                for (frame=frames.length; frame &lt; entry_start; frame++) {&#13;
                    frames[frame] = {&#13;
                        slide_id: -1,&#13;
                        selection_id: -1&#13;
                    }&#13;
                }&#13;
                for (frame=entry_start; frame &lt; entry_end; frame++) {&#13;
                    frames[frame] = {&#13;
                        slide_id: i,&#13;
                        selection_id: j&#13;
                    }&#13;
                }&#13;
                slide_intervals.push(interval);&#13;
                interval++;&#13;
            }&#13;
&#13;
            slide.Text = slide_texts;&#13;
            slide.Times= slide_times;&#13;
            slide.intervals = slide_intervals;&#13;
            slide.html = parsed_slide_texts;&#13;
            slides[i] = slide;&#13;
            slide.positionAndDimentions = posAndDims;&#13;
        }&#13;
        validationResult.isValid = true;&#13;
        validationResult.value = slides;&#13;
        validationResult.frames = frames;&#13;
&#13;
        presenter.slidesLengths = [];&#13;
        presenter.totalNumberOfParts = interval;&#13;
&#13;
        return validationResult;&#13;
    };&#13;
&#13;
    presenter.validateSeparateFiles = function addonTextAudio_validateSeparateFiles (audioFiles) {&#13;
        function addonTextAudio_hasEmptyField (audioFiles) {&#13;
            return audioFiles.filter(function AddonTextAudio_audioFilesFilter (v) {&#13;
                return ModelValidationUtils.isStringEmpty(v.mp3) || ModelValidationUtils.isStringEmpty(v.ogg);&#13;
            }).length &gt; 0;&#13;
        }&#13;
&#13;
        if (ModelValidationUtils.isArrayEmpty(audioFiles)) {&#13;
            return presenter.getErrorObject('SAF01');&#13;
        }&#13;
&#13;
        if (presenter.totalNumberOfParts !== audioFiles.length) {&#13;
            return presenter.getErrorObject('SAF02');&#13;
        }&#13;
&#13;
        if (addonTextAudio_hasEmptyField(audioFiles)) {&#13;
            return presenter.getErrorObject('SAF03');&#13;
        }&#13;
&#13;
        return presenter.getCorrectObject(audioFiles);&#13;
    };&#13;
&#13;
    presenter.validateVocabularyIntervals = function addonTextAudio_validateVocabularyIntervals (intervals) {&#13;
        var returnObj = {&#13;
            intervals: undefined,&#13;
            errorCode: false&#13;
        };&#13;
&#13;
        if (intervals === undefined) {&#13;
            returnObj.errorCode = 'VI03';&#13;
            return returnObj;&#13;
        }&#13;
&#13;
        var vocIntervals = intervals.split('\n');&#13;
            intervals = [];&#13;
        if (vocIntervals.length != presenter.totalNumberOfParts) {&#13;
            returnObj.errorCode = 'VI02';&#13;
            return returnObj;&#13;
        }&#13;
&#13;
        for (var i=0; i&lt;vocIntervals.length; i++) {&#13;
            intervals.push(presenter.timeEntry(vocIntervals[i]));&#13;
        }&#13;
&#13;
        returnObj.intervals = intervals;&#13;
        return returnObj;&#13;
    };&#13;
&#13;
    presenter.validateModel = function addonTextAudio_validateModel (model) {&#13;
        if (model.clickAction === '') {&#13;
            model.clickAction = presenter.ALLOWED_CLICK_BEHAVIOUR.play_from_the_moment;&#13;
        }&#13;
        var validatedAudioFiles = null,&#13;
            transposedBehaviors = presenter.transposeDict(presenter.ALLOWED_CLICK_BEHAVIOUR),&#13;
            clickAction = transposedBehaviors[model.clickAction];&#13;
        presenter.originalFile .mp3 = model.mp3;&#13;
        presenter.originalFile .ogg = model.ogg;&#13;
&#13;
        if (!presenter.originalFile .ogg &amp;&amp; !presenter.originalFile .mp3) {&#13;
            return presenter.getErrorObject('M01');&#13;
        }&#13;
&#13;
        presenter.totalNumberOfParts = 0;&#13;
        var validatedSlides = presenter.validateSlides(model.Slides);&#13;
        var validatedVocabularyIntervals = presenter.validateVocabularyIntervals(model.vocabulary_intervals);&#13;
        if (validatedSlides.errorCode) {&#13;
            return presenter.getErrorObject(validatedSlides.errorCode);&#13;
        }&#13;
&#13;
        if (clickAction == 'play_vocabulary_file' || clickAction == 'play_interval_or_vocabulary') {&#13;
            validatedAudioFiles = presenter.validateSeparateFiles(model.separateFiles);&#13;
            if (!validatedAudioFiles.isValid) return presenter.getErrorObject(validatedAudioFiles.errorCode);&#13;
        } else {&#13;
            validatedAudioFiles = presenter.getCorrectObject(false);&#13;
        }&#13;
&#13;
        if (clickAction == 'play_vocabulary_interval') {&#13;
            presenter.vocabularyFile.mp3 = model.vocabulary_mp3;&#13;
            presenter.vocabularyFile.ogg = model.vocabulary_ogg;&#13;
            if (!presenter.vocabularyFile.mp3 &amp;&amp; !presenter.vocabularyFile.ogg) {&#13;
                return presenter.getErrorObject('VI01');&#13;
            }&#13;
            if (validatedVocabularyIntervals.errorCode) {&#13;
                return presenter.getErrorObject(validatedVocabularyIntervals.errorCode);&#13;
            }&#13;
        }&#13;
&#13;
        if(model.showSlides == undefined){&#13;
            model.showSlides = "Show current slide";&#13;
        }&#13;
&#13;
        return {&#13;
            isValid: true,&#13;
            isVisible: ModelValidationUtils.validateBoolean(model["Is Visible"]),&#13;
            onEndEventCode: model.onEnd,&#13;
            enableLoop: ModelValidationUtils.validateBoolean(model.enableLoop),&#13;
            displayTime: ModelValidationUtils.validateBoolean(model.displayTime),&#13;
            controls: model.controls,&#13;
            slides: validatedSlides.value,&#13;
            frames: validatedSlides.frames,&#13;
            clickAction: clickAction,&#13;
            playPart: (clickAction == 'play_interval' || clickAction == 'play_interval_or_vocabulary'),&#13;
            separateFiles: validatedAudioFiles.value,&#13;
            playSeparateFiles: (clickAction == 'play_vocabulary_file' || clickAction == 'play_interval_or_vocabulary'),&#13;
            vocabulary_mp3: model.vocabulary_mp3,&#13;
            vocabulary_ogg: model.vocabulary_ogg,&#13;
            vocabularyIntervals: validatedVocabularyIntervals.intervals,&#13;
            isClickDisabled: ModelValidationUtils.validateBoolean(model.isClickDisabled),&#13;
            showSlides: model.showSlides&#13;
        };&#13;
    };&#13;
&#13;
    presenter.executeCommand = function addonTextAudio_executeCommand (name, params) {&#13;
        var commands = {&#13;
            'play': presenter.play,&#13;
            'stop': presenter.stop,&#13;
            'pause': presenter.pause,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.setVisibility = function AddonTextAudio_setVisibility (isVisible) {&#13;
        presenter.$view.css("visibility", isVisible ? "visible" : "hidden");&#13;
    };&#13;
&#13;
    presenter.pauseZero = function addonTextAudio_pauseZero () {&#13;
        presenter.stopTimeMeasurement();&#13;
&#13;
        if (!presenter.audio.paused &amp;&amp; presenter.isLoaded) {&#13;
            presenter.stopClicked = true;&#13;
            presenter.audio.pause();&#13;
            presenter.audio.currentTime = 0;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.play = function addonTextAudio_play () {&#13;
        presenter.startTimeMeasurement();&#13;
        if (presenter.audio.paused) {&#13;
            presenter.stopClicked = false;&#13;
            presenter.pauseZero();&#13;
            presenter.audio.play();&#13;
            if (presenter.configuration.controls === "Custom") {&#13;
                presenter.$playPauseBtn.&#13;
                    removeClass('textaudio-play-btn').&#13;
                    addClass('textaudio-pause-btn');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stop = function addonTextAudio_stop () {&#13;
        if (presenter.configuration.controls === "Custom" &amp;&amp; presenter.isLoaded) {&#13;
            presenter.stopClicked = true;&#13;
            presenter.$playPauseBtn.&#13;
                addClass('textaudio-play-btn').&#13;
                removeClass('textaudio-pause-btn');&#13;
            if (presenter.audio.paused) {&#13;
                presenter.stopClicked = true;&#13;
                presenter.audio.currentTime = 0;&#13;
            }&#13;
        }&#13;
        presenter.removeMarkFromItems();&#13;
        presenter.pauseZero();&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.audio.addEventListener("loadeddata", presenter.stopAudioLoadedData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.stopAudioLoadedData = function AddonTextAudio_StopAudioLoadedData () {&#13;
        presenter.isLoaded = true;&#13;
        presenter.stop();&#13;
    };&#13;
&#13;
    presenter.playPartStop = function addonTextAudio_playPartStop () {&#13;
        presenter.pauseZero();&#13;
        if (!presenter.isLoaded) {&#13;
            presenter.audio.addEventListener("loadeddata", presenter.playAudioLoadedData);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.playAudioLoadedData = function AddonTextAudio_playAudioLoadedData () {&#13;
        presenter.isLoaded = true;&#13;
        presenter.stop();&#13;
    };&#13;
&#13;
    presenter.pause = function addonTextAudio_pause () {&#13;
        presenter.stopTimeMeasurement();&#13;
&#13;
        if (!presenter.audio.paused) {&#13;
            presenter.audio.pause();&#13;
            if (presenter.configuration.controls === "Custom") {&#13;
                presenter.$playPauseBtn.&#13;
                    removeClass('textaudio-pause-btn').&#13;
                    addClass('textaudio-play-btn');&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.show = function addonTextAudio_show () {&#13;
        presenter.setVisibility(true);&#13;
        presenter.configuration.isVisible = true;&#13;
    };&#13;
&#13;
    presenter.hideAddon = function addonTextAudio_hideAddon () {&#13;
        presenter.setVisibility(false);&#13;
        presenter.configuration.isVisible = false;&#13;
    };&#13;
&#13;
    presenter.hide = function addonTextAudio_hide () {&#13;
        presenter.stop();&#13;
        presenter.hideAddon();&#13;
    };&#13;
&#13;
    presenter.reset = function addonTextAudio_reset () {&#13;
        presenter.stop();&#13;
&#13;
        presenter.hasBeenStarted = false;&#13;
        presenter.isPlaying = false;&#13;
        presenter.playedByClick = false;&#13;
&#13;
        presenter.configuration.isVisible = presenter.isVisibleByDefault;&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hideAddon();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.clearSelection = function addonTextAudio_clearSelection () {&#13;
        presenter.$view.find('.textaudio-text span.active').removeClass('active');&#13;
    };&#13;
&#13;
    presenter.getState = function addonTextAudio_getState () {&#13;
        return JSON.stringify({&#13;
            isVisible : presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setState = function addonTextAudio_setState (stateString) {&#13;
        if (ModelValidationUtils.isStringEmpty(stateString)) return false;&#13;
        if (!presenter.configuration.isValid) return false;&#13;
&#13;
        presenter.stop();&#13;
&#13;
        if (JSON.parse(stateString).isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hideAddon();&#13;
        }&#13;
&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.executeOnEndEvent = function AddonTextAudio_executeOnEndEvent () {&#13;
        if (presenter.configuration.onEndEventCode) {&#13;
            presenter.playerController.getCommands().executeEventCode(presenter.configuration.onEndEventCode);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>