<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="crossword" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property isLocalized="true" name="Crossword" nameLabel="crossword_property_crossword" type="text"/>
		<property name="Columns" nameLabel="crossword_property_columns" type="string"/>
		<property name="Rows" nameLabel="crossword_property_rows" type="string"/>
		<property name="Cell width" nameLabel="crossword_property_cell_width" type="string"/>
		<property name="Cell height" nameLabel="crossword_property_cell_height" type="string"/>
		<property name="Blank cells border color" nameLabel="crossword_property_blank_cells_border_color" type="string"/>
		<property name="Blank cells border style" nameLabel="crossword_property_blank_cells_border_style" type="{solid, dotted, dashed}"/>
		<property name="Blank cells border width" nameLabel="crossword_property_blank_cells_border_width" type="string"/>
		<property name="Letter cells border color" nameLabel="crossword_property_letter_cells_border_color" type="string"/>
		<property name="Letter cells border style" nameLabel="crossword_property_letter_cells_border_style" type="{solid, dotted, dashed}"/>
		<property name="Letter cells border width" nameLabel="crossword_property_letter_cells_border_width" type="string"/>
		<property name="Word numbers" nameLabel="crossword_property_word_numbers" type="{both, horizontal, vertical, none}"/>
		<property name="Marked column index" nameLabel="crossword_property_marked_column_index" type="string"/>
		<property name="Marked row index" nameLabel="crossword_property_marked_row_index" type="string"/>
        <property displayName="Block wrong answers" name="blockWrongAnswers" nameLabel="crossword_property_block_wrong_answers" type="boolean"/>
	</model>
<css>.crossword_container {&#13;
    position: absolute;&#13;
    top: 50%;&#13;
    left: 50%;&#13;
}&#13;
&#13;
.crossword_container .cell_container {&#13;
    float: left;&#13;
    position: relative;&#13;
}&#13;
&#13;
.crossword_container .cell {&#13;
    position: absolute;&#13;
    top: 0px;&#13;
    left: 0px;&#13;
    right: 0px;&#13;
    bottom: 0px;&#13;
}&#13;
&#13;
.crossword_container .cell_letter {&#13;
    background: white;&#13;
}&#13;
&#13;
.crossword_container .cell_valid {&#13;
    background: #00ff00;&#13;
}&#13;
&#13;
.crossword_container .cell_invalid {&#13;
    background: #aa0000;&#13;
}&#13;
&#13;
.crossword_container .cell_invalid input {&#13;
    color: #fff;&#13;
}&#13;
&#13;
.crossword_container .cell_container_blank {&#13;
    background: black;&#13;
}&#13;
&#13;
.crossword_container .cell_letter input {&#13;
    position: absolute;&#13;
    top: 0;&#13;
    left: 0;&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    text-align: center;&#13;
    background: transparent;&#13;
    border: none;&#13;
    -webkit-appearance: none;&#13;
    text-transform: uppercase;&#13;
}&#13;
&#13;
.crossword_container .cell .word_number {&#13;
    position: absolute;&#13;
    top: 2px;&#13;
    left: 2px;&#13;
    font-size: 6pt;&#13;
}&#13;
</css><view/><preview/><presenter>function Addoncrossword_create(){&#13;
    var presenter = function() {};&#13;
&#13;
    var playerController;&#13;
    var eventBus;&#13;
&#13;
    presenter.rowCount         = null;&#13;
    presenter.columnCount      = null;&#13;
    presenter.cellHeight       = null;&#13;
    presenter.cellWidth        = null;&#13;
    presenter.maxScore         = null;&#13;
    presenter.score            = null;&#13;
    presenter.id               = null;&#13;
    presenter.blankCellsBorderStyle  = "solid";&#13;
    presenter.blankCellsBorderWidth  = 0;&#13;
    presenter.blankCellsBorderColor  = "transparent";&#13;
    presenter.letterCellsBorderStyle = "solid";&#13;
    presenter.letterCellsBorderWidth = 0;&#13;
    presenter.letterCellsBorderColor = "transparent";&#13;
    presenter.wordNumbersHorizontal = false;&#13;
    presenter.wordNumbersVertical = false;&#13;
    presenter.disableAutomaticWordNumbering = false;&#13;
    presenter.markedColumnIndex = 0;&#13;
    presenter.markedRowIndex = 0;&#13;
    presenter.maxTabIndex = 0;&#13;
    presenter.SPECIAL_KEYS = {&#13;
        DELETE: 46,&#13;
        BACKSPACE: 8,&#13;
        TAB: 9,&#13;
        ESCAPE: 27,&#13;
        SHIFT: 16,&#13;
        CTRL: 17&#13;
    };&#13;
&#13;
    presenter.numberOfConstantLetters = 0;&#13;
&#13;
    presenter.ERROR_MESSAGES = {&#13;
        ROWS_NOT_SPECIFIED:                     "Amount of rows is not specified",&#13;
        COLUMNS_NOT_SPECIFIED:                  "Amount of columns is not specified",&#13;
        INVALID_MARKED_COLUMN_INDEX:            "Marked column index cannot be negative, use 0 to disable",&#13;
        INVALID_MARKED_ROW_INDEX:               "Marked row index cannot be negative, use 0 to disable",&#13;
        CELL_WIDTH_NOT_SPECIFIED:               "Cell width is not specified",&#13;
        CELL_HEIGHT_NOT_SPECIFIED:              "Cell height is not specified",&#13;
        INVALID_BLANK_CELLS_BORDER_WIDTH:       "Blank cells border width must be greater on equal to 0",&#13;
        INVALID_LETTER_CELLS_BORDER_WIDTH:      "Letter cells border width must be greater on equal to 0",&#13;
        INVALID_AMOUNT_OF_ROWS_IN_CROSSWORD:    "Amount of lines (that act as rows) in the specified Crossword is different that amount of rows you have specified in Properties",&#13;
        INVALID_AMOUNT_OF_COLUMNS_IN_CROSSWORD: "Amount of characters (that act as columns) in row %row% of specified Crossword is different that amount of columns you have specified in Properties",&#13;
        DOUBLED_EXCLAMATION_MARK:               "You cannot type 2 exclamation marks in a row",&#13;
        LAST_CHARACTER_EXCLAMATION_MARK:        "You cannot type exclamation mark at the end of line",&#13;
        EXCLAMATION_MARK_BEFORE_EMPTY_FIELD:    "You cannot type exclamation mark before empty field"&#13;
    };&#13;
&#13;
    presenter.VALIDATION_MODE = {&#13;
        COUNT_SCORE: 0,&#13;
        SHOW_ERRORS: 1&#13;
    };&#13;
&#13;
    presenter.isModelValid = true;&#13;
&#13;
    presenter.showErrorMessage = function(message, substitutions) {&#13;
        var errorContainer;&#13;
        if(typeof(substitutions) == 'undefined') {&#13;
            errorContainer = '&lt;p&gt;' + message + '&lt;/p&gt;';&#13;
        } else {&#13;
            var messageSubst = message;&#13;
            for (var key in substitutions) {&#13;
                messageSubst = messageSubst.replace('%' + key + '%', substitutions[key]);&#13;
            }&#13;
            errorContainer = '&lt;p&gt;' + messageSubst + '&lt;/p&gt;';&#13;
        }&#13;
&#13;
        presenter.$view.html(errorContainer);&#13;
    };&#13;
&#13;
    presenter.prepareGrid = function(model) {&#13;
        presenter.tabIndexBase = ($("div.crossword_container").length * 5000) + 5000;&#13;
        presenter.maxScore = 0;&#13;
        presenter.crossword = [];&#13;
&#13;
        var rows = model['Crossword'].split("\n");&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            var r = [];&#13;
            var numberOfExclamationMarks = rows[i].match(/!/g) == null ? 0 : rows[i].match(/!/g).length;&#13;
            presenter.numberOfConstantLetters += numberOfExclamationMarks;&#13;
            for(var j = 0; j &lt; presenter.columnCount + numberOfExclamationMarks; j++) {&#13;
                if (rows[i][j] === '!') {&#13;
                    j++;&#13;
                    r.push('!' + rows[i][j].toUpperCase());&#13;
                } else {&#13;
                    r.push(rows[i][j].toUpperCase());&#13;
                }&#13;
            }&#13;
&#13;
            presenter.crossword.push(r);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.isHorizontalWordBegin = function(i, j) {&#13;
        if(!presenter.wordNumbersHorizontal)&#13;
            return false;&#13;
&#13;
        return (&#13;
            // Skip empty cells&#13;
            presenter.crossword[i][j] != ' ' &amp;&amp;&#13;
&#13;
                // We don't have a letter on the left&#13;
                (j === 0 ||  presenter.crossword[i][j-1] == ' ') &amp;&amp;&#13;
&#13;
                // We do have a letter on the right&#13;
                (presenter.columnCount &gt; j+1 &amp;&amp; presenter.crossword[i][j+1] != ' '));&#13;
    };&#13;
&#13;
    presenter.isVerticalWordBegin = function(i, j) {&#13;
        if(!presenter.wordNumbersVertical)&#13;
            return false;&#13;
&#13;
        return (&#13;
            // Skip empty cells&#13;
            presenter.crossword[i][j] != ' ' &amp;&amp;&#13;
&#13;
                // We don't have a letter above&#13;
                (i === 0 ||  presenter.crossword[i-1][j] == ' ') &amp;&amp;&#13;
&#13;
                // We do have a letter below&#13;
                (presenter.rowCount &gt; i+1 &amp;&amp; presenter.crossword[i+1][j] != ' '));&#13;
    };&#13;
&#13;
    presenter.getPosition = function($elem) {&#13;
        function getPositionFrom(classes, dim) {&#13;
            return classes.reduce(function(res, currentElem) {&#13;
                return res === null ? currentElem.match(new RegExp(dim + "(\\d+)")) : res;&#13;
            }, null)[1];&#13;
        }&#13;
&#13;
        var classes = $elem.attr('class').split(' ');&#13;
&#13;
        return {&#13;
            x: parseInt(getPositionFrom(classes, 'cell_column_'), 10),&#13;
            y: parseInt(getPositionFrom(classes, 'cell_row_'), 10)&#13;
        }&#13;
    };&#13;
&#13;
    var dictValues = function(dict) {&#13;
        var values = [];&#13;
        var keys = Object.keys(dict);&#13;
        keys.filter(function(key){&#13;
            values.push(dict[key])&#13;
        });&#13;
        return values;&#13;
    };&#13;
&#13;
    presenter.SPECIAL_KEYS_CODES = dictValues(presenter.SPECIAL_KEYS);&#13;
&#13;
    var validateSpecialKey = function(event) {&#13;
        // Allow: backspace, delete, tab, shift and escape&#13;
        if (presenter.SPECIAL_KEYS_CODES.indexOf(event.keyCode) &gt; -1 ||&#13;
            // Allow:  dot&#13;
            (event.keyCode == 190) ||&#13;
            // Allow: Ctrl+A&#13;
            (event.keyCode == 65 &amp;&amp; event.ctrlKey === true) ||&#13;
            // Allow: home, end, left, right&#13;
            (event.keyCode &gt;= 35 &amp;&amp; event.keyCode &lt;= 39)) {&#13;
            // let it happen, don't do anything&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    };&#13;
&#13;
    presenter.onCellInputKeyUp = function(event) {&#13;
        if (validateSpecialKey(event)) {&#13;
            return&#13;
        }&#13;
&#13;
        var target = event.target;&#13;
        var $target = $(target);&#13;
&#13;
        target.value = target.value.toUpperCase();&#13;
&#13;
        if ($target.val()) {&#13;
            var next_tab_index = target.tabIndex +1;&#13;
            if (presenter.blockWrongAnswers) {&#13;
                var usersLetter = target.value;&#13;
                var pos = presenter.getPosition($target.parent(''));&#13;
                var correctLetter = presenter.crossword[pos.y][pos.x][0];&#13;
                if (usersLetter !== correctLetter) {&#13;
                    presenter.sendScoreEvent(pos, usersLetter, false);&#13;
                    target.value = '';&#13;
                    return;&#13;
                }&#13;
            }&#13;
&#13;
            if (next_tab_index &lt; presenter.maxTabIndex) {&#13;
                presenter.$view.find('[tabindex=' + next_tab_index + ']').focus();&#13;
            } else {&#13;
                $target.blur();&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.onCellInputKeyDown = function(event) {&#13;
        if (event.keyCode == presenter.SPECIAL_KEYS.BACKSPACE) {&#13;
            var $target = $(event.target);&#13;
            if (!$target.val()) {&#13;
                var previous_tab_index = event.target.tabIndex - 1;&#13;
                if (previous_tab_index &gt;= presenter.tabIndexBase) {&#13;
                    var previous_element = presenter.$view.find('[tabindex=' + previous_tab_index + ']');&#13;
                    previous_element.focus();&#13;
                    previous_element.val('');&#13;
                    return;&#13;
                }&#13;
            }&#13;
        }&#13;
        if (validateSpecialKey(event)) {&#13;
            return&#13;
        }&#13;
&#13;
        // clear previous value&#13;
        var $target = $(event.target);&#13;
        if ($target.val()) {&#13;
            $target.val("");&#13;
        }&#13;
&#13;
    };&#13;
&#13;
    presenter.onCellInputFocus = function(event) {&#13;
        event.target.select();&#13;
        var length = $(event.target).val().length;&#13;
        setCaretPosition(event.target, length + 1);&#13;
        if(length &gt; 1) {&#13;
            $(event.target).val($(event.target).val().substring(1, 2));&#13;
        }&#13;
        $(event.target).val($(event.target).val().toUpperCase());&#13;
    };&#13;
 &#13;
    presenter.onCellInputMouseUp = function(event) {&#13;
        event.preventDefault();&#13;
    };&#13;
&#13;
    presenter.onCellInputFocusOut = function(event) {&#13;
        var usersLetter = event.target.value;&#13;
        var pos = presenter.getPosition($(event.target).parent(''));&#13;
        var correctLetter = presenter.crossword[pos.y][pos.x][0];&#13;
        var isOk = usersLetter === correctLetter;&#13;
        presenter.sendScoreEvent(pos, usersLetter, isOk);&#13;
        var score = isOk ? 1 : 0;&#13;
        if(score == 0 &amp;&amp; presenter.blockWrongAnswers){&#13;
            event.target.value = "";&#13;
        }&#13;
        if (isOk) {&#13;
            var result = presenter.validateWord(pos);&#13;
            if (result.valid) {&#13;
                presenter.sendCorrectWordEvent(result.word, result.item);&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    function setCaretPosition(elem, caretPos) {&#13;
        var range;&#13;
&#13;
        if (elem.createTextRange) {&#13;
            range = elem.createTextRange();&#13;
            range.move('character', caretPos);&#13;
            range.select();&#13;
        } else {&#13;
            elem.focus();&#13;
            if (elem.selectionStart !== undefined) {&#13;
                elem.setSelectionRange(caretPos, caretPos);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    presenter.createGrid = function() {&#13;
        var wordNumberCounter = 1;&#13;
&#13;
        var gridContainer = $('&lt;div class="crossword_container"&gt;&lt;/div&gt;');&#13;
        gridContainer&#13;
            .css({ width:      presenter.columnCount * presenter.cellWidth + 'px',&#13;
                height:     presenter.rowCount * presenter.cellHeight + 'px',&#13;
                marginLeft: -1 * Math.round(presenter.columnCount * presenter.cellWidth / 2) + 'px',&#13;
                marginTop:  -1 * Math.round(presenter.rowCount * presenter.cellHeight / 2) + 'px' });&#13;
&#13;
        var tabIndexOffset = 0;&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                var cellContainer = $('&lt;div class="cell_container"&gt;&lt;/div&gt;');&#13;
                cellContainer.css({ width:  presenter.cellWidth + 'px',&#13;
                    height: presenter.cellHeight + 'px' });&#13;
&#13;
                var cell = $('&lt;div class="cell"&gt;&lt;/div&gt;')&#13;
                    .addClass('cell_' + i + 'x' + j)&#13;
                    .addClass('cell_row_' + i)&#13;
                    .addClass('cell_column_' + j);&#13;
&#13;
                if(presenter.markedRowIndex &gt; 0 &amp;&amp; presenter.markedRowIndex == i+1) {&#13;
                    cell.addClass('cell_row_marked');&#13;
                }&#13;
&#13;
                if(presenter.markedColumnIndex &gt; 0 &amp;&amp; presenter.markedColumnIndex == j+1) {&#13;
                    cell.addClass('cell_column_marked');&#13;
                }&#13;
&#13;
                cellContainer.append(cell);&#13;
&#13;
                if(presenter.crossword[i][j] == ' ') {&#13;
                    cell.addClass('cell_blank');&#13;
                    cellContainer.addClass('cell_container_blank');&#13;
                } else {&#13;
                    cell.addClass('cell_letter');&#13;
                    cellContainer.addClass('cell_container_letter');&#13;
&#13;
                    var input = $('&lt;input type="text" maxlength="1" size="1"/&gt;');&#13;
&#13;
                    if (presenter.crossword[i][j][0] === '!') {&#13;
                        input&#13;
                            .val(presenter.crossword[i][j][1])&#13;
                            .prop('disabled', true);&#13;
&#13;
                        cell.addClass("cell_constant_letter");&#13;
                        cell.addClass("");&#13;
                    } else {&#13;
                        input&#13;
                            .attr('tabIndex', presenter.tabIndexBase + tabIndexOffset++)&#13;
                            .keyup(presenter.onCellInputKeyUp)&#13;
                            .keydown(presenter.onCellInputKeyDown)&#13;
                            .focus(presenter.onCellInputFocus)&#13;
                            .mouseup(presenter.onCellInputMouseUp)&#13;
                            .focusout(presenter.onCellInputFocusOut)&#13;
                            .click(function(e) { e.stopPropagation(); });&#13;
                    }&#13;
&#13;
                    if(presenter.preview) {&#13;
                        input.attr({&#13;
                            value: presenter.crossword[i][j].toUpperCase(),&#13;
                            disabled: true&#13;
                        });&#13;
                    }&#13;
&#13;
                    cell.append(input);&#13;
&#13;
                    var horizontalWordBegin = presenter.isHorizontalWordBegin(i, j);&#13;
                    var verticalWordBegin = presenter.isVerticalWordBegin(i, j);&#13;
&#13;
                    if (horizontalWordBegin) presenter.maxScore++;&#13;
                    if (verticalWordBegin) presenter.maxScore++;&#13;
&#13;
                    if(horizontalWordBegin || verticalWordBegin) {&#13;
                        cell.addClass('cell_word_begin');&#13;
&#13;
                        if(horizontalWordBegin)&#13;
                            cell.addClass('cell_word_begin_horizontal');&#13;
&#13;
                        if(verticalWordBegin)&#13;
                            cell.addClass('cell_word_begin_vertical');&#13;
&#13;
                        if(!presenter.disableAutomaticWordNumbering) {&#13;
                            var wordNumber = $('&lt;div class="word_number"&gt;&lt;/div&gt;').html(wordNumberCounter++);&#13;
&#13;
                            cell.append(wordNumber);&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
                presenter.maxTabIndex = presenter.tabIndexBase + tabIndexOffset;&#13;
&#13;
                // Cell borders&#13;
                var borderStyle;&#13;
                var borderWidth;&#13;
                var borderColor;&#13;
&#13;
                if(presenter.crossword[i][j] != ' ') {&#13;
                    borderStyle = presenter.letterCellsBorderStyle;&#13;
                    borderWidth = presenter.letterCellsBorderWidth;&#13;
                    borderColor = presenter.letterCellsBorderColor;&#13;
&#13;
                } else {&#13;
                    borderStyle = presenter.blankCellsBorderStyle;&#13;
                    borderWidth = presenter.blankCellsBorderWidth;&#13;
                    borderColor = presenter.blankCellsBorderColor;&#13;
                }&#13;
&#13;
                if(i === 0 || presenter.crossword[i-1][j] == ' ') { // Outer top border&#13;
                    cell.css({ borderTopStyle: borderStyle,&#13;
                        borderTopWidth: (borderWidth * 2) + 'px',&#13;
                        borderTopColor: borderColor,&#13;
                        top:            (borderWidth * -1) + 'px' });&#13;
                } else { // Inner top border&#13;
                    cell.css({ borderTopStyle: borderStyle,&#13;
                        borderTopWidth: borderWidth + 'px',&#13;
                        borderTopColor: borderColor });&#13;
                }&#13;
&#13;
                if(i === presenter.rowCount - 1 || presenter.crossword[i+1][j] == ' ') { // Outer bottom border&#13;
                    cell.css({ borderBottomStyle: borderStyle,&#13;
                        borderBottomWidth: (borderWidth * 2) + 'px',&#13;
                        borderBottomColor: borderColor,&#13;
                        bottom:            (borderWidth * -1) + 'px' });&#13;
                } else { // Inner bottom border&#13;
                    cell.css({ borderBottomStyle: borderStyle,&#13;
                        borderBottomWidth: borderWidth + 'px',&#13;
                        borderBottomColor: borderColor });&#13;
                }&#13;
&#13;
                if(j === 0 || presenter.crossword[i][j-1] == ' ') { // Outer left border&#13;
                    cell.css({ borderLeftStyle: borderStyle,&#13;
                        borderLeftWidth: (borderWidth * 2) + 'px',&#13;
                        borderLeftColor: borderColor,&#13;
                        left:            (borderWidth * -1) + 'px' });&#13;
                } else { // Inner left border&#13;
                    cell.css({ borderLeftStyle: borderStyle,&#13;
                        borderLeftWidth: borderWidth + 'px',&#13;
                        borderLeftColor: borderColor });&#13;
                }&#13;
&#13;
                if(j === presenter.columnCount - 1 || presenter.crossword[i][j+1] == ' ') { // Outer right border&#13;
                    cell.css({ borderRightStyle: borderStyle,&#13;
                        borderRightWidth: (borderWidth * 2) + 'px',&#13;
                        borderRightColor: borderColor,&#13;
                        right:            (borderWidth * -1) + 'px' });&#13;
                } else { // Inner right border&#13;
                    cell.css({ borderRightStyle: borderStyle,&#13;
                        borderRightWidth: borderWidth + 'px',&#13;
                        borderRightColor: borderColor });&#13;
                }&#13;
&#13;
                // Additional classes&#13;
                if(j == 0) {&#13;
                    cell.addClass('cell_first_in_row');&#13;
                } else if(j == presenter.columnCount - 1) {&#13;
                    cell.addClass('cell_last_in_row');&#13;
                }&#13;
&#13;
                if(i == 0) {&#13;
                    cell.addClass('cell_first_in_column');&#13;
                } else if(i == presenter.rowCount - 1) {&#13;
                    cell.addClass('cell_last_in_column');&#13;
                }&#13;
&#13;
                gridContainer.append(cellContainer);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.$view.append(gridContainer);&#13;
    };&#13;
&#13;
    function returnErrorMessage(errorMessage, errorMessageSubstitutions) {&#13;
        return {&#13;
            isError: true,&#13;
            errorMessage: errorMessage,&#13;
            errorMessageSubstitutions: errorMessageSubstitutions&#13;
        }&#13;
    }&#13;
&#13;
    presenter.readConfiguration = function(model) {&#13;
        if(typeof(model['Blank cells border color']) != "undefined" &amp;&amp; model['Blank cells border color'] !== "")&#13;
            presenter.blankCellsBorderColor = model['Blank cells border color'];&#13;
&#13;
        if(typeof(model['Blank cells border width']) != "undefined" &amp;&amp; model['Blank cells border width'] !== "")&#13;
            presenter.blankCellsBorderWidth = parseInt(model['Blank cells border width']);&#13;
&#13;
        if(typeof(model['Blank cells border style']) != "undefined" &amp;&amp; model['Blank cells border style'] !== "")&#13;
            presenter.blankCellsBorderStyle = model['Blank cells border style'];&#13;
&#13;
        if(typeof(model['Letter cells border color']) != "undefined" &amp;&amp; model['Letter cells border color'] !== "")&#13;
            presenter.letterCellsBorderColor = model['Letter cells border color'];&#13;
&#13;
        if(typeof(model['Letter cells border width']) != "undefined" &amp;&amp; model['Letter cells border width'] !== "")&#13;
            presenter.letterCellsBorderWidth = parseInt(model['Letter cells border width']);&#13;
&#13;
        if(typeof(model['Letter cells border style']) != "undefined" &amp;&amp; model['Letter cells border style'] !== "")&#13;
            presenter.letterCellsBorderStyle = model['Letter cells border style'];&#13;
&#13;
        if(typeof(model['Word numbers']) != "undefined") {&#13;
            if(model['Word numbers'] == "horizontal" || model['Word numbers'] == "both" || model['Word numbers'] === "")&#13;
                presenter.wordNumbersHorizontal = true;&#13;
&#13;
            if(model['Word numbers'] == "vertical" || model['Word numbers'] == "both" || model['Word numbers'] === "")&#13;
                presenter.wordNumbersVertical = true;&#13;
        }&#13;
&#13;
        if(typeof(model['Marked column index']) != "undefined" &amp;&amp; model['Marked column index'] !== "") {&#13;
            presenter.markedColumnIndex = parseInt(model['Marked column index']);&#13;
            if(presenter.markedColumnIndex &lt; 0) {&#13;
                return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_MARKED_COLUMN_INDEX)&#13;
            }&#13;
        }&#13;
&#13;
        if(typeof(model['Marked row index']) != "undefined" &amp;&amp; model['Marked row index'] !== "") {&#13;
            presenter.markedRowIndex = parseInt(model['Marked row index']);&#13;
            if(presenter.markedRowIndex &lt; 0) {&#13;
                return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_MARKED_ROW_INDEX);&#13;
            }&#13;
        }&#13;
&#13;
        presenter.disableAutomaticWordNumbering = model['Disable automatic word numberin'] == 'True';&#13;
&#13;
        if(presenter.blankCellsBorderWidth &lt; 0) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_BLANK_CELLS_BORDER_WIDTH);&#13;
        }&#13;
&#13;
        if(presenter.letterCellsBorderWidth &lt; 0) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_LETTER_CELLS_BORDER_WIDTH);&#13;
        }&#13;
&#13;
        if(parseInt(model['Columns']) &lt;= 0 || isNaN(parseInt(model['Columns'])) ) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.COLUMNS_NOT_SPECIFIED);&#13;
        }&#13;
&#13;
        if(parseInt(model['Rows']) &lt;= 0 || isNaN(parseInt(model['Rows']))) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.ROWS_NOT_SPECIFIED);&#13;
        }&#13;
&#13;
        if(parseInt(model['Cell width']) &lt;= 0 || isNaN(parseInt(model['Cell width'])) ) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.CELL_WIDTH_NOT_SPECIFIED);&#13;
        }&#13;
&#13;
        if(parseInt(model['Cell height']) &lt;= 0 || isNaN(parseInt(model['Cell height']))) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.CELL_HEIGHT_NOT_SPECIFIED);&#13;
        }&#13;
&#13;
        presenter.rowCount        = parseInt(model['Rows']);&#13;
        presenter.columnCount     = parseInt(model['Columns']);&#13;
        presenter.cellWidth       = parseInt(model['Cell width']);&#13;
        presenter.cellHeight      = parseInt(model['Cell height']);&#13;
&#13;
        var rows = model['Crossword'].split("\n");&#13;
        if(rows.length != presenter.rowCount) {&#13;
            return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_AMOUNT_OF_ROWS_IN_CROSSWORD);&#13;
        }&#13;
&#13;
        for(var i = 0; i &lt; rows.length; i++) {&#13;
            if(rows[i].replace(/!/g, "").length != presenter.columnCount) {&#13;
                return returnErrorMessage(presenter.ERROR_MESSAGES.INVALID_AMOUNT_OF_COLUMNS_IN_CROSSWORD, { row : i + 1 });&#13;
            }&#13;
&#13;
            var line = rows[i];&#13;
            var previous = line[0];&#13;
&#13;
            if (line.slice(-1) === '!') {&#13;
                return returnErrorMessage(presenter.ERROR_MESSAGES.LAST_CHARACTER_EXCLAMATION_MARK);&#13;
            }&#13;
&#13;
            for (var j=1; j&lt;line.length; j++) {&#13;
                if (previous === '!') {&#13;
                    switch (line[j]) {&#13;
                        case '!': return returnErrorMessage(presenter.ERROR_MESSAGES.DOUBLED_EXCLAMATION_MARK); break;&#13;
                        case ' ': return returnErrorMessage(presenter.ERROR_MESSAGES.EXCLAMATION_MARK_BEFORE_EMPTY_FIELD); break;&#13;
                        default: break;&#13;
                    }&#13;
                }&#13;
                previous = line[j];&#13;
            }&#13;
        }&#13;
&#13;
        presenter.blockWrongAnswers = presenter.isBlockWrongAnswers(model);&#13;
&#13;
        return {&#13;
            isError: false&#13;
        };&#13;
    };&#13;
&#13;
    presenter.destroyCommands = function () {&#13;
        delete presenter.executeCommand;&#13;
        delete presenter.isAllOK;&#13;
        delete presenter.isAttempted;&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.getScore;&#13;
        delete presenter.getErrorCount;&#13;
        delete presenter.setShowErrorsMode;&#13;
        delete presenter.setWorkMode;&#13;
        delete presenter.reset;&#13;
        delete presenter.getState;&#13;
        delete presenter.setState;&#13;
        presenter.isModelValid = false;&#13;
    };&#13;
&#13;
    presenter.isBlockWrongAnswers = function (model) {&#13;
        return ModelValidationUtils.validateBoolean(model.blockWrongAnswers);&#13;
    };&#13;
&#13;
    presenter.initializeLogic = function(view, model) {&#13;
        presenter.$view = $(view);&#13;
        presenter.ID = model.ID;&#13;
&#13;
        var configuration = presenter.readConfiguration(model);&#13;
        if(configuration.isError) {&#13;
            presenter.showErrorMessage(configuration.errorMessage, configuration.errorMessageSubstitutions);&#13;
            presenter.destroyCommands();&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.$view.find(".cell").live("blur", presenter.cellBlurEventHandler);&#13;
        presenter.prepareGrid(model);&#13;
        presenter.createGrid();&#13;
    };&#13;
&#13;
    presenter.validate = function(mode) {&#13;
        var wordValid, k, l, score, markedCell;&#13;
        var filled = false;&#13;
        &#13;
        if (presenter.isShowAnswersActive &amp;&amp; mode == presenter.VALIDATION_MODE.SHOW_ERRORS) {&#13;
            presenter.hideAnswers();&#13;
            for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
                for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                    if(presenter.$view.find('.cell_' + i + 'x' + j + ' input').val() != '' &amp;&amp; typeof(presenter.$view.find('.cell_' + i + 'x' + j + ' input').val()) !== "undefined" &amp;&amp; presenter.crossword[i][j][0] !== '!') {&#13;
                        filled = true;&#13;
                    }&#13;
                 }&#13;
            }&#13;
            if (!filled) {&#13;
                return;&#13;
            }&#13;
        }&#13;
&#13;
        if(mode == presenter.VALIDATION_MODE.SHOW_ERRORS) {&#13;
            presenter.$view.find(".cell_letter input").attr('disabled', true);&#13;
        } else if(mode == presenter.VALIDATION_MODE.COUNT_SCORE) {&#13;
            score = 0;&#13;
        }&#13;
&#13;
        for(i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(j = 0; j &lt; presenter.columnCount; j++) {&#13;
                if(presenter.isHorizontalWordBegin(i, j)) {&#13;
                    wordValid = true;&#13;
&#13;
                    for(k = j; k &lt; presenter.columnCount; k++) {&#13;
                        if(presenter.crossword[i][k] == ' ') {&#13;
                            break;&#13;
                        }&#13;
&#13;
                        if(presenter.crossword[i][k] != presenter.$view.find('.cell_' + i + 'x' + k + " input").attr('value').toUpperCase() &amp;&amp; presenter.crossword[i][k][0] !== '!') {&#13;
                            wordValid = false;&#13;
                        }&#13;
                    }&#13;
&#13;
                    if(mode == presenter.VALIDATION_MODE.COUNT_SCORE &amp;&amp; wordValid) {&#13;
                        score++;&#13;
                    }&#13;
&#13;
                    if(mode == presenter.VALIDATION_MODE.SHOW_ERRORS) {&#13;
                        for(l = j; l &lt; k; l++) {&#13;
                            markedCell = presenter.$view.find('.cell_' + i + 'x' + l);&#13;
                            if(!markedCell.hasClass('cell_valid'))&#13;
                                markedCell.addClass('cell_' + (wordValid ? 'valid' : 'invalid'));&#13;
&#13;
                            if(wordValid &amp;&amp; markedCell.hasClass('cell_invalid'))&#13;
                                markedCell.removeClass('cell_invalid');&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
                if(presenter.isVerticalWordBegin(i, j)) {&#13;
                    wordValid = true;&#13;
&#13;
                    for(k = i; k &lt; presenter.rowCount; k++) {&#13;
                        if(presenter.crossword[k][j] == ' ') {&#13;
                            break;&#13;
                        }&#13;
&#13;
                        if(presenter.crossword[k][j] != presenter.$view.find('.cell_' + k + 'x' + j + " input").attr('value').toUpperCase() &amp;&amp; presenter.crossword[k][j][0] !== '!') {&#13;
                            wordValid = false;&#13;
                        }&#13;
                    }&#13;
&#13;
                    if(mode == presenter.VALIDATION_MODE.COUNT_SCORE &amp;&amp; wordValid) {&#13;
                        score++;&#13;
                    }&#13;
&#13;
                    if(mode == presenter.VALIDATION_MODE.SHOW_ERRORS) {&#13;
                        for(l = i; l &lt; k; l++) {&#13;
                            markedCell = presenter.$view.find('.cell_' + l + 'x' + j);&#13;
                            if(!markedCell.hasClass('cell_valid'))&#13;
                                markedCell.addClass('cell_' + (wordValid ? 'valid' : 'invalid'));&#13;
&#13;
                            if(wordValid &amp;&amp; markedCell.hasClass('cell_invalid'))&#13;
                                markedCell.removeClass('cell_invalid');&#13;
&#13;
                        }&#13;
                    }&#13;
                }&#13;
&#13;
            }&#13;
        }&#13;
&#13;
        if(mode == presenter.VALIDATION_MODE.COUNT_SCORE) {&#13;
            return score;&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function() {&#13;
        if (!presenter.isAttempted()) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.validate(presenter.VALIDATION_MODE.SHOW_ERRORS);&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function() {&#13;
        presenter.$view.find(".cell_letter:not(.cell_constant_letter) input").attr('disabled', false);&#13;
        presenter.$view.find(".cell_valid").removeClass("cell_valid");&#13;
        presenter.$view.find(".cell_invalid").removeClass("cell_invalid");&#13;
    };&#13;
&#13;
    presenter.cellBlurEventHandler = function () {&#13;
        if (presenter.isAllOK()) {&#13;
            presenter.sendAllOKEvent();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.run = function(view, model) {&#13;
        presenter.preview = false;&#13;
        eventBus = playerController.getEventBus();&#13;
        presenter.initializeLogic(view, model);&#13;
        eventBus.addEventListener('ShowAnswers', this);&#13;
        eventBus.addEventListener('HideAnswers', this);&#13;
    };&#13;
&#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.preview = true;&#13;
        presenter.initializeLogic(view, model);&#13;
    };&#13;
&#13;
    presenter.reset = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                if(presenter.crossword[i][j][0] !== '!') {&#13;
                    presenter.$view.find('.cell_' + i + 'x' + j + ' input').val('');&#13;
                }&#13;
                if(typeof(presenter.userAnswers) !== "undefined") {&#13;
                    presenter.userAnswers[i][j] = '';&#13;
                }&#13;
             }&#13;
        }&#13;
        presenter.setWorkMode();&#13;
    };&#13;
&#13;
    presenter.isAttempted = function() {&#13;
        var countedConstantLetters = 0;&#13;
&#13;
        jQuery.each(presenter.$view.find('.cell input'), function() {&#13;
            if (!ModelValidationUtils.isStringEmpty($(this).val())) countedConstantLetters++;&#13;
        });&#13;
&#13;
        return presenter.numberOfConstantLetters &lt; countedConstantLetters;&#13;
    };&#13;
&#13;
    presenter.getScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var score = presenter.validate(presenter.VALIDATION_MODE.COUNT_SCORE);&#13;
&#13;
        return presenter.isAttempted() ? score : 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        return presenter.maxScore;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        var score = presenter.validate(presenter.VALIDATION_MODE.COUNT_SCORE),&#13;
            errorCount = presenter.getMaxScore() - score;&#13;
&#13;
        return presenter.isAttempted() ? errorCount : 0;&#13;
    };&#13;
&#13;
    presenter.getState = function() {&#13;
        var s = [];&#13;
        var cell;&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                cell = presenter.$view.find('.cell_' + i + 'x' + j + ' input').attr('value');&#13;
                if(typeof(cell) == "string")&#13;
                    cell = cell.replace("\"", "\\\"");&#13;
&#13;
                s.push(cell);&#13;
            }&#13;
        }&#13;
&#13;
        return "[\"" + s.join("\",\"") + "\"]";&#13;
    };&#13;
&#13;
    presenter.setState = function(state) {&#13;
        var s = $.parseJSON(state.toString());&#13;
        var counter = 0;&#13;
&#13;
        for(var i = 0; i &lt; presenter.rowCount; i++) {&#13;
            for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                presenter.$view.find('.cell_' + i + 'x' + j + ' input').attr('value', s[counter]);&#13;
                counter++;&#13;
            }&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        playerController = controller;&#13;
    };&#13;
&#13;
    presenter.executeCommand = function (name, params) {&#13;
        if (presenter.configuration.isErrorMode) return;&#13;
&#13;
        var commands = {&#13;
            'isAllOK': presenter.isAllOK&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.isAllOK = function() {&#13;
        if (presenter.wordNumbersHorizontal || presenter.wordNumbersVertical) {&#13;
            return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
        }else{&#13;
            return false;&#13;
        }&#13;
    };&#13;
&#13;
    function getEventObject(it, val, sc) {&#13;
        return {&#13;
            'source': presenter.ID,&#13;
            'item': '' + it,&#13;
            'value': '' + val,&#13;
            'score': '' + sc&#13;
        };&#13;
    }&#13;
&#13;
    presenter.sendAllOKEvent = function () {&#13;
        eventBus.sendEvent('ValueChanged', getEventObject('all', '', ''));&#13;
    };&#13;
&#13;
    presenter.sendCorrectWordEvent = function sendCorrectWordEvent (word, item) {&#13;
        eventBus.sendEvent('CorrectWord', getEventObject(item, word, ''));&#13;
    };&#13;
&#13;
    presenter.sendScoreEvent = function(pos, value, isOk) {&#13;
        var item = '[row][col]'.replace('col', pos.x + 1).replace('row', pos.y + 1);&#13;
        var score = isOk ? '1' : '0';&#13;
        eventBus.sendEvent('ValueChanged', getEventObject(item, value, score));&#13;
    };&#13;
&#13;
    presenter.validateWord = function validateWord(pos) {&#13;
        var max_x = pos.x;&#13;
        var max_y = pos.y;&#13;
        var i, k, result = {&#13;
            word: '',&#13;
            item: 0,&#13;
            valid : false&#13;
        };&#13;
&#13;
        if (presenter.wordNumbersHorizontal) {&#13;
            for (i = 0; i &lt;= max_x; i++) {&#13;
                if (!presenter.isHorizontalWordBegin(max_y, i)) {&#13;
                    continue;&#13;
                }&#13;
                for (k = i; k &lt; presenter.columnCount; k++) {&#13;
                    if(presenter.crossword[max_y][k] == ' ') {&#13;
                        break;&#13;
                    }&#13;
                    if(presenter.crossword[max_y][k] != presenter.$view.find('.cell_' + max_y + 'x' + k + " input").attr('value').toUpperCase() &amp;&amp; presenter.crossword[max_y][k][0] !== '!') {&#13;
                        result.word = '';&#13;
                        break;&#13;
                    }&#13;
                    result.word += presenter.crossword[max_y][k];&#13;
                }&#13;
                result.item = presenter.$view.find('.cell_' + max_y + 'x' + i +' .word_number').text();&#13;
                break;&#13;
            }&#13;
        }&#13;
&#13;
        if (presenter.wordNumbersVertical) {&#13;
            for (i = 0; i &lt;= max_y; i++) {&#13;
                if (!presenter.isVerticalWordBegin(i, max_x)) {&#13;
                    continue;&#13;
                }&#13;
                for (k = i; k &lt; presenter.rowCount; k++) {&#13;
                    if(presenter.crossword[k][max_x] == ' ') {&#13;
                        break;&#13;
                    }&#13;
                    if(presenter.crossword[k][max_x] != presenter.$view.find('.cell_' + k + 'x' + max_x + " input").attr('value').toUpperCase() &amp;&amp; presenter.crossword[k][max_x][0] !== '!') {&#13;
                        result.word = '';&#13;
                        break;&#13;
                    }&#13;
                    result.word += presenter.crossword[k][max_x];&#13;
                }&#13;
                result.item = presenter.$view.find('.cell_' + i + 'x' + max_x +' .word_number').text();&#13;
                break;&#13;
            }&#13;
        }&#13;
&#13;
        if (result.word != '' ) {&#13;
            result.valid = true;&#13;
        }&#13;
&#13;
        return result&#13;
    };&#13;
&#13;
    presenter.onEventReceived = function (eventName) {&#13;
        if (!presenter.isModelValid) return;&#13;
&#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
&#13;
        if (eventName == "HideAnswers") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
&#13;
    presenter.showAnswers = function () {&#13;
        if (presenter.wordNumbersHorizontal || presenter.wordNumbersVertical) {&#13;
            if (presenter.isShowAnswersActive) {&#13;
                presenter.hideAnswers();&#13;
            }&#13;
            presenter.isShowAnswersActive = true;&#13;
            presenter.setWorkMode();&#13;
            presenter.userAnswers = new Array(presenter.rowCount);&#13;
            presenter.$view.find(".cell_letter input:enabled").attr('disabled', true);&#13;
            presenter.$view.find(".cell_letter input").addClass('crossword_cell_show-answers');&#13;
&#13;
            for (var i = 0; i &lt; presenter.rowCount; i++) {&#13;
                presenter.userAnswers[i] = new Array(presenter.columnCount);&#13;
                for(var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                    presenter.userAnswers[i][j] = presenter.$view.find('.cell_' + i + 'x' + j + ' input').val();&#13;
                    presenter.$view.find('.cell_' + i + 'x' + j + ' input').val(presenter.crossword[i][j].replace(/[!]/g,""));&#13;
                 }&#13;
            }&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.hideAnswers = function () {&#13;
        if (presenter.wordNumbersHorizontal || presenter.wordNumbersVertical) {&#13;
            presenter.isShowAnswersActive = false;&#13;
            presenter.$view.find(".cell_letter input").attr('disabled', false);&#13;
            presenter.$view.find(".cell_letter input").removeClass('crossword_cell_show-answers');&#13;
            for (var i = 0; i &lt; presenter.rowCount; i++) {&#13;
                for (var j = 0; j &lt; presenter.columnCount; j++) {&#13;
                    presenter.$view.find('.cell_' + i + 'x' + j + ' input').val(presenter.userAnswers[i][j]);&#13;
                }&#13;
            }&#13;
        }&#13;
    };&#13;
    &#13;
    return presenter;&#13;
}&#13;
</presenter></addon>