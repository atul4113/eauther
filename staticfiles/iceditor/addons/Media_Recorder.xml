<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Media_Recorder" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
    <model>
        <property name="maxTime" nameLabel="Media_Recorder_property_max_time" type="integer"/>
        <property name="defaultRecording" nameLabel="Media_Recorder_property_default_recording" type="audio"/>
        <property name="startRecordingSound" nameLabel="Media_Recorder_property_start_recording_sound" type="audio"/>
        <property name="stopRecordingSound" nameLabel="Media_Recorder_property_stop_recording_sound" type="audio"/>
        <property name="isShowedTimer" nameLabel="Media_Recorder_property_is_showed_timer" type="boolean"/>
        <property name="isShowedDefaultRecordingButton" nameLabel="Media_Recorder_property_is_showed_default_recording_button" type="boolean"/>
        <property name="isResetRemovesRecording" nameLabel="Media_Recorder_property_is_reset_removes_recording" type="boolean"/>
    </model>
<css>.media-recorder-wrapper {&#13;
    position: absolute;&#13;
    width: auto;&#13;
    height: auto;&#13;
    display: block;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-player-wrapper {&#13;
    position: relative;&#13;
    width: auto;&#13;
    height: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-interface-wrapper {&#13;
    width: 300px;&#13;
    height: 40px;&#13;
    display: flex;&#13;
    align-items: center;&#13;
    background-color: #EBEFF0;&#13;
    border-radius: 20px;&#13;
    padding-left: 10px;&#13;
    -webkit-border-radius: 20px;&#13;
    -moz-border-radius: 20px;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-recording-button {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    background: url('resources/003-record-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-recording-button.selected {&#13;
    background: black url('resources/004-stop-button.svg') no-repeat center;&#13;
    border-radius: 50%;&#13;
    background-size: 100%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-play-button {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    background: url('resources/001-play-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-play-button.selected {&#13;
    background: black url('resources/004-stop-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
    border-radius: 50%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-default-recording-play-button {&#13;
    width: 25px;&#13;
    height: 25px;&#13;
    margin: 0px 3px;&#13;
    background: url('resources/002-play-default-recording-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-default-recording-play-button.selected {&#13;
    background: black url('resources/004-stop-button.svg') no-repeat center;&#13;
    background-size: 100%;&#13;
    border-radius: 50%;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-timer {&#13;
    width: 100px;&#13;
    height: 30px;&#13;
    line-height: 30px;&#13;
    margin: 0px 10px;&#13;
    text-align: center;&#13;
    font-size: 14px;&#13;
    color: grey;&#13;
    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-sound-intensity {&#13;
    width: 20px;&#13;
    margin: 0px 10px;&#13;
    display: flex;&#13;
    flex-direction: column;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-large:first-child {&#13;
    border-top: 1px solid;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-large {&#13;
    width: 100%;&#13;
    height: 3px;&#13;
    border-bottom: 1px solid;&#13;
    background-color: #990000;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-large.selected {&#13;
    background-color: #FF0000;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-medium {&#13;
    width: 100%;&#13;
    height: 3px;&#13;
    border-bottom: 1px solid;&#13;
    background-color: #999900;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-medium.selected {&#13;
    background-color: #E4E400;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-low {&#13;
    width: 100%;&#13;
    height: 3px;&#13;
    border-bottom: 1px solid;&#13;
    background-color: #4C9900;&#13;
    margin: auto;&#13;
}&#13;
&#13;
.media-recorder-wrapper .sound-intensity-low.selected {&#13;
    background-color: #71E200;&#13;
}&#13;
&#13;
.media-recorder-wrapper .media-recorder-player-loader {&#13;
}&#13;
&#13;
.media-recorder-wrapper .video-loader {&#13;
    border: 5px solid #f3f3f3;&#13;
    border-top: 5px solid #1d2830;&#13;
    border-radius: 50%;&#13;
    animation: spin 0.7s linear infinite;&#13;
    position: absolute;&#13;
    margin: auto;&#13;
    left: 0;&#13;
    right: 0;&#13;
    top: 0;&#13;
    bottom: 0;&#13;
}&#13;
&#13;
.media-recorder-wrapper.disabled {&#13;
    opacity: 0.5;&#13;
}&#13;
&#13;
@keyframes spin {&#13;
    0% {&#13;
        transform: rotate(0deg);&#13;
    }&#13;
    100% {&#13;
        transform: rotate(360deg);&#13;
    }&#13;
}&#13;
</css><view>&lt;div class="media-recorder-wrapper"&gt;&#13;
    &lt;div class="media-recorder-player-wrapper"&gt;&#13;
        &lt;div class="media-recorder-player-loader"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="media-recorder-interface-wrapper"&gt;&#13;
        &lt;div class="media-recorder-default-recording-play-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-recording-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-play-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-timer"&gt;00:00/00:00&lt;/div&gt;&#13;
        &lt;div class="media-recorder-sound-intensity"&gt;&#13;
            &lt;div class="sound-intensity-large" id="sound-intensity-6"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-large" id="sound-intensity-5"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-medium" id="sound-intensity-4"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-medium" id="sound-intensity-3"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-low" id="sound-intensity-2"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-low" id="sound-intensity-1"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</view><preview>&lt;div class="media-recorder-wrapper"&gt;&#13;
    &lt;div class="media-recorder-player-wrapper"&gt;&#13;
        &lt;div class="media-recorder-player-loader"&gt;&lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
    &lt;div class="media-recorder-interface-wrapper"&gt;&#13;
        &lt;div class="media-recorder-default-recording-play-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-recording-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-play-button"&gt;&lt;/div&gt;&#13;
        &lt;div class="media-recorder-timer"&gt;00:00/00:00&lt;/div&gt;&#13;
        &lt;div class="media-recorder-sound-intensity"&gt;&#13;
            &lt;div class="sound-intensity-large" id="sound-intensity-6"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-large" id="sound-intensity-5"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-medium" id="sound-intensity-4"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-medium" id="sound-intensity-3"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-low" id="sound-intensity-2"&gt;&lt;/div&gt;&#13;
            &lt;div class="sound-intensity-low" id="sound-intensity-1"&gt;&lt;/div&gt;&#13;
        &lt;/div&gt;&#13;
    &lt;/div&gt;&#13;
&lt;/div&gt;&#13;
</preview><presenter>/******/ (function(modules) { // webpackBootstrap&#13;
/******/ 	// The module cache&#13;
/******/ 	var installedModules = {};&#13;
/******/&#13;
/******/ 	// The require function&#13;
/******/ 	function __webpack_require__(moduleId) {&#13;
/******/&#13;
/******/ 		// Check if module is in cache&#13;
/******/ 		if(installedModules[moduleId]) {&#13;
/******/ 			return installedModules[moduleId].exports;&#13;
/******/ 		}&#13;
/******/ 		// Create a new module (and put it into the cache)&#13;
/******/ 		var module = installedModules[moduleId] = {&#13;
/******/ 			i: moduleId,&#13;
/******/ 			l: false,&#13;
/******/ 			exports: {}&#13;
/******/ 		};&#13;
/******/&#13;
/******/ 		// Execute the module function&#13;
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);&#13;
/******/&#13;
/******/ 		// Flag the module as loaded&#13;
/******/ 		module.l = true;&#13;
/******/&#13;
/******/ 		// Return the exports of the module&#13;
/******/ 		return module.exports;&#13;
/******/ 	}&#13;
/******/&#13;
/******/&#13;
/******/ 	// expose the modules object (__webpack_modules__)&#13;
/******/ 	__webpack_require__.m = modules;&#13;
/******/&#13;
/******/ 	// expose the module cache&#13;
/******/ 	__webpack_require__.c = installedModules;&#13;
/******/&#13;
/******/ 	// define getter function for harmony exports&#13;
/******/ 	__webpack_require__.d = function(exports, name, getter) {&#13;
/******/ 		if(!__webpack_require__.o(exports, name)) {&#13;
/******/ 			Object.defineProperty(exports, name, {&#13;
/******/ 				configurable: false,&#13;
/******/ 				enumerable: true,&#13;
/******/ 				get: getter&#13;
/******/ 			});&#13;
/******/ 		}&#13;
/******/ 	};&#13;
/******/&#13;
/******/ 	// getDefaultExport function for compatibility with non-harmony modules&#13;
/******/ 	__webpack_require__.n = function(module) {&#13;
/******/ 		var getter = module &amp;&amp; module.__esModule ?&#13;
/******/ 			function getDefault() { return module['default']; } :&#13;
/******/ 			function getModuleExports() { return module; };&#13;
/******/ 		__webpack_require__.d(getter, 'a', getter);&#13;
/******/ 		return getter;&#13;
/******/ 	};&#13;
/******/&#13;
/******/ 	// Object.prototype.hasOwnProperty.call&#13;
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };&#13;
/******/&#13;
/******/ 	// __webpack_public_path__&#13;
/******/ 	__webpack_require__.p = "";&#13;
/******/&#13;
/******/ 	// Load entry module and return exports&#13;
/******/ 	return __webpack_require__(__webpack_require__.s = 12);&#13;
/******/ })&#13;
/************************************************************************/&#13;
/******/ ([&#13;
/* 0 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Button = exports.Button = function () {&#13;
    function Button($view) {&#13;
        _classCallCheck(this, Button);&#13;
&#13;
        if (this.constructor === Button) throw new Error("Cannot create an instance of BasePlayer abstract class");&#13;
&#13;
        this.$view = $view;&#13;
        this.$view.css("z-index", "100");&#13;
    }&#13;
&#13;
    _createClass(Button, [{&#13;
        key: "activate",&#13;
        value: function activate() {&#13;
            var _this = this;&#13;
&#13;
            this.$view.click(function () {&#13;
                return _this._eventHandler();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "deactivate",&#13;
        value: function deactivate() {&#13;
            this.$view.unbind();&#13;
        }&#13;
    }, {&#13;
        key: "forceClick",&#13;
        value: function forceClick() {&#13;
            this.$view.click();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.deactivate();&#13;
            this.$view.remove();&#13;
            this.$view = null;&#13;
        }&#13;
    }, {&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            throw new Error("EventHandler accessor is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return Button;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 1 */,&#13;
/* 2 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.RecordButton = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _Button2 = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var RecordButton = exports.RecordButton = function (_Button) {&#13;
    _inherits(RecordButton, _Button);&#13;
&#13;
    function RecordButton(_ref) {&#13;
        var $view = _ref.$view,&#13;
            state = _ref.state;&#13;
&#13;
        _classCallCheck(this, RecordButton);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (RecordButton.__proto__ || Object.getPrototypeOf(RecordButton)).call(this, $view));&#13;
&#13;
        _this.state = state;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(RecordButton, [{&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            _get(RecordButton.prototype.__proto__ || Object.getPrototypeOf(RecordButton.prototype), "destroy", this).call(this);&#13;
            this.state = null;&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this.$view.removeClass("selected");&#13;
            this.onResetCallback();&#13;
        }&#13;
    }, {&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            if (this.state.isNew() || this.state.isLoaded() || this.state.isLoadedDefaultRecording()) this._startRecording();else if (this.state.isRecording()) this._stopRecording();&#13;
        }&#13;
    }, {&#13;
        key: "_startRecording",&#13;
        value: function _startRecording() {&#13;
            this.$view.addClass("selected");&#13;
            this.onStartRecordingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "_stopRecording",&#13;
        value: function _stopRecording() {&#13;
            this.$view.removeClass("selected");&#13;
            this.onStopRecordingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "onStartRecording",&#13;
        set: function set(callback) {&#13;
            this.onStartRecordingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopRecording",&#13;
        set: function set(callback) {&#13;
            this.onStopRecordingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onReset",&#13;
        set: function set(callback) {&#13;
            this.onResetCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return RecordButton;&#13;
}(_Button2.Button);&#13;
&#13;
/***/ }),&#13;
/* 3 */,&#13;
/* 4 */,&#13;
/* 5 */,&#13;
/* 6 */,&#13;
/* 7 */,&#13;
/* 8 */,&#13;
/* 9 */,&#13;
/* 10 */,&#13;
/* 11 */,&#13;
/* 12 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
var _MediaRecorder = __webpack_require__(13);&#13;
&#13;
function AddonMedia_Recorder_create() {&#13;
&#13;
    var presenter = function presenter() {};&#13;
&#13;
    presenter.mediaRecorder = new _MediaRecorder.MediaRecorder();&#13;
&#13;
    presenter.setPlayerController = function (controller) {&#13;
        presenter.mediaRecorder.setPlayerController(controller);&#13;
    };&#13;
&#13;
    presenter.run = function run(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.mediaRecorder.run(view, model);&#13;
        handleDestroyEvent(view);&#13;
    };&#13;
&#13;
    presenter.createPreview = function createPreview(view, model) {&#13;
        presenter.view = view;&#13;
        presenter.mediaRecorder.createPreview(view, model);&#13;
        handleDestroyEvent(view);&#13;
    };&#13;
&#13;
    presenter.getState = function getState() {&#13;
        return presenter.mediaRecorder.getState();&#13;
    };&#13;
&#13;
    presenter.setState = function setState(state) {&#13;
        presenter.mediaRecorder.setState(state);&#13;
    };&#13;
&#13;
    presenter.startRecording = function startRecording() {&#13;
        presenter.mediaRecorder.startRecording();&#13;
    };&#13;
&#13;
    presenter.stopRecording = function stopRecording() {&#13;
        presenter.mediaRecorder.stopRecording();&#13;
    };&#13;
&#13;
    presenter.startPlaying = function startPlaying() {&#13;
        presenter.mediaRecorder.startPlaying();&#13;
    };&#13;
&#13;
    presenter.stopPlaying = function stopPlaying() {&#13;
        presenter.mediaRecorder.stopPlaying;&#13;
    };&#13;
&#13;
    presenter.getErrorCount = function getErrorCount() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getMaxScore = function getMaxScore() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.getScore = function getScore() {&#13;
        return 0;&#13;
    };&#13;
&#13;
    presenter.show = function () {&#13;
        presenter.mediaRecorder.show();&#13;
    };&#13;
&#13;
    presenter.hide = function () {&#13;
        presenter.mediaRecorder.hide();&#13;
    };&#13;
&#13;
    presenter.setShowErrorsMode = function setShowErrorsMode() {&#13;
        presenter.mediaRecorder.deactivate();&#13;
    };&#13;
&#13;
    presenter.setWorkMode = function setWorkMode() {&#13;
        presenter.mediaRecorder.activate();&#13;
    };&#13;
&#13;
    presenter.reset = function reset() {&#13;
        presenter.mediaRecorder.reset();&#13;
    };&#13;
&#13;
    presenter.executeCommand = function executeCommand(name, params) {&#13;
        var commands = {&#13;
            'startRecording': presenter.startRecording,&#13;
            'stopRecording': presenter.stopRecording,&#13;
            'startPlaying': presenter.startPlaying,&#13;
            'stopPlaying': presenter.stopPlaying,&#13;
            'setShowErrorsMode': presenter.setShowErrorsMode,&#13;
            'setWorkMode': presenter.setWorkMode,&#13;
            'reset': presenter.reset,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
&#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
&#13;
    presenter.destroy = function destroy(event) {&#13;
        if (event.target == presenter.view) {&#13;
            event.target.removeEventListener('DOMNodeRemoved', presenter.destroy);&#13;
            presenter.mediaRecorder.destroy();&#13;
            event.target = null;&#13;
            presenter.mediaRecorder = null;&#13;
            presenter.validateModel = null;&#13;
        }&#13;
    };&#13;
&#13;
    presenter._internalElements = function () {&#13;
        return this.mediaRecorder._internalElements();&#13;
    };&#13;
&#13;
    function handleDestroyEvent(view) {&#13;
        view.addEventListener('DOMNodeRemoved', presenter.destroy);&#13;
    }&#13;
&#13;
    return presenter;&#13;
}&#13;
&#13;
window.AddonMedia_Recorder_create = AddonMedia_Recorder_create;&#13;
&#13;
/***/ }),&#13;
/* 13 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.MediaRecorder = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _validateModel = __webpack_require__(14);&#13;
&#13;
var _ActivationState = __webpack_require__(16);&#13;
&#13;
var _MediaState = __webpack_require__(17);&#13;
&#13;
var _Errors = __webpack_require__(18);&#13;
&#13;
var _PlayButton = __webpack_require__(19);&#13;
&#13;
var _RecordButton = __webpack_require__(2);&#13;
&#13;
var _Timer = __webpack_require__(20);&#13;
&#13;
var _AddonState = __webpack_require__(21);&#13;
&#13;
var _RecordingTimeLimiter = __webpack_require__(23);&#13;
&#13;
var _SoundIntensity = __webpack_require__(24);&#13;
&#13;
var _MediaAnalyserService = __webpack_require__(25);&#13;
&#13;
var _AudioLoader = __webpack_require__(27);&#13;
&#13;
var _SoundEffect = __webpack_require__(29);&#13;
&#13;
var _RecordButtonSoundEffect = __webpack_require__(30);&#13;
&#13;
var _AddonViewService = __webpack_require__(31);&#13;
&#13;
var _AudioResourcesProvider = __webpack_require__(32);&#13;
&#13;
var _AudioRecorder = __webpack_require__(34);&#13;
&#13;
var _AudioPlayer = __webpack_require__(37);&#13;
&#13;
var _DefaultRecordingPlayButton = __webpack_require__(40);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var MediaRecorder = exports.MediaRecorder = function () {&#13;
    function MediaRecorder() {&#13;
        _classCallCheck(this, MediaRecorder);&#13;
    }&#13;
&#13;
    _createClass(MediaRecorder, [{&#13;
        key: "run",&#13;
        value: function run(view, model) {&#13;
            var validatedModel = (0, _validateModel.validateModel)(model);&#13;
&#13;
            if (window.DevicesUtils.isInternetExplorer()) {&#13;
                this._showBrowserError(view);&#13;
            } else if (validatedModel.isValid) this._runAddon(view, validatedModel.value);else this._showError(view, validatedModel);&#13;
        }&#13;
    }, {&#13;
        key: "createPreview",&#13;
        value: function createPreview(view, model) {&#13;
            var validatedModel = (0, _validateModel.validateModel)(model);&#13;
&#13;
            if (!validatedModel.isValid) this._showError(view, validatedModel);else this._updatePreview(view, validatedModel);&#13;
        }&#13;
    }, {&#13;
        key: "setPlayerController",&#13;
        value: function setPlayerController(playerController) {&#13;
            this.playerController = playerController;&#13;
            if (this.player &amp;&amp; this.recorder) this._loadEventBus();&#13;
        }&#13;
    }, {&#13;
        key: "getState",&#13;
        value: function getState() {&#13;
            return JSON.stringify(this.addonState);&#13;
        }&#13;
    }, {&#13;
        key: "setState",&#13;
        value: function setState(state) {&#13;
            var _this = this;&#13;
&#13;
            Object.assign(this.addonState, JSON.parse(state));&#13;
            this.addonState.getRecordingBlob().then(function (blob) {&#13;
                _this.mediaState.setLoading();&#13;
                var recording = URL.createObjectURL(blob);&#13;
                _this.player.setRecording(recording);&#13;
            });&#13;
            this.addonState.getVisibility().then(function (isVisible) {&#13;
                _this.setVisibility(isVisible);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "startRecording",&#13;
        value: function startRecording() {&#13;
            if (this.mediaState.isNew() || this.mediaState.isLoaded()) this.recordButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "stopRecording",&#13;
        value: function stopRecording() {&#13;
            if (this.mediaState.isRecording()) this.recordButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "startPlaying",&#13;
        value: function startPlaying() {&#13;
            if (this.mediaState.isLoaded()) this.playButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "stopPlaying",&#13;
        value: function stopPlaying() {&#13;
            if (this.mediaState.isPlaying()) this.playButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.playButton.destroy();&#13;
            this.defaultRecordingPlayButton.destroy();&#13;
            this.recordButton.destroy();&#13;
            this.recorder.destroy();&#13;
            this.player.destroy();&#13;
            this.resourcesProvider.destroy();&#13;
            this.recordingTimeLimiter.destroy();&#13;
            this.soundIntensity.destroy();&#13;
            this.timer.destroy();&#13;
            this.startRecordingSoundEffect.destroy();&#13;
            this.stopRecordingSoundEffect.destroy();&#13;
            this.loader.destroy();&#13;
            this.addonViewService.destroy();&#13;
            this.mediaAnalyserService.destroy();&#13;
            this.addonState.destroy();&#13;
            this.mediaState.destroy();&#13;
            this.activationState.destroy();&#13;
&#13;
            this.viewHandlers = null;&#13;
            this.defaultRecordingPlayButton = null;&#13;
            this.recorder = null;&#13;
            this.player = null;&#13;
            this.resourcesProvider = null;&#13;
            this.recordingTimeLimiter = null;&#13;
            this.soundIntensity = null;&#13;
            this.timer = null;&#13;
            this.recordButton = null;&#13;
            this.playButton = null;&#13;
            this.stopRecordingSoundEffect = null;&#13;
            this.startRecordingSoundEffect = null;&#13;
            this.loader = null;&#13;
            this.addonViewService = null;&#13;
            this.mediaAnalyserService = null;&#13;
            this.addonState = null;&#13;
            this.mediaState = null;&#13;
            this.activationState = null;&#13;
&#13;
            this.playerController = null;&#13;
            this.view = null;&#13;
            this.model = null;&#13;
        }&#13;
    }, {&#13;
        key: "activate",&#13;
        value: function activate() {&#13;
            if (this.activationState.isInactive()) {&#13;
                this.activationState.setActive();&#13;
                this.addonViewService.activate();&#13;
                this._activateButtons();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "deactivate",&#13;
        value: function deactivate() {&#13;
            this._stopActions();&#13;
            this._deactivateButtons();&#13;
            this.activationState.setInactive();&#13;
            this.addonViewService.deactivate();&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this.deactivate();&#13;
            this.activate();&#13;
            this.setVisibility(this.model["Is Visible"]);&#13;
            if (this.model.isResetRemovesRecording) {&#13;
                this.player.reset();&#13;
                this.addonState.reset();&#13;
                this.timer.reset();&#13;
                if (this.defaultRecordingPlayer.hasRecording) {&#13;
                    this.mediaState.setLoadedDefaultRecording();&#13;
                    this.timer.setDuration(this.defaultRecordingPlayer.duration);&#13;
                } else this.mediaState.setNew();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "show",&#13;
        value: function show() {&#13;
            this.setVisibility(true);&#13;
            this.addonState.setVisibility(true);&#13;
        }&#13;
    }, {&#13;
        key: "hide",&#13;
        value: function hide() {&#13;
            this.setVisibility(false);&#13;
            this.addonState.setVisibility(false);&#13;
        }&#13;
    }, {&#13;
        key: "setVisibility",&#13;
        value: function setVisibility(isVisible) {&#13;
            this.addonViewService.setVisibility(isVisible);&#13;
        }&#13;
    }, {&#13;
        key: "_runAddon",&#13;
        value: function _runAddon(view, model) {&#13;
            this._loadAddon(view, model);&#13;
            this._loadLogic();&#13;
            this._loadDefaultRecording(this.model);&#13;
            this._activateButtons();&#13;
            this.setVisibility(model["Is Visible"]);&#13;
        }&#13;
    }, {&#13;
        key: "_loadAddon",&#13;
        value: function _loadAddon(view, model) {&#13;
            this._loadCoreElements(view, model);&#13;
&#13;
            this.mediaAnalyserService = new _MediaAnalyserService.MediaAnalyserService();&#13;
            this.recordingTimeLimiter = new _RecordingTimeLimiter.RecordingTimeLimiter(this.model.maxTime);&#13;
&#13;
            this._loadMediaElements();&#13;
            this._loadViewElements();&#13;
        }&#13;
    }, {&#13;
        key: "_loadCoreElements",&#13;
        value: function _loadCoreElements(view, model) {&#13;
            this.view = view;&#13;
            this.model = model;&#13;
            this.viewHandlers = this._loadViewHandlers(this.view);&#13;
&#13;
            this.mediaState = new _MediaState.MediaState();&#13;
            this.activationState = new _ActivationState.ActivationState();&#13;
            this.addonState = new _AddonState.AddonState();&#13;
        }&#13;
    }, {&#13;
        key: "_loadViewHandlers",&#13;
        value: function _loadViewHandlers(view) {&#13;
            return {&#13;
                $wrapperView: $(view).find(".media-recorder-wrapper"),&#13;
                $playerView: $(view).find(".media-recorder-player-wrapper"),&#13;
                $loaderView: $(view).find(".media-recorder-player-loader"),&#13;
                $defaultRecordingPlayButtonView: $(view).find(".media-recorder-default-recording-play-button"),&#13;
                $recordButtonView: $(view).find(".media-recorder-recording-button"),&#13;
                $playButtonView: $(view).find(".media-recorder-play-button"),&#13;
                $timerView: $(view).find(".media-recorder-timer"),&#13;
                $soundIntensityView: $(view).find(".media-recorder-sound-intensity")&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "_loadMediaElements",&#13;
        value: function _loadMediaElements() {&#13;
            this.recorder = new _AudioRecorder.AudioRecorder();&#13;
            this.player = new _AudioPlayer.AudioPlayer(this.viewHandlers.$playerView);&#13;
            this.defaultRecordingPlayer = new _AudioPlayer.AudioPlayer(this.viewHandlers.$playerView);&#13;
            this.resourcesProvider = new _AudioResourcesProvider.AudioResourcesProvider(this.viewHandlers.$wrapperView);&#13;
            if (this.playerController) this._loadEventBus();&#13;
        }&#13;
    }, {&#13;
        key: "_loadEventBus",&#13;
        value: function _loadEventBus() {&#13;
            var eventBus = this.playerController.getEventBus();&#13;
            this.player.setEventBus(eventBus, this.model.ID, "player");&#13;
            this.defaultRecordingPlayer.setEventBus(eventBus, this.model.ID, "default");&#13;
            this.recorder.setEventBus(eventBus, this.model.ID);&#13;
        }&#13;
    }, {&#13;
        key: "_loadViewElements",&#13;
        value: function _loadViewElements() {&#13;
            this.addonViewService = new _AddonViewService.AddonViewService(this.viewHandlers.$wrapperView);&#13;
            this.recordButton = this._loadRecordButton();&#13;
&#13;
            this.defaultRecordingPlayButton = new _DefaultRecordingPlayButton.DefaultRecordingPlayButton({&#13;
                $view: this.viewHandlers.$defaultRecordingPlayButtonView,&#13;
                state: this.mediaState,&#13;
                defaultRecording: this.model.defaultRecording&#13;
            });&#13;
&#13;
            this.playButton = new _PlayButton.PlayButton({&#13;
                $view: this.viewHandlers.$playButtonView,&#13;
                state: this.mediaState&#13;
            });&#13;
&#13;
            this.loader = new _AudioLoader.AudioLoader(this.viewHandlers.$loaderView);&#13;
&#13;
            this.timer = new _Timer.Timer(this.viewHandlers.$timerView);&#13;
            this.soundIntensity = new _SoundIntensity.SoundIntensity(this.viewHandlers.$soundIntensityView);&#13;
&#13;
            this._hideSelectedElements();&#13;
        }&#13;
    }, {&#13;
        key: "_loadRecordButton",&#13;
        value: function _loadRecordButton() {&#13;
            var recordButton = new _RecordButton.RecordButton({&#13;
                $view: this.viewHandlers.$recordButtonView,&#13;
                state: this.mediaState&#13;
            });&#13;
&#13;
            this.startRecordingSoundEffect = new _SoundEffect.SoundEffect(this.model.startRecordingSound, this.viewHandlers.$playerView);&#13;
            this.stopRecordingSoundEffect = new _SoundEffect.SoundEffect(this.model.stopRecordingSound, this.viewHandlers.$playerView);&#13;
&#13;
            return new _RecordButtonSoundEffect.RecordButtonSoundEffect(recordButton, this.startRecordingSoundEffect, this.stopRecordingSoundEffect);&#13;
        }&#13;
    }, {&#13;
        key: "_loadLogic",&#13;
        value: function _loadLogic() {&#13;
            var _this2 = this;&#13;
&#13;
            this.recordButton.onStartRecording = function () {&#13;
                _this2.mediaState.setBlocked();&#13;
                _this2.resourcesProvider.getMediaResources().then(function (stream) {&#13;
                    _this2.mediaState.setRecording();&#13;
                    _this2.player.startStreaming(stream);&#13;
                    _this2.recorder.startRecording(stream);&#13;
                    _this2.timer.reset();&#13;
                    _this2.timer.startDecrementalCountdown(_this2.recordingTimeLimiter.maxTime);&#13;
                    _this2.recordingTimeLimiter.startCountdown();&#13;
                    _this2.mediaAnalyserService.createAnalyserFromStream(stream).then(function (analyser) {&#13;
                        return _this2.soundIntensity.startAnalyzing(analyser);&#13;
                    });&#13;
                });&#13;
            };&#13;
&#13;
            this.recordButton.onStopRecording = function () {&#13;
                _this2.mediaState.setLoading();&#13;
                _this2.timer.stopCountdown();&#13;
                _this2.recordingTimeLimiter.stopCountdown();&#13;
                _this2.soundIntensity.stopAnalyzing();&#13;
                _this2.mediaAnalyserService.closeAnalyzing();&#13;
                _this2.player.stopStreaming();&#13;
                _this2.recorder.stopRecording().then(function (blob) {&#13;
                    _this2.addonState.setRecordingBlob(blob);&#13;
                    var recording = URL.createObjectURL(blob);&#13;
                    _this2.player.reset();&#13;
                    _this2.player.setRecording(recording);&#13;
                });&#13;
                _this2.resourcesProvider.destroy();&#13;
            };&#13;
&#13;
            this.recordButton.onReset = function () {&#13;
                _this2.mediaState.setLoading();&#13;
                _this2.timer.stopCountdown();&#13;
                _this2.recordingTimeLimiter.stopCountdown();&#13;
                _this2.soundIntensity.stopAnalyzing();&#13;
                _this2.mediaAnalyserService.closeAnalyzing();&#13;
                _this2.player.stopStreaming();&#13;
                _this2.recorder.stopRecording();&#13;
                _this2.resourcesProvider.destroy();&#13;
            };&#13;
&#13;
            this.playButton.onStartPlaying = function () {&#13;
                _this2.mediaState.setPlaying();&#13;
                _this2.timer.startCountdown();&#13;
                _this2.player.startPlaying().then(function (htmlMediaElement) {&#13;
                    return _this2.mediaAnalyserService.createAnalyserFromElement(htmlMediaElement).then(function (analyser) {&#13;
                        return _this2.soundIntensity.startAnalyzing(analyser);&#13;
                    });&#13;
                });&#13;
            };&#13;
&#13;
            this.playButton.onStopPlaying = function () {&#13;
                _this2.mediaState.setLoaded();&#13;
                _this2.player.stopPlaying();&#13;
                _this2.timer.stopCountdown();&#13;
                _this2.soundIntensity.stopAnalyzing();&#13;
                _this2.mediaAnalyserService.closeAnalyzing();&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayButton.onStartPlaying = function () {&#13;
                _this2.mediaState.setPlayingDefaultRecording();&#13;
                _this2.timer.setDuration(_this2.defaultRecordingPlayer.duration);&#13;
                _this2.timer.startCountdown();&#13;
                _this2.defaultRecordingPlayer.startPlaying().then(function (htmlMediaElement) {&#13;
                    return _this2.mediaAnalyserService.createAnalyserFromElement(htmlMediaElement).then(function (analyser) {&#13;
                        return _this2.soundIntensity.startAnalyzing(analyser);&#13;
                    });&#13;
                });&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayButton.onStopPlaying = function () {&#13;
                if (_this2.player.hasRecording) {&#13;
                    _this2.timer.setDuration(_this2.player.duration);&#13;
                    _this2.mediaState.setLoaded();&#13;
                } else _this2.mediaState.setLoadedDefaultRecording();&#13;
&#13;
                _this2.defaultRecordingPlayer.stopPlaying();&#13;
                _this2.timer.stopCountdown();&#13;
                _this2.soundIntensity.stopAnalyzing();&#13;
                _this2.mediaAnalyserService.closeAnalyzing();&#13;
            };&#13;
&#13;
            this.player.onStartLoading = function () {&#13;
                _this2.mediaState.setLoading();&#13;
                _this2.loader.show();&#13;
            };&#13;
&#13;
            this.player.onEndLoading = function () {&#13;
                _this2.mediaState.setLoaded();&#13;
                _this2.loader.hide();&#13;
            };&#13;
&#13;
            this.player.onDurationChange = function (duration) {&#13;
                return _this2.timer.setDuration(duration);&#13;
            };&#13;
            this.player.onEndPlaying = function () {&#13;
                return _this2.playButton.forceClick();&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayer.onStartLoading = function () {&#13;
                _this2.mediaState.setLoading();&#13;
                _this2.loader.show();&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayer.onEndLoading = function () {&#13;
                if (_this2.player.hasRecording) _this2.mediaState.setLoaded();else _this2.mediaState.setLoadedDefaultRecording();&#13;
                _this2.loader.hide();&#13;
            };&#13;
&#13;
            this.defaultRecordingPlayer.onDurationChange = function (duration) {&#13;
                return _this2.timer.setDuration(duration);&#13;
            };&#13;
            this.defaultRecordingPlayer.onEndPlaying = function () {&#13;
                return _this2.defaultRecordingPlayButton.forceClick();&#13;
            };&#13;
&#13;
            this.recordingTimeLimiter.onTimeExpired = function () {&#13;
                return _this2.recordButton.forceClick();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "_loadDefaultRecording",&#13;
        value: function _loadDefaultRecording(model) {&#13;
            if (_isValid(model.defaultRecording) &amp;&amp; model.isShowedDefaultRecordingButton) {&#13;
                this.mediaState.setLoading();&#13;
                this.defaultRecordingPlayer.setRecording(model.defaultRecording);&#13;
            }&#13;
&#13;
            function _isValid(recording) {&#13;
                return recording != "" &amp;&amp; recording != null &amp;&amp; typeof recording != "undefined";&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_activateButtons",&#13;
        value: function _activateButtons() {&#13;
            this.recordButton.activate();&#13;
            this.playButton.activate();&#13;
            this.defaultRecordingPlayButton.activate();&#13;
        }&#13;
    }, {&#13;
        key: "_deactivateButtons",&#13;
        value: function _deactivateButtons() {&#13;
            this.recordButton.deactivate();&#13;
            this.playButton.deactivate();&#13;
            this.defaultRecordingPlayButton.deactivate();&#13;
        }&#13;
    }, {&#13;
        key: "_stopActions",&#13;
        value: function _stopActions() {&#13;
            if (this.mediaState.isRecording()) if (this.model.isResetRemovesRecording) this.recordButton.reset();else this.recordButton.forceClick();&#13;
            if (this.mediaState.isPlaying()) this.playButton.forceClick();&#13;
            if (this.mediaState.isPlayingDefaultRecording()) this.defaultRecordingPlayButton.forceClick();&#13;
        }&#13;
    }, {&#13;
        key: "_internalElements",&#13;
        value: function _internalElements() {&#13;
            return {&#13;
                validateModel: _validateModel.validateModel,&#13;
                ActivationState: _ActivationState.ActivationState,&#13;
                AudioLoader: _AudioLoader.AudioLoader,&#13;
                PlayButton: _PlayButton.PlayButton,&#13;
                RecordButton: _RecordButton.RecordButton,&#13;
                RecordingTimeLimiter: _RecordingTimeLimiter.RecordingTimeLimiter,&#13;
                MediaState: _MediaState.MediaState,&#13;
                Timer: _Timer.Timer,&#13;
                AudioPlayer: _AudioPlayer.AudioPlayer&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "_showError",&#13;
        value: function _showError(view, validatedModel) {&#13;
            DOMOperationsUtils.showErrorMessage(view, _Errors.Errors, validatedModel.fieldName.join("|") + "_" + validatedModel.errorCode);&#13;
        }&#13;
    }, {&#13;
        key: "_showBrowserError",&#13;
        value: function _showBrowserError(view) {&#13;
            var $wrapper = $(view).find(".media-recorder-wrapper");&#13;
            $wrapper.addClass("media-recorder-wrapper-browser-not-supported");&#13;
            $wrapper.text(_Errors.Errors["not_supported_browser"]);&#13;
        }&#13;
    }, {&#13;
        key: "_updatePreview",&#13;
        value: function _updatePreview(view, validatedModel) {&#13;
            var valid_model = validatedModel.value;&#13;
            var timerViewHandler = $(view).find(".media-recorder-timer");&#13;
            var defaultButtonViewHandler = $(view).find(".media-recorder-default-recording-play-button");&#13;
&#13;
            if (valid_model.isShowedTimer == false) timerViewHandler.hide();else timerViewHandler.show();&#13;
&#13;
            if (valid_model.isShowedDefaultRecordingButton == false) defaultButtonViewHandler.hide();else defaultButtonViewHandler.show();&#13;
        }&#13;
    }, {&#13;
        key: "_hideSelectedElements",&#13;
        value: function _hideSelectedElements() {&#13;
            if (this.model.isShowedTimer == false) this.viewHandlers.$timerView.hide();&#13;
            if (this.model.isShowedDefaultRecordingButton == false) this.viewHandlers.$defaultRecordingPlayButtonView.hide();&#13;
        }&#13;
    }]);&#13;
&#13;
    return MediaRecorder;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 14 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.validateModel = validateModel;&#13;
&#13;
var _DefaultValues = __webpack_require__(15);&#13;
&#13;
function validateModel(model) {&#13;
    var modelValidator = new ModelValidator();&#13;
&#13;
    return modelValidator.validate(model, [ModelValidators.DumbString("ID"), ModelValidators.Boolean("Is Visible"), ModelValidators.Integer("maxTime", {&#13;
        minValue: 0,&#13;
        maxValue: _DefaultValues.DefaultValues.MAX_TIME,&#13;
        default: _DefaultValues.DefaultValues.DEFAULT_MAX_TIME&#13;
    }), ModelValidators.String("defaultRecording", {&#13;
        trim: true,&#13;
        default: ""&#13;
    }), ModelValidators.String("startRecordingSound", {&#13;
        trim: true,&#13;
        default: ""&#13;
    }), ModelValidators.String("stopRecordingSound", {&#13;
        trim: true,&#13;
        default: ""&#13;
    }), ModelValidators.Boolean("isResetRemovesRecording"), ModelValidators.Boolean("isShowedTimer"), ModelValidators.Boolean("isShowedDefaultRecordingButton")]);&#13;
}&#13;
&#13;
/***/ }),&#13;
/* 15 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
var DefaultValues = exports.DefaultValues = {&#13;
    MAX_TIME: 60,&#13;
    DEFAULT_MAX_TIME: 10&#13;
};&#13;
&#13;
/***/ }),&#13;
/* 16 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var ActivationState = exports.ActivationState = function () {&#13;
    function ActivationState() {&#13;
        _classCallCheck(this, ActivationState);&#13;
&#13;
        this.values = {&#13;
            ACTIVE: 0,&#13;
            INACTIVE: 1&#13;
        };&#13;
&#13;
        this._value = this.values.ACTIVE;&#13;
    }&#13;
&#13;
    _createClass(ActivationState, [{&#13;
        key: "isActive",&#13;
        value: function isActive() {&#13;
            return this._value === this.values.ACTIVE;&#13;
        }&#13;
    }, {&#13;
        key: "isInactive",&#13;
        value: function isInactive() {&#13;
            return this._value === this.values.INACTIVE;&#13;
        }&#13;
    }, {&#13;
        key: "setActive",&#13;
        value: function setActive() {&#13;
            this._value = this.values.ACTIVE;&#13;
        }&#13;
    }, {&#13;
        key: "setInactive",&#13;
        value: function setInactive() {&#13;
            this._value = this.values.INACTIVE;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.value = null;&#13;
            this.values = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return ActivationState;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 17 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var MediaState = exports.MediaState = function () {&#13;
    function MediaState() {&#13;
        _classCallCheck(this, MediaState);&#13;
&#13;
        this.values = {&#13;
            NEW: 0,&#13;
            BLOCKED: 1, // waiting for a resources permit&#13;
            RECORDING: 2,&#13;
            LOADING: 3,&#13;
            LOADED: 4,&#13;
            PLAYING: 5,&#13;
            PLAYING_DEFAULT_RECORDING: 6,&#13;
            LOADED_DEFAULT_RECORDING: 7&#13;
        };&#13;
&#13;
        this._value = this.values.NEW;&#13;
    }&#13;
&#13;
    _createClass(MediaState, [{&#13;
        key: "isNew",&#13;
        value: function isNew() {&#13;
            return this._value === this.values.NEW;&#13;
        }&#13;
    }, {&#13;
        key: "isRecording",&#13;
        value: function isRecording() {&#13;
            return this._value === this.values.RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "isLoading",&#13;
        value: function isLoading() {&#13;
            return this._value === this.values.LOADING;&#13;
        }&#13;
    }, {&#13;
        key: "isLoaded",&#13;
        value: function isLoaded() {&#13;
            return this._value === this.values.LOADED;&#13;
        }&#13;
    }, {&#13;
        key: "isPlaying",&#13;
        value: function isPlaying() {&#13;
            return this._value === this.values.PLAYING;&#13;
        }&#13;
    }, {&#13;
        key: "isPlayingDefaultRecording",&#13;
        value: function isPlayingDefaultRecording() {&#13;
            return this._value === this.values.PLAYING_DEFAULT_RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "isLoadedDefaultRecording",&#13;
        value: function isLoadedDefaultRecording() {&#13;
            return this._value === this.values.LOADED_DEFAULT_RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "isBlocked",&#13;
        value: function isBlocked() {&#13;
            return this._value === this.values.BLOCKED;&#13;
        }&#13;
    }, {&#13;
        key: "setNew",&#13;
        value: function setNew() {&#13;
            this._value = this.values.NEW;&#13;
        }&#13;
    }, {&#13;
        key: "setRecording",&#13;
        value: function setRecording() {&#13;
            this._value = this.values.RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "setLoading",&#13;
        value: function setLoading() {&#13;
            this._value = this.values.LOADING;&#13;
        }&#13;
    }, {&#13;
        key: "setLoaded",&#13;
        value: function setLoaded() {&#13;
            this._value = this.values.LOADED;&#13;
        }&#13;
    }, {&#13;
        key: "setPlaying",&#13;
        value: function setPlaying() {&#13;
            this._value = this.values.PLAYING;&#13;
        }&#13;
    }, {&#13;
        key: "setPlayingDefaultRecording",&#13;
        value: function setPlayingDefaultRecording() {&#13;
            this._value = this.values.PLAYING_DEFAULT_RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "setLoadedDefaultRecording",&#13;
        value: function setLoadedDefaultRecording() {&#13;
            this._value = this.values.LOADED_DEFAULT_RECORDING;&#13;
        }&#13;
    }, {&#13;
        key: "setBlocked",&#13;
        value: function setBlocked() {&#13;
            this._value = this.values.BLOCKED;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this._value = null;&#13;
            this.values = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return MediaState;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 18 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
var Errors = exports.Errors = {&#13;
    "maxTime_INT02": "Time value contains non numerical characters",&#13;
    "maxTime_INT03": "Recording can not take more than 60 seconds",&#13;
    "maxTime_INT04": "Time in seconds cannot be negative value",&#13;
    "type_EV01": "Selected type is not supported",&#13;
    "not_supported_browser": "Your browser is not supported."&#13;
};&#13;
&#13;
/***/ }),&#13;
/* 19 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.PlayButton = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _Button2 = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var PlayButton = exports.PlayButton = function (_Button) {&#13;
    _inherits(PlayButton, _Button);&#13;
&#13;
    function PlayButton(_ref) {&#13;
        var $view = _ref.$view,&#13;
            state = _ref.state;&#13;
&#13;
        _classCallCheck(this, PlayButton);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (PlayButton.__proto__ || Object.getPrototypeOf(PlayButton)).call(this, $view));&#13;
&#13;
        _this.state = state;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(PlayButton, [{&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            _get(PlayButton.prototype.__proto__ || Object.getPrototypeOf(PlayButton.prototype), "destroy", this).call(this);&#13;
            this.state = null;&#13;
        }&#13;
    }, {&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            if (this.state.isLoaded()) this._startPlaying();else if (this.state.isPlaying()) this._stopPlaying();&#13;
        }&#13;
    }, {&#13;
        key: "_startPlaying",&#13;
        value: function _startPlaying() {&#13;
            this.$view.addClass("selected");&#13;
            this.onStartPlayingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "_stopPlaying",&#13;
        value: function _stopPlaying() {&#13;
            this.$view.removeClass("selected");&#13;
            this.onStopPlayingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "onStartPlaying",&#13;
        set: function set(callback) {&#13;
            this.onStartPlayingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopPlaying",&#13;
        set: function set(callback) {&#13;
            this.onStopPlayingCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return PlayButton;&#13;
}(_Button2.Button);&#13;
&#13;
/***/ }),&#13;
/* 20 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Timer = exports.Timer = function () {&#13;
    function Timer($view) {&#13;
        _classCallCheck(this, Timer);&#13;
&#13;
        this.$view = $view;&#13;
        this.interval = null;&#13;
        this.currentMinutes = 0;&#13;
        this.currentSeconds = 0;&#13;
        this.loadedMinutes = 0;&#13;
        this.loadedSeconds = 0;&#13;
        this.isLoaded = false;&#13;
&#13;
        this.$view.css("z-index", "100");&#13;
        this._updateText();&#13;
    }&#13;
&#13;
    _createClass(Timer, [{&#13;
        key: "startCountdown",&#13;
        value: function startCountdown() {&#13;
            var _this = this;&#13;
&#13;
            this._clearCurrentTime();&#13;
            this.interval = setInterval(function () {&#13;
                _this._incrementTimer();&#13;
                _this._updateText();&#13;
            }, 1000);&#13;
        }&#13;
    }, {&#13;
        key: "startDecrementalCountdown",&#13;
        value: function startDecrementalCountdown(duration) {&#13;
            var _this2 = this;&#13;
&#13;
            this._clearCurrentTime();&#13;
            this.setDuration(duration);&#13;
            this.currentMinutes = this.loadedMinutes;&#13;
            this.currentSeconds = this.loadedSeconds;&#13;
            this._updateText();&#13;
            this.interval = setInterval(function () {&#13;
                _this2._decrementTimer();&#13;
                _this2._updateText();&#13;
            }, 1000);&#13;
        }&#13;
    }, {&#13;
        key: "stopCountdown",&#13;
        value: function stopCountdown() {&#13;
            clearInterval(this.interval);&#13;
            this._clearCurrentTime();&#13;
            this._updateText();&#13;
        }&#13;
    }, {&#13;
        key: "setDuration",&#13;
        value: function setDuration(duration) {&#13;
            this.loadedMinutes = parseInt(duration / 60);&#13;
            this.loadedSeconds = parseInt(duration % 60);&#13;
            this.isLoaded = true;&#13;
            this._updateText();&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            clearInterval(this.interval);&#13;
            this.isLoaded = false;&#13;
            this._clearCurrentTime();&#13;
            this._clearLoadedTime();&#13;
            this._updateText();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            clearInterval(this.interval);&#13;
            this.interval = null;&#13;
            this.$view.remove();&#13;
            this.$view = null;&#13;
        }&#13;
    }, {&#13;
        key: "_clearCurrentTime",&#13;
        value: function _clearCurrentTime() {&#13;
            this.currentMinutes = 0;&#13;
            this.currentSeconds = 0;&#13;
        }&#13;
    }, {&#13;
        key: "_clearLoadedTime",&#13;
        value: function _clearLoadedTime() {&#13;
            this.loadedMinutes = 0;&#13;
            this.loadedSeconds = 0;&#13;
        }&#13;
    }, {&#13;
        key: "_incrementTimer",&#13;
        value: function _incrementTimer() {&#13;
            this.currentSeconds++;&#13;
&#13;
            if (this.currentSeconds &gt;= 60) {&#13;
                this.currentSeconds = 0;&#13;
                this.currentMinutes++;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_decrementTimer",&#13;
        value: function _decrementTimer() {&#13;
            this.currentSeconds--;&#13;
&#13;
            if (this.currentSeconds &gt;= 60) {&#13;
                this.currentSeconds = 0;&#13;
                this.currentMinutes++;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_updateText",&#13;
        value: function _updateText() {&#13;
            this.$view[0].innerText = this.isLoaded ? this._generateTextTime(this.currentMinutes, this.currentSeconds) + " / " + this._generateTextTime(this.loadedMinutes, this.loadedSeconds) : this._generateTextTime(this.currentMinutes, this.currentSeconds);&#13;
        }&#13;
    }, {&#13;
        key: "_generateTextTime",&#13;
        value: function _generateTextTime(minutes, seconds) {&#13;
            var text = "";&#13;
            text += minutes &lt; 10 ? "0" + minutes : minutes;&#13;
            text += ":";&#13;
            text += seconds &lt; 10 ? "0" + seconds : seconds;&#13;
&#13;
            return text;&#13;
        }&#13;
    }]);&#13;
&#13;
    return Timer;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 21 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AddonState = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _BlobService = __webpack_require__(22);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var AddonState = exports.AddonState = function () {&#13;
    function AddonState() {&#13;
        _classCallCheck(this, AddonState);&#13;
&#13;
        this.recording = null;&#13;
        this.visibility = null;&#13;
    }&#13;
&#13;
    _createClass(AddonState, [{&#13;
        key: "setRecordingBlob",&#13;
        value: function setRecordingBlob(blob) {&#13;
            var _this = this;&#13;
&#13;
            _BlobService.BlobService.serialize(blob).then(function (recording) {&#13;
                return _this.recording = recording;&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "getRecordingBlob",&#13;
        value: function getRecordingBlob() {&#13;
            var _this2 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                if (_this2.recording) resolve(_BlobService.BlobService.deserialize(_this2.recording));&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "setVisibility",&#13;
        value: function setVisibility(isVisible) {&#13;
            this.visibility = isVisible ? true : false;&#13;
        }&#13;
    }, {&#13;
        key: "getVisibility",&#13;
        value: function getVisibility() {&#13;
            var self = this;&#13;
            return new Promise(function (resolve) {&#13;
                if (self.visibility != null) resolve(self.visibility);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this.recording = null;&#13;
            this.visibility = null;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.recording = null;&#13;
            this.visibility = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return AddonState;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 22 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var BlobService = exports.BlobService = function () {&#13;
    function BlobService() {&#13;
        _classCallCheck(this, BlobService);&#13;
    }&#13;
&#13;
    _createClass(BlobService, null, [{&#13;
        key: "serialize",&#13;
        value: function serialize(blob) {&#13;
            return new Promise(function (resolve) {&#13;
                var reader = new FileReader();&#13;
                reader.onloadend = function () {&#13;
                    return resolve(reader.result);&#13;
                };&#13;
                reader.readAsDataURL(blob);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "deserialize",&#13;
        value: function deserialize(base64Data) {&#13;
            var mediaSourceData = base64Data.split(",");&#13;
            var recording = mediaSourceData[1];&#13;
            var contentType = mediaSourceData[0].replace(";base64", "").replace("data:", "");&#13;
            return this._b64toBlob(recording, contentType);&#13;
        }&#13;
    }, {&#13;
        key: "_b64toBlob",&#13;
        value: function _b64toBlob(b64Data, contentType, sliceSize) {&#13;
            contentType = contentType || '';&#13;
            sliceSize = sliceSize || 512;&#13;
&#13;
            var byteCharacters = atob(b64Data);&#13;
            var byteArrays = [];&#13;
&#13;
            for (var offset = 0; offset &lt; byteCharacters.length; offset += sliceSize) {&#13;
                var slice = byteCharacters.slice(offset, offset + sliceSize);&#13;
&#13;
                var byteNumbers = new Array(slice.length);&#13;
                for (var i = 0; i &lt; slice.length; i++) {&#13;
                    byteNumbers[i] = slice.charCodeAt(i);&#13;
                }&#13;
&#13;
                var byteArray = new Uint8Array(byteNumbers);&#13;
&#13;
                byteArrays.push(byteArray);&#13;
            }&#13;
&#13;
            return new Blob(byteArrays, { type: contentType });&#13;
        }&#13;
    }]);&#13;
&#13;
    return BlobService;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 23 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var RecordingTimeLimiter = exports.RecordingTimeLimiter = function () {&#13;
    function RecordingTimeLimiter(maxTime) {&#13;
        _classCallCheck(this, RecordingTimeLimiter);&#13;
&#13;
        this.workingDelay = 0.2;&#13;
        this.maxTime = maxTime + this.workingDelay;&#13;
        this.counter = 0;&#13;
        this.interval;&#13;
        this.callback;&#13;
    }&#13;
&#13;
    _createClass(RecordingTimeLimiter, [{&#13;
        key: "startCountdown",&#13;
        value: function startCountdown() {&#13;
            var _this = this;&#13;
&#13;
            if (this.maxTime || this.callback) this.interval = setInterval(function () {&#13;
                return _this._incrementTimer();&#13;
            }, this.workingDelay * 1000);&#13;
        }&#13;
    }, {&#13;
        key: "stopCountdown",&#13;
        value: function stopCountdown() {&#13;
            clearInterval(this.interval);&#13;
            this.counter = 0;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.callback = function () {};&#13;
            clearInterval(this.interval);&#13;
            this.interval = null;&#13;
            this.callback = null;&#13;
        }&#13;
    }, {&#13;
        key: "_incrementTimer",&#13;
        value: function _incrementTimer() {&#13;
            this.counter += this.workingDelay;&#13;
            if (this.counter &gt;= this.maxTime) {&#13;
                this.stopCountdown();&#13;
                this.callback();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "onTimeExpired",&#13;
        set: function set(callback) {&#13;
            this.callback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return RecordingTimeLimiter;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 24 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var SoundIntensity = exports.SoundIntensity = function () {&#13;
    function SoundIntensity($view) {&#13;
        _classCallCheck(this, SoundIntensity);&#13;
&#13;
        this.$view = $view;&#13;
        this.volumeLevels = 6;&#13;
        this.interval = null;&#13;
    }&#13;
&#13;
    _createClass(SoundIntensity, [{&#13;
        key: "startAnalyzing",&#13;
        value: function startAnalyzing(analyser) {&#13;
            var _this = this;&#13;
&#13;
            this.interval = setInterval(function () {&#13;
                return _this._updateIntensity(analyser);&#13;
            }, 100);&#13;
        }&#13;
    }, {&#13;
        key: "stopAnalyzing",&#13;
        value: function stopAnalyzing() {&#13;
            clearInterval(this.interval);&#13;
            this._clearIntensity();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.stopAnalyzing();&#13;
            this.interval = null;&#13;
            this.$view.remove();&#13;
            this.$view = null;&#13;
        }&#13;
    }, {&#13;
        key: "_updateIntensity",&#13;
        value: function _updateIntensity(analyser) {&#13;
            var frequencyArray = new Uint8Array(analyser.frequencyBinCount);&#13;
            analyser.getByteFrequencyData(frequencyArray);&#13;
            var avgVolume = this._calculateAvgVolume(frequencyArray);&#13;
            var raisedVolume = this._raiseVolume(avgVolume);&#13;
            var alignedVolume = this._alignVolume(raisedVolume);&#13;
            var intensity = alignedVolume * this.volumeLevels;&#13;
&#13;
            this._setIntensity(intensity);&#13;
        }&#13;
    }, {&#13;
        key: "_calculateAvgVolume",&#13;
        value: function _calculateAvgVolume(volumeArray) {&#13;
            var sum = 0;&#13;
            var _iteratorNormalCompletion = true;&#13;
            var _didIteratorError = false;&#13;
            var _iteratorError = undefined;&#13;
&#13;
            try {&#13;
                for (var _iterator = volumeArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {&#13;
                    var i = _step.value;&#13;
&#13;
                    sum += i;&#13;
                }&#13;
            } catch (err) {&#13;
                _didIteratorError = true;&#13;
                _iteratorError = err;&#13;
            } finally {&#13;
                try {&#13;
                    if (!_iteratorNormalCompletion &amp;&amp; _iterator.return) {&#13;
                        _iterator.return();&#13;
                    }&#13;
                } finally {&#13;
                    if (_didIteratorError) {&#13;
                        throw _iteratorError;&#13;
                    }&#13;
                }&#13;
            }&#13;
&#13;
            return sum / volumeArray.length;&#13;
        }&#13;
    }, {&#13;
        key: "_raiseVolume",&#13;
        value: function _raiseVolume(volume) {&#13;
            return volume &gt; 0 ? volume * 1.2 : volume;&#13;
        }&#13;
    }, {&#13;
        key: "_alignVolume",&#13;
        value: function _alignVolume(volume) {&#13;
            volume = volume &gt; 0 ? volume : 0;&#13;
            volume = volume &lt; 64 ? volume : 64;&#13;
            return volume / 64;&#13;
        }&#13;
    }, {&#13;
        key: "_setIntensity",&#13;
        value: function _setIntensity(intensity) {&#13;
            this._clearIntensity();&#13;
            for (var currentLevel = 1; currentLevel &lt;= intensity; currentLevel++) {&#13;
                var levelId = "#sound-intensity-" + currentLevel;&#13;
                var $level = this.$view.find(levelId);&#13;
                $level.addClass("selected");&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_clearIntensity",&#13;
        value: function _clearIntensity() {&#13;
            for (var currentLevel = 1; currentLevel &lt;= this.volumeLevels; currentLevel++) {&#13;
                var levelId = "#sound-intensity-" + currentLevel;&#13;
                var $level = this.$view.find(levelId);&#13;
                $level.removeClass("selected");&#13;
            }&#13;
        }&#13;
    }]);&#13;
&#13;
    return SoundIntensity;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 25 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.MediaAnalyserService = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _AnalyserProvider = __webpack_require__(26);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var MediaAnalyserService = exports.MediaAnalyserService = function () {&#13;
    function MediaAnalyserService() {&#13;
        _classCallCheck(this, MediaAnalyserService);&#13;
&#13;
        this.audioContext = new (AudioContext || webkitAudioContext)();&#13;
        this.mediaStreamSource = null;&#13;
        this.mediaElementSource = null;&#13;
    }&#13;
&#13;
    _createClass(MediaAnalyserService, [{&#13;
        key: "createAnalyserFromStream",&#13;
        value: function createAnalyserFromStream(stream) {&#13;
            var _this = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                _this.mediaStreamSource = _this.audioContext.createMediaStreamSource(stream);&#13;
&#13;
                var analyser = _AnalyserProvider.AnalyserProvider.create(_this.audioContext);&#13;
                _this.mediaStreamSource.connect(analyser);&#13;
&#13;
                resolve(analyser);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "createAnalyserFromElement",&#13;
        value: function createAnalyserFromElement(htmlMediaElement) {&#13;
            var _this2 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                if (!_this2.mediaElementSource) _this2.mediaElementSource = _this2.audioContext.createMediaElementSource(htmlMediaElement);&#13;
&#13;
                var analyser = _AnalyserProvider.AnalyserProvider.create(_this2.audioContext);&#13;
                _this2.mediaElementSource.connect(analyser);&#13;
                analyser.connect(_this2.audioContext.destination);&#13;
&#13;
                resolve(analyser);&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "closeAnalyzing",&#13;
        value: function closeAnalyzing() {&#13;
            if (this.mediaStreamSource) this.mediaStreamSource.disconnect();&#13;
            if (this.mediaElementSource) this.mediaElementSource.disconnect();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.closeAnalyzing();&#13;
            this.audioContext.close();&#13;
            this.mediaElementSource = null;&#13;
            this.audioContext = null;&#13;
            this.mediaStreamSource = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return MediaAnalyserService;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 26 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var AnalyserProvider = exports.AnalyserProvider = function () {&#13;
    function AnalyserProvider() {&#13;
        _classCallCheck(this, AnalyserProvider);&#13;
    }&#13;
&#13;
    _createClass(AnalyserProvider, null, [{&#13;
        key: "create",&#13;
        value: function create(audioContext) {&#13;
            if (DevicesUtils.isFirefox()) return this._createForFirefox(audioContext);else return this._createForOther(audioContext);&#13;
        }&#13;
    }, {&#13;
        key: "_createForFirefox",&#13;
        value: function _createForFirefox(audioContext) {&#13;
            var analyser = this._createAnalyser(audioContext);&#13;
            analyser.connect(audioContext.destination);&#13;
&#13;
            return analyser;&#13;
        }&#13;
    }, {&#13;
        key: "_createForOther",&#13;
        value: function _createForOther(audioContext) {&#13;
            return this._createAnalyser(audioContext);&#13;
        }&#13;
    }, {&#13;
        key: "_createAnalyser",&#13;
        value: function _createAnalyser(audioContext) {&#13;
            var analyser = audioContext.createAnalyser();&#13;
            analyser.fftSize = 1024;&#13;
            analyser.smoothingTimeConstant = 0.3;&#13;
            return analyser;&#13;
        }&#13;
    }]);&#13;
&#13;
    return AnalyserProvider;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 27 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AudioLoader = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _Loader2 = __webpack_require__(28);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var AudioLoader = exports.AudioLoader = function (_Loader) {&#13;
    _inherits(AudioLoader, _Loader);&#13;
&#13;
    function AudioLoader($view) {&#13;
        _classCallCheck(this, AudioLoader);&#13;
&#13;
        return _possibleConstructorReturn(this, (AudioLoader.__proto__ || Object.getPrototypeOf(AudioLoader)).call(this, $view));&#13;
    }&#13;
&#13;
    _createClass(AudioLoader, [{&#13;
        key: "show",&#13;
        value: function show() {&#13;
            this.$view.addClass("audio-loader");&#13;
        }&#13;
    }, {&#13;
        key: "hide",&#13;
        value: function hide() {&#13;
            this.$view.removeClass("audio-loader");&#13;
        }&#13;
    }]);&#13;
&#13;
    return AudioLoader;&#13;
}(_Loader2.Loader);&#13;
&#13;
/***/ }),&#13;
/* 28 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Loader = exports.Loader = function () {&#13;
    function Loader($view) {&#13;
        _classCallCheck(this, Loader);&#13;
&#13;
        if (this.constructor === Loader) throw new Error("Cannot create an instance of Loader abstract class");&#13;
&#13;
        this.$view = $view;&#13;
    }&#13;
&#13;
    _createClass(Loader, [{&#13;
        key: "show",&#13;
        value: function show() {&#13;
            throw new Error("Show method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "hide",&#13;
        value: function hide() {&#13;
            throw new Error("Hide method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.$view.remove();&#13;
            this.$view = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return Loader;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 29 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var SoundEffect = exports.SoundEffect = function () {&#13;
    function SoundEffect(sound, $wrapper) {&#13;
        _classCallCheck(this, SoundEffect);&#13;
&#13;
        this.sound = sound;&#13;
        this.$wrapper = $wrapper;&#13;
        this.audioNode = document.createElement("audio");&#13;
        this.audioNode.src = sound;&#13;
        this.audioNode.style.display = "none";&#13;
        this.$wrapper.append(this.audioNode);&#13;
        this.startCallback = function () {};&#13;
        this.stopCallback = function () {};&#13;
    }&#13;
&#13;
    _createClass(SoundEffect, [{&#13;
        key: "isValid",&#13;
        value: function isValid() {&#13;
            return this.sound != "" &amp;&amp; this.sound != null &amp;&amp; typeof this.sound != "undefined";&#13;
        }&#13;
    }, {&#13;
        key: "playSound",&#13;
        value: function playSound() {&#13;
            this.startCallback();&#13;
            var playPromise = this.audioNode.play();&#13;
            if (playPromise !== undefined) {&#13;
                playPromise.catch(function (error) {&#13;
                    console.log(error);&#13;
                });&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.audioNode.pause();&#13;
            this.audioNode.src = "";&#13;
            this.audioNode.remove();&#13;
            this.audioNode = null;&#13;
            this.$wrapper.remove();&#13;
            this.$wrapper = null;&#13;
        }&#13;
    }, {&#13;
        key: "isBrowserRequiredReloadNode",&#13;
        value: function isBrowserRequiredReloadNode() {&#13;
            var navU = window.navigator.userAgent;&#13;
            return navU.indexOf('Android') &gt; -1 &amp;&amp; navU.indexOf('Mozilla/5.0') &gt; -1 &amp;&amp; navU.indexOf('AppleWebKit') &gt; -1;&#13;
        }&#13;
    }, {&#13;
        key: "_reloadAudioNode",&#13;
        value: function _reloadAudioNode() {&#13;
            this.audioNode.remove();&#13;
            this.audioNode = document.createElement("audio");&#13;
            this.audioNode.src = this.sound;&#13;
            this.audioNode.style.display = "none";&#13;
            this.$wrapper.append(this.audioNode);&#13;
            this.onStopCallback = this.stopCallback;&#13;
        }&#13;
    }, {&#13;
        key: "onStartCallback",&#13;
        set: function set(callback) {&#13;
            this.startCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopCallback",&#13;
        set: function set(callback) {&#13;
            var _this = this;&#13;
&#13;
            this.stopCallback = callback;&#13;
            this.audioNode.onended = function () {&#13;
                callback();&#13;
                if (_this.isBrowserRequiredReloadNode()) _this._reloadAudioNode();&#13;
            };&#13;
        }&#13;
    }]);&#13;
&#13;
    return SoundEffect;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 30 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.RecordButtonSoundEffect = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _RecordButton2 = __webpack_require__(2);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var RecordButtonSoundEffect = exports.RecordButtonSoundEffect = function (_RecordButton) {&#13;
    _inherits(RecordButtonSoundEffect, _RecordButton);&#13;
&#13;
    function RecordButtonSoundEffect(recordButton, startRecordingSoundEffect, stopRecordingSoundEffect) {&#13;
        _classCallCheck(this, RecordButtonSoundEffect);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (RecordButtonSoundEffect.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect)).call(this, { $view: recordButton.$view, state: recordButton.state }));&#13;
&#13;
        _this.startRecordingSoundEffect = startRecordingSoundEffect;&#13;
        _this.stopRecordingSoundEffect = stopRecordingSoundEffect;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(RecordButtonSoundEffect, [{&#13;
        key: "_startRecording",&#13;
        value: function _startRecording() {&#13;
            if (this.startRecordingSoundEffect.isValid()) this._recordWithSoundEffect();else _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_startRecording", this).call(this);&#13;
        }&#13;
    }, {&#13;
        key: "_recordWithSoundEffect",&#13;
        value: function _recordWithSoundEffect() {&#13;
            this.startRecordingSoundEffect.onStartCallback = function () {};&#13;
            this.startRecordingSoundEffect.onStopCallback = function () {};&#13;
            _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_startRecording", this).call(this);&#13;
            this._playStartRecordingSoundEffect();&#13;
        }&#13;
    }, {&#13;
        key: "_playStartRecordingSoundEffect",&#13;
        value: function _playStartRecordingSoundEffect() {&#13;
            var _this2 = this;&#13;
&#13;
            if (this.startRecordingSoundEffect.isBrowserRequiredReloadNode()) setTimeout(function () {&#13;
                return _this2.startRecordingSoundEffect.playSound();&#13;
            }, 1000);else this.startRecordingSoundEffect.playSound();&#13;
        }&#13;
    }, {&#13;
        key: "_stopRecording",&#13;
        value: function _stopRecording() {&#13;
            if (this.stopRecordingSoundEffect.isValid()) this._onStopRecordingWithSoundEffect();else _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_stopRecording", this).call(this);&#13;
        }&#13;
    }, {&#13;
        key: "_onStopRecordingWithSoundEffect",&#13;
        value: function _onStopRecordingWithSoundEffect() {&#13;
            var _this3 = this;&#13;
&#13;
            this.stopRecordingSoundEffect.onStartCallback = function () {&#13;
                _get(RecordButtonSoundEffect.prototype.__proto__ || Object.getPrototypeOf(RecordButtonSoundEffect.prototype), "_stopRecording", _this3).call(_this3);&#13;
                _this3.deactivate();&#13;
            };&#13;
            this.stopRecordingSoundEffect.onStopCallback = function () {&#13;
                _this3.activate();&#13;
            };&#13;
            this.stopRecordingSoundEffect.playSound();&#13;
        }&#13;
    }]);&#13;
&#13;
    return RecordButtonSoundEffect;&#13;
}(_RecordButton2.RecordButton);&#13;
&#13;
/***/ }),&#13;
/* 31 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var AddonViewService = exports.AddonViewService = function () {&#13;
    function AddonViewService($wrapperView) {&#13;
        _classCallCheck(this, AddonViewService);&#13;
&#13;
        this.$view = $wrapperView;&#13;
    }&#13;
&#13;
    _createClass(AddonViewService, [{&#13;
        key: 'setVisibility',&#13;
        value: function setVisibility(isVisible) {&#13;
            this.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
        }&#13;
    }, {&#13;
        key: 'activate',&#13;
        value: function activate() {&#13;
            this.$view.removeClass("disabled");&#13;
        }&#13;
    }, {&#13;
        key: 'deactivate',&#13;
        value: function deactivate() {&#13;
            this.$view.addClass("disabled");&#13;
        }&#13;
    }, {&#13;
        key: 'destroy',&#13;
        value: function destroy() {&#13;
            this.$view = null;&#13;
        }&#13;
    }]);&#13;
&#13;
    return AddonViewService;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 32 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AudioResourcesProvider = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _ResourcesProvider2 = __webpack_require__(33);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var AudioResourcesProvider = exports.AudioResourcesProvider = function (_ResourcesProvider) {&#13;
    _inherits(AudioResourcesProvider, _ResourcesProvider);&#13;
&#13;
    function AudioResourcesProvider() {&#13;
        _classCallCheck(this, AudioResourcesProvider);&#13;
&#13;
        return _possibleConstructorReturn(this, (AudioResourcesProvider.__proto__ || Object.getPrototypeOf(AudioResourcesProvider)).apply(this, arguments));&#13;
    }&#13;
&#13;
    _createClass(AudioResourcesProvider, [{&#13;
        key: "_getOptions",&#13;
        value: function _getOptions() {&#13;
            return {&#13;
                audio: DevicesUtils.isEdge() ? true : {&#13;
                    echoCancellation: false&#13;
                }&#13;
            };&#13;
        }&#13;
    }]);&#13;
&#13;
    return AudioResourcesProvider;&#13;
}(_ResourcesProvider2.ResourcesProvider);&#13;
&#13;
/***/ }),&#13;
/* 33 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var ResourcesProvider = exports.ResourcesProvider = function () {&#13;
    function ResourcesProvider($view) {&#13;
        _classCallCheck(this, ResourcesProvider);&#13;
&#13;
        this.RESOURCES_ERROR_MESSAGE = "Multimedia resources not available";&#13;
&#13;
        if (this.constructor === ResourcesProvider) throw new Error("Cannot create an instance of ResourcesProvider abstract class");&#13;
&#13;
        this.$view = $view;&#13;
        this.stream = null;&#13;
    }&#13;
&#13;
    _createClass(ResourcesProvider, [{&#13;
        key: "getMediaResources",&#13;
        value: function getMediaResources() {&#13;
            var _this = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                navigator.mediaDevices.getUserMedia(_this._getOptions()).then(function (stream) {&#13;
                    _this.stream = stream;&#13;
                    resolve(stream);&#13;
                }).catch(function (error) {&#13;
                    console.error(error);&#13;
                    DOMOperationsUtils.showErrorMessage(_this.$view, [_this.RESOURCES_ERROR_MESSAGE], "0");&#13;
                });&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            if (this.stream) {&#13;
                this.stream.stop();&#13;
                this.stream = null;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_getOptions",&#13;
        value: function _getOptions() {&#13;
            throw new Error("GetOptions accessor is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return ResourcesProvider;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 34 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AudioRecorder = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _BaseRecorder2 = __webpack_require__(35);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var AudioRecorder = exports.AudioRecorder = function (_BaseRecorder) {&#13;
    _inherits(AudioRecorder, _BaseRecorder);&#13;
&#13;
    function AudioRecorder() {&#13;
        _classCallCheck(this, AudioRecorder);&#13;
&#13;
        return _possibleConstructorReturn(this, (AudioRecorder.__proto__ || Object.getPrototypeOf(AudioRecorder)).apply(this, arguments));&#13;
    }&#13;
&#13;
    _createClass(AudioRecorder, [{&#13;
        key: "_getOptions",&#13;
        value: function _getOptions() {&#13;
            return {&#13;
                type: 'audio',&#13;
                numberOfAudioChannels: DevicesUtils.isEdge() ? 1 : 2,&#13;
                checkForInactiveTracks: true,&#13;
                bufferSize: 16384,&#13;
                disableLogs: true&#13;
            };&#13;
        }&#13;
    }]);&#13;
&#13;
    return AudioRecorder;&#13;
}(_BaseRecorder2.BaseRecorder);&#13;
&#13;
/***/ }),&#13;
/* 35 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.BaseRecorder = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _Recorder2 = __webpack_require__(36);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var BaseRecorder = exports.BaseRecorder = function (_Recorder) {&#13;
    _inherits(BaseRecorder, _Recorder);&#13;
&#13;
    function BaseRecorder() {&#13;
        _classCallCheck(this, BaseRecorder);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (BaseRecorder.__proto__ || Object.getPrototypeOf(BaseRecorder)).call(this));&#13;
&#13;
        if (_this.constructor === BaseRecorder) throw new Error("Cannot create an instance of Recorder abstract class");&#13;
&#13;
        _this.recorder = null;&#13;
        _this.eventBus = null;&#13;
        _this.sourceID = '';&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(BaseRecorder, [{&#13;
        key: "startRecording",&#13;
        value: function startRecording(stream) {&#13;
            this._clearRecorder();&#13;
            this.recorder = RecordRTC(stream, this._getOptions());&#13;
            this.recorder.startRecording();&#13;
            this._onStartRecordingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "stopRecording",&#13;
        value: function stopRecording() {&#13;
            var _this2 = this;&#13;
&#13;
            var promise = new Promise(function (resolve) {&#13;
                return _this2.recorder.stopRecording(function () {&#13;
                    return resolve(_this2.recorder.getBlob());&#13;
                });&#13;
            });&#13;
            var self = this;&#13;
            promise.then(function () {&#13;
                return self._onStopRecordingCallback(self);&#13;
            });&#13;
&#13;
            return promise;&#13;
        }&#13;
    }, {&#13;
        key: "setEventBus",&#13;
        value: function setEventBus(eventBus, sourceID) {&#13;
            this.eventBus = eventBus;&#13;
            this.sourceID = sourceID;&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this.onAvailableRecordingCallback = function (blob) {};&#13;
&#13;
            if (this.recorder) {&#13;
                this.recorder.stopRecording();&#13;
                this._clearRecorder();&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_clearRecorder",&#13;
        value: function _clearRecorder() {&#13;
            if (this.recorder) {&#13;
                this.recorder.destroy();&#13;
                this.recorder = null;&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_onStartRecordingCallback",&#13;
        value: function _onStartRecordingCallback() {&#13;
            this._sendEventCallback(this, 'start');&#13;
        }&#13;
    }, {&#13;
        key: "_onStopRecordingCallback",&#13;
        value: function _onStopRecordingCallback(self) {&#13;
            self._sendEventCallback(self, 'stop');&#13;
        }&#13;
    }, {&#13;
        key: "_sendEventCallback",&#13;
        value: function _sendEventCallback(self, value) {&#13;
            if (self.eventBus) {&#13;
                var eventData = {&#13;
                    'source': self.sourceID,&#13;
                    'item': 'recorder',&#13;
                    'value': value,&#13;
                    'score': ''&#13;
                };&#13;
                self.eventBus.sendEvent('ValueChanged', eventData);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_getOptions",&#13;
        value: function _getOptions() {&#13;
            throw new Error("GetOptions accessor is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return BaseRecorder;&#13;
}(_Recorder2.Recorder);&#13;
&#13;
/***/ }),&#13;
/* 36 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Recorder = exports.Recorder = function () {&#13;
    function Recorder() {&#13;
        _classCallCheck(this, Recorder);&#13;
&#13;
        if (this.constructor === Recorder) throw new Error("Cannot create an instance of Recorder abstract class");&#13;
    }&#13;
&#13;
    _createClass(Recorder, [{&#13;
        key: "startRecording",&#13;
        value: function startRecording(stream) {&#13;
            throw new Error("StartRecording method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "stopRecording",&#13;
        value: function stopRecording() {&#13;
            throw new Error("StopRecording method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "setEventBus",&#13;
        value: function setEventBus(eventBus, sourceID) {&#13;
            throw new Error("setEventBus method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            throw new Error("Destroy method is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return Recorder;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 37 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.AudioPlayer = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _BasePlayer2 = __webpack_require__(38);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var AudioPlayer = exports.AudioPlayer = function (_BasePlayer) {&#13;
    _inherits(AudioPlayer, _BasePlayer);&#13;
&#13;
    function AudioPlayer($view) {&#13;
        _classCallCheck(this, AudioPlayer);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (AudioPlayer.__proto__ || Object.getPrototypeOf(AudioPlayer)).call(this, $view));&#13;
&#13;
        _this.mediaNode.style.display = "hidden";&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(AudioPlayer, [{&#13;
        key: "_createMediaNode",&#13;
        value: function _createMediaNode() {&#13;
            return document.createElement("audio");&#13;
        }&#13;
    }]);&#13;
&#13;
    return AudioPlayer;&#13;
}(_BasePlayer2.BasePlayer);&#13;
&#13;
/***/ }),&#13;
/* 38 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.BasePlayer = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _Player2 = __webpack_require__(39);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var BasePlayer = exports.BasePlayer = function (_Player) {&#13;
    _inherits(BasePlayer, _Player);&#13;
&#13;
    function BasePlayer($view) {&#13;
        _classCallCheck(this, BasePlayer);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (BasePlayer.__proto__ || Object.getPrototypeOf(BasePlayer)).call(this));&#13;
&#13;
        if (_this.constructor === BasePlayer) throw new Error("Cannot create an instance of BasePlayer abstract class");&#13;
&#13;
        _this.$view = $view;&#13;
        _this.hasRecording = false;&#13;
        _this.duration = null;&#13;
        _this.mediaNode = _this._createMediaNode();&#13;
        _this.mediaNode.controls = false;&#13;
        _this.$view.append(_this.mediaNode);&#13;
        _this.eventBus = null;&#13;
        _this.sourceID = '';&#13;
        _this.item = '';&#13;
&#13;
        _this._enableEventsHandling();&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(BasePlayer, [{&#13;
        key: "setRecording",&#13;
        value: function setRecording(source) {&#13;
            var _this2 = this;&#13;
&#13;
            this.mediaNode.src = source;&#13;
            this._getDuration().then(function (duration) {&#13;
                _this2.onDurationChangeCallback(duration);&#13;
                _this2.duration = duration;&#13;
                _this2.hasRecording = true;&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "startPlaying",&#13;
        value: function startPlaying() {&#13;
            var _this3 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                _this3.mediaNode.muted = false;&#13;
                if (_this3._isNotOnlineResources(_this3.mediaNode.src)) resolve(_this3.mediaNode);&#13;
                _this3.mediaNode.play();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "stopPlaying",&#13;
        value: function stopPlaying() {&#13;
            var _this4 = this;&#13;
&#13;
            return new Promise(function (resolve) {&#13;
                _this4.mediaNode.pause();&#13;
                _this4.mediaNode.currentTime = 0;&#13;
                resolve();&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "startStreaming",&#13;
        value: function startStreaming(stream) {&#13;
            this._disableEventsHandling();&#13;
            setSrcObject(stream, this.mediaNode);&#13;
            this.mediaNode.muted = true;&#13;
            this.mediaNode.play();&#13;
        }&#13;
    }, {&#13;
        key: "stopStreaming",&#13;
        value: function stopStreaming() {&#13;
            if (!this.mediaNode.paused) this.stopNextStopEvent = true;&#13;
            this.stopPlaying();&#13;
            this._enableEventsHandling();&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            this._disableEventsHandling();&#13;
            this.mediaNode.src = "";&#13;
            this.mediaNode.remove();&#13;
            this.hasRecording = false;&#13;
            this.duration = null;&#13;
            this.mediaNode = this._createMediaNode();&#13;
            this.mediaNode.controls = false;&#13;
            this.$view.append(this.mediaNode);&#13;
            this._enableEventsHandling();&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            this._disableEventsHandling();&#13;
            this.stopPlaying();&#13;
            this.mediaNode.src = "";&#13;
            this.mediaNode.remove();&#13;
            this.hasRecording = null;&#13;
            this.duration = null;&#13;
            this.$view.remove();&#13;
            this.mediaNode = null;&#13;
            this.$view = null;&#13;
        }&#13;
    }, {&#13;
        key: "setEventBus",&#13;
        value: function setEventBus(eventBus, sourceID, item) {&#13;
            this.eventBus = eventBus;&#13;
            this.sourceID = sourceID;&#13;
            this.item = item;&#13;
        }&#13;
    }, {&#13;
        key: "_enableEventsHandling",&#13;
        value: function _enableEventsHandling() {&#13;
            var _this5 = this;&#13;
&#13;
            this.mediaNode.onloadstart = function () {&#13;
                return _this5.onStartLoadingCallback();&#13;
            };&#13;
            this.mediaNode.oncanplay = function () {&#13;
                return _this5.onEndLoadingCallback();&#13;
            };&#13;
            this.mediaNode.onended = function () {&#13;
                return _this5.onEndPlayingCallback();&#13;
            };&#13;
            this.mediaNode.onplay = function () {&#13;
                return _this5._onPlayCallback();&#13;
            };&#13;
            this.mediaNode.onpause = function () {&#13;
                return _this5._onPausedCallback();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "_disableEventsHandling",&#13;
        value: function _disableEventsHandling() {&#13;
            this.mediaNode.onloadstart = null;&#13;
            this.mediaNode.oncanplay = null;&#13;
            this.mediaNode.onended = null;&#13;
            this.mediaNode.onplay = function () {&#13;
                return null;&#13;
            };&#13;
            this.mediaNode.onpause = function () {&#13;
                return null;&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "_getDuration",&#13;
        value: function _getDuration() {&#13;
            var _this6 = this;&#13;
&#13;
            // faster resolution then&#13;
            // this.mediaNode.ondurationchange = () =&gt; this.onDurationChangeCallback(this.mediaNode.duration)&#13;
            return new Promise(function (resolve) {&#13;
                var playerMock = new Audio(_this6.mediaNode.src);&#13;
                playerMock.addEventListener("durationchange", function () {&#13;
                    if (this.duration != Infinity) {&#13;
                        resolve(this.duration);&#13;
                        playerMock.src = "";&#13;
                        playerMock.remove();&#13;
                    }&#13;
                }, false);&#13;
                playerMock.load();&#13;
                playerMock.currentTime = 24 * 60 * 60; // fake big time&#13;
                playerMock.volume = 0;&#13;
            });&#13;
        }&#13;
    }, {&#13;
        key: "_isNotOnlineResources",&#13;
        value: function _isNotOnlineResources(source) {&#13;
            return !(source.startsWith("www.") || source.startsWith("http://") || source.startsWith("https://"));&#13;
        }&#13;
    }, {&#13;
        key: "_onPlayCallback",&#13;
        value: function _onPlayCallback() {&#13;
            this._sendEventCallback('playing');&#13;
        }&#13;
    }, {&#13;
        key: "_onPausedCallback",&#13;
        value: function _onPausedCallback() {&#13;
            if (this.stopNextStopEvent) {&#13;
                this.stopNextStopEvent = false;&#13;
            } else {&#13;
                this._sendEventCallback('stop');&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_sendEventCallback",&#13;
        value: function _sendEventCallback(value) {&#13;
            if (this.eventBus) {&#13;
                var eventData = {&#13;
                    'source': this.sourceID,&#13;
                    'item': this.item,&#13;
                    'value': value,&#13;
                    'score': ''&#13;
                };&#13;
                this.eventBus.sendEvent('ValueChanged', eventData);&#13;
            }&#13;
        }&#13;
    }, {&#13;
        key: "_createMediaNode",&#13;
        value: function _createMediaNode() {&#13;
            throw new Error("GetMediaNode accessor is not implemented");&#13;
        }&#13;
    }]);&#13;
&#13;
    return BasePlayer;&#13;
}(_Player2.Player);&#13;
&#13;
/***/ }),&#13;
/* 39 */&#13;
/***/ (function(module, exports) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
var Player = exports.Player = function () {&#13;
    function Player() {&#13;
        _classCallCheck(this, Player);&#13;
&#13;
        if (this.constructor === Player) throw new Error("Cannot create an instance of Player abstract class");&#13;
    }&#13;
&#13;
    _createClass(Player, [{&#13;
        key: "setRecording",&#13;
        value: function setRecording(source) {&#13;
            throw new Error("SetRecording method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "startPlaying",&#13;
        value: function startPlaying() {&#13;
            throw new Error("StartPlaying method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "stopPlaying",&#13;
        value: function stopPlaying() {&#13;
            throw new Error("StopPlaying method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "startStreaming",&#13;
        value: function startStreaming(stream) {&#13;
            throw new Error("StartStreaming method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "stopStreaming",&#13;
        value: function stopStreaming() {&#13;
            throw new Error("StopStreaming method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "setEventBus",&#13;
        value: function setEventBus(eventBus, sourceID) {&#13;
            throw new Error("setEventBus method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "reset",&#13;
        value: function reset() {&#13;
            throw new Error("Reset method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            throw new Error("Destroy method is not implemented");&#13;
        }&#13;
    }, {&#13;
        key: "onStartLoading",&#13;
        set: function set(callback) {&#13;
            this.onStartLoadingCallback = function () {&#13;
                return callback();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "onEndLoading",&#13;
        set: function set(callback) {&#13;
            this.onEndLoadingCallback = function () {&#13;
                return callback();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "onEndPlaying",&#13;
        set: function set(callback) {&#13;
            this.onEndPlayingCallback = function () {&#13;
                return callback();&#13;
            };&#13;
        }&#13;
    }, {&#13;
        key: "onDurationChange",&#13;
        set: function set(callback) {&#13;
            this.onDurationChangeCallback = function (duration) {&#13;
                return callback(duration);&#13;
            };&#13;
        }&#13;
    }]);&#13;
&#13;
    return Player;&#13;
}();&#13;
&#13;
/***/ }),&#13;
/* 40 */&#13;
/***/ (function(module, exports, __webpack_require__) {&#13;
&#13;
Object.defineProperty(exports, "__esModule", {&#13;
    value: true&#13;
});&#13;
exports.DefaultRecordingPlayButton = undefined;&#13;
&#13;
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i &lt; props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();&#13;
&#13;
var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };&#13;
&#13;
var _Button2 = __webpack_require__(0);&#13;
&#13;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }&#13;
&#13;
function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call &amp;&amp; (typeof call === "object" || typeof call === "function") ? call : self; }&#13;
&#13;
function _inherits(subClass, superClass) { if (typeof superClass !== "function" &amp;&amp; superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }&#13;
&#13;
var DefaultRecordingPlayButton = exports.DefaultRecordingPlayButton = function (_Button) {&#13;
    _inherits(DefaultRecordingPlayButton, _Button);&#13;
&#13;
    function DefaultRecordingPlayButton(_ref) {&#13;
        var $view = _ref.$view,&#13;
            state = _ref.state,&#13;
            defaultRecording = _ref.defaultRecording;&#13;
&#13;
        _classCallCheck(this, DefaultRecordingPlayButton);&#13;
&#13;
        var _this = _possibleConstructorReturn(this, (DefaultRecordingPlayButton.__proto__ || Object.getPrototypeOf(DefaultRecordingPlayButton)).call(this, $view));&#13;
&#13;
        _this.state = state;&#13;
        _this.defaultRecording = defaultRecording;&#13;
        return _this;&#13;
    }&#13;
&#13;
    _createClass(DefaultRecordingPlayButton, [{&#13;
        key: "destroy",&#13;
        value: function destroy() {&#13;
            _get(DefaultRecordingPlayButton.prototype.__proto__ || Object.getPrototypeOf(DefaultRecordingPlayButton.prototype), "destroy", this).call(this);&#13;
            this.state = null;&#13;
        }&#13;
    }, {&#13;
        key: "_eventHandler",&#13;
        value: function _eventHandler() {&#13;
            if ((this.state.isLoaded() || this.state.isLoadedDefaultRecording()) &amp;&amp; this.defaultRecording != "") this._startPlaying();else if (this.state.isPlayingDefaultRecording()) this._stopPlaying();&#13;
        }&#13;
    }, {&#13;
        key: "_startPlaying",&#13;
        value: function _startPlaying() {&#13;
            this.$view.addClass("selected");&#13;
            this.onStartPlayingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "_stopPlaying",&#13;
        value: function _stopPlaying() {&#13;
            this.$view.removeClass("selected");&#13;
            this.onStopPlayingCallback();&#13;
        }&#13;
    }, {&#13;
        key: "onStartPlaying",&#13;
        set: function set(callback) {&#13;
            this.onStartPlayingCallback = callback;&#13;
        }&#13;
    }, {&#13;
        key: "onStopPlaying",&#13;
        set: function set(callback) {&#13;
            this.onStopPlayingCallback = callback;&#13;
        }&#13;
    }]);&#13;
&#13;
    return DefaultRecordingPlayButton;&#13;
}(_Button2.Button);&#13;
&#13;
/***/ })&#13;
/******/ ]);&#13;
</presenter></addon>