<?xml version="1.0" encoding="UTF-8" standalone="no"?><addon xmlns="http://icplayer.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="multiplegap" xsi:schemaLocation="http://icplayer.com ../../tools/addon.xsd">
	<model>
		<property name="Orientation" nameLabel="multiplegap_property_orientation" type="{horizontal, vertical}"/>
		<property name="Source type" nameLabel="multiplegap_property_source_type" type="{images, texts}"/>
		<property name="Items" nameLabel="multiplegap_property_items" type="list">
			<property name="Answer ID" nameLabel="multiplegap_property_answer_id" type="string"/>
		</property>
        <property name="wrapItems" nameLabel="multiplegap_property_wrap_items" type="boolean"/>
		<property name="Item width" nameLabel="multiplegap_property_item_width" type="string"/>
		<property name="Item height" nameLabel="multiplegap_property_item_height" type="string"/>
		<property name="Item spacing" nameLabel="multiplegap_property_item_spacing" type="string"/>
		<property name="Stretch images?" nameLabel="multiplegap_property_stretch_images" type="boolean"/>
		<property name="Item horizontal align" nameLabel="multiplegap_property_item_horizontal_align" type="{none, left, right, center}"/>
		<property name="Item vertical align" nameLabel="multiplegap_property_item_vertical_align" type="{none, top, bottom, center}"/>
		<property name="Maximum item count" nameLabel="multiplegap_property_maximum_item_count" type="string"/>
		<property name="Is not an activity" nameLabel="multiplegap_property_is_not_an_activity" type="boolean"/>
        <property name="Number of repetitions" nameLabel="multiplegap_property_number_of_repetitions" type="string"/>
        <property name="ID repeated element" nameLabel="multiplegap_property_id_repeated_element" type="string"/>
        <property displayName="Block wrong answers" name="Block wrong answers" nameLabel="multiplegap_property_block_wrong_answers" type="boolean"/>
		<property displayName="Lang attribute" name="langAttribute" nameLabel="multiple_property_lang_attribute" type="string"/>
		<property displayName="Speech texts" name="speechTexts" nameLabel="multiplegap_property_speech_texts" type="staticlist">
            <property name="Inserted" nameLabel="multiplegap_property_inserted" type="staticrow">
                <property name="Inserted" nameLabel="multiplegap_property_inserted" type="string"/>
            </property>

            <property name="Removed" nameLabel="multiplegap_property_removed" type="staticrow">
                <property name="Removed" nameLabel="multiplegap_property_removed" type="string"/>
            </property>

			<property name="Empty" nameLabel="multiplegap_property_empty" type="staticrow">
                <property name="Empty" nameLabel="multiplegap_property_empty" type="string"/>
            </property>

			<property name="Correct" nameLabel="multiplegap_property_correct" type="staticrow">
                <property name="Correct" nameLabel="multiplegap_property_correct" type="string"/>
            </property>

			<property name="Wrong" nameLabel="multiplegap_property_wrong" type="staticrow">
                <property name="Wrong" nameLabel="multiplegap_property_wrong" type="string"/>
            </property>
		</property>
	</model>
<css>.multiplegap_container {&#13;
    position: absolute;&#13;
}&#13;
&#13;
.multiplegap_container .placeholder {&#13;
    position: absolute;&#13;
    overflow: hidden;&#13;
}&#13;
&#13;
.multiplegap_texts .placeholder img,&#13;
.multiplegap_texts .placeholder p,&#13;
{&#13;
    margin: 0;&#13;
    padding: 0;&#13;
}&#13;
&#13;
.multiplegap_container .handler {&#13;
    width: 100%;&#13;
    height: 100%;&#13;
    position: absolute;&#13;
    cursor: pointer;&#13;
    top: 0;&#13;
    left: 0;&#13;
}&#13;
&#13;
.multiplegap_active {&#13;
    cursor: pointer;&#13;
}&#13;
&#13;
.multiplegap_container .placeholder_valid {&#13;
    border: 1px solid #00ff00;&#13;
}&#13;
&#13;
.multiplegap_container .placeholder_invalid {&#13;
    border: 1px solid #ff0000;&#13;
}&#13;
&#13;
.multiplegap_container .placeholder_valid .handler,&#13;
.multiplegap_container .placeholder_invalid .handler {&#13;
    cursor: default;&#13;
}&#13;
</css><view/><preview/><presenter>function Addonmultiplegap_create(){&#13;
    /*&#13;
     * KNOWN ISSUES:&#13;
     *     Invalid properties values (Item width, Item height, Item spacing, Maximum item count):&#13;
     *          When addon validated model it checks only value of those properties by numerical values. If parsed&#13;
     *         value is not a number - no error message is showed - that's because calculated values from those&#13;
     *         properties are only used in CSS. Invalid CSS value set with jQuery will simply not be added to&#13;
     *         DOM element, but it won't brake anything. Changing this behaviour will break backward compatibility!&#13;
     */&#13;
&#13;
    function getTextVoiceObject (text, lang) {return {text: text, lang: lang};}&#13;
    var isWCAGOn = false;&#13;
&#13;
    var presenter = function(){};&#13;
    &#13;
    presenter.ORIENTATIONS = {&#13;
        HORIZONTAL: 0,&#13;
        VERTICAL: 1&#13;
    };&#13;
    &#13;
    presenter.SOURCE_TYPES = {&#13;
        IMAGES: 0,&#13;
        TEXTS: 1&#13;
    };&#13;
    &#13;
    presenter.ERROR_CODES = {&#13;
        INVALID_ITEM_WIDTH: "Item width has to be greater than 0",&#13;
        INVALID_ITEM_HEIGHT: "Item height has to be greater than 0",&#13;
        INVALID_ITEM_SPACING: "Item spacing has to be greater or equal than 0",&#13;
        INVALID_MAXIMUM_ITEM_COUNT: "Maximum item count has to be greater or equal than 1",&#13;
        INVALID_NUMBER_OF_REPETITION: "Incorrect value. It should be integer and greater than 0",&#13;
        INVALID_REPEATED_ELEMENT: "Incorrect value. This field should contains only one ID"&#13;
    };&#13;
    &#13;
    presenter.eventBus            = null;&#13;
    presenter.playerController    = null;&#13;
    &#13;
    presenter.$view               = null;&#13;
    &#13;
    presenter.selectedItem        = null;&#13;
    &#13;
    presenter.showErrorsMode      = false;&#13;
    presenter.isShowAnswersActive = false;&#13;
    presenter.itemCounterMode = false;&#13;
    presenter.placeholders2drag = [];&#13;
&#13;
    presenter.keyboardControllerObject = null;&#13;
    presenter.container = null;&#13;
    &#13;
    presenter.createPreview = function(view, model) {&#13;
        presenter.createLogic(view, model, true);&#13;
    };&#13;
    &#13;
    presenter.run = function(view, model) {&#13;
        presenter.createLogic(view, model, false);&#13;
    };&#13;
    &#13;
    presenter.validateItems = function (model) {&#13;
        var itemWidth = parseInt(model['Item width']);&#13;
        if (!isNaN(itemWidth) &amp;&amp; itemWidth &lt;= 0) {&#13;
            return {isError: true, errorCode: 'INVALID_ITEM_WIDTH'};&#13;
        }&#13;
        &#13;
        var itemHeight = parseInt(model['Item height']);&#13;
        if (!isNaN(itemHeight) &amp;&amp; itemHeight &lt;= 0) {&#13;
            return {isError: true, errorCode: 'INVALID_ITEM_HEIGHT'};&#13;
        }&#13;
        &#13;
        var itemSpacing = parseInt(model['Item spacing']);&#13;
        if (!isNaN(itemSpacing) &amp;&amp; itemSpacing &lt; 0) {&#13;
            return {isError: true, errorCode: 'INVALID_ITEM_SPACING'};&#13;
        }&#13;
        &#13;
        var maximumItemCount = parseInt(model['Maximum item count']);&#13;
        if (!isNaN(maximumItemCount) &amp;&amp; maximumItemCount &lt; 1) {&#13;
            return {isError: true, errorCode: 'INVALID_MAXIMUM_ITEM_COUNT'};&#13;
        }&#13;
        &#13;
        return {&#13;
            isError: false,&#13;
            value: {&#13;
                width: itemWidth,&#13;
                height: itemHeight,&#13;
                spacing: itemSpacing,&#13;
                maximumCount: maximumItemCount,&#13;
                horizontalAlign: model['Item horizontal align'],&#13;
                verticalAlign: model['Item vertical align']&#13;
            }&#13;
        };&#13;
    };&#13;
    &#13;
    presenter.validateRepetitions = function(number) {&#13;
        if (number === undefined || number === "") {&#13;
            number = 0;&#13;
        }&#13;
        number = parseInt(number, 10);&#13;
        if (isNaN(number) || number &lt; 0) {&#13;
            return {isError: true, errorCode: 'INVALID_NUMBER_OF_REPETITION'};&#13;
        }&#13;
        &#13;
        return {&#13;
            isError: false,&#13;
            value: number&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.validateIdRepeatedElement = function(id) {&#13;
        id = id || "";&#13;
        &#13;
        if (id.indexOf(",") !== -1 || id.indexOf(";") !== -1) {&#13;
            return {isError: true, errorCode: 'INVALID_REPEATED_ELEMENT'};&#13;
        }&#13;
        &#13;
        return {&#13;
            isError: false,&#13;
            value: id&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.upgradeModel = function (model) {&#13;
        var upgradedModel = model;&#13;
        if (model["wrapItems"] == undefined) {&#13;
            upgradedModel = this.upgradeWrapItems(model);&#13;
        }&#13;
        upgradedModel = presenter.upgradeSpeechTexts(upgradedModel);&#13;
        return upgradedModel;&#13;
    };&#13;
    &#13;
    presenter.upgradeWrapItems = function (model) {&#13;
        model["wrapItems"] = false;&#13;
        &#13;
        return model;&#13;
    };&#13;
&#13;
    presenter.upgradeSpeechTexts = function (model) {&#13;
         var upgradedModel = {};&#13;
        $.extend(true, upgradedModel, model); // Deep copy of model object&#13;
&#13;
        if (!upgradedModel["speechTexts"]) {&#13;
            upgradedModel["speechTexts"] = {};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]['Inserted']) {&#13;
            upgradedModel["speechTexts"]['Inserted'] = {Inserted: 'Inserted'};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]['Removed']) {&#13;
            upgradedModel["speechTexts"]['Removed'] = {Removed: 'Removed'};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]['Empty']) {&#13;
            upgradedModel["speechTexts"]['Empty'] = {Empty: 'Empty'};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]['Correct']) {&#13;
            upgradedModel["speechTexts"]['Correct'] = {Correct: 'Correct'};&#13;
        }&#13;
        if (!upgradedModel["speechTexts"]['Wrong']) {&#13;
            upgradedModel["speechTexts"]['Wrong'] = {Wrong: 'Wrong'};&#13;
        }&#13;
        if (!upgradedModel["langAttribute"]) {&#13;
            upgradedModel["langAttribute"] = "";&#13;
        }&#13;
        return upgradedModel;&#13;
    };&#13;
&#13;
    function getSpeechTextProperty (rawValue, defaultValue) {&#13;
        var value = rawValue.trim();&#13;
&#13;
        if (value === undefined || value === null || value === '') {&#13;
            return defaultValue;&#13;
        }&#13;
&#13;
        return value;&#13;
    }&#13;
&#13;
    function setSpeechTexts (speechTexts) {&#13;
        presenter.speechTexts = {&#13;
            inserted:  'inserted',&#13;
            removed: 'removed',&#13;
            empty: 'empty',&#13;
            correct: 'correct',&#13;
            wrong: 'wrong'&#13;
        };&#13;
&#13;
        if (!speechTexts) {&#13;
            return;&#13;
        }&#13;
&#13;
        presenter.speechTexts = {&#13;
            inserted:    getSpeechTextProperty(speechTexts['Inserted']['Inserted'], presenter.speechTexts.inserted),&#13;
            removed: getSpeechTextProperty(speechTexts['Removed']['Removed'], presenter.speechTexts.removed),&#13;
            empty: getSpeechTextProperty(speechTexts['Empty']['Empty'], presenter.speechTexts.empty),&#13;
            correct: getSpeechTextProperty(speechTexts['Correct']['Correct'], presenter.speechTexts.correct),&#13;
            wrong: getSpeechTextProperty(speechTexts['Wrong']['Wrong'], presenter.speechTexts.wrong)&#13;
        };&#13;
    }&#13;
    &#13;
    &#13;
    presenter.validateModel = function (model) {&#13;
        setSpeechTexts(model['speechTexts']);&#13;
        var orientation = presenter.ORIENTATIONS.HORIZONTAL;&#13;
        if (model['Orientation'] === "vertical") {&#13;
            orientation = presenter.ORIENTATIONS.VERTICAL;&#13;
        }&#13;
        &#13;
        var sourceType = presenter.SOURCE_TYPES.IMAGES;&#13;
        if (model['Source type'] == "texts") {&#13;
            sourceType = presenter.SOURCE_TYPES.TEXTS;&#13;
        }&#13;
        &#13;
        var validatedItems = presenter.validateItems(model);&#13;
        if (validatedItems.isError) {&#13;
            return validatedItems;&#13;
        }&#13;
        &#13;
        var isVisible = ModelValidationUtils.validateBoolean(model["Is Visible"]);&#13;
        var validatedRepetitions = presenter.validateRepetitions(model["Number of repetitions"]);&#13;
        var validateRepeatedElement = presenter.validateIdRepeatedElement(model["ID repeated element"]);&#13;
&#13;
        var isTabindexEnabled = ModelValidationUtils.validateBoolean(model["Is Tabindex Enabled"]);&#13;
        &#13;
        if (validatedRepetitions.isError) {&#13;
            return validatedRepetitions;&#13;
        }&#13;
        if (validateRepeatedElement.isError) {&#13;
            return validateRepeatedElement;&#13;
        }&#13;
        &#13;
        return {&#13;
            isError: false,&#13;
            ID: model.ID,&#13;
            isActivity: !ModelValidationUtils.validateBoolean(model['Is not an activity']),&#13;
            isVisible: isVisible,&#13;
            isVisibleByDefault: isVisible,&#13;
            orientation: orientation,&#13;
            sourceType: sourceType,&#13;
            stretchImages: model['Stretch images?'] == 'True',&#13;
            items: validatedItems.value,&#13;
            itemsAnswersID: model['Items'].map(function (item) {&#13;
                return item['Answer ID'];&#13;
            }),&#13;
            repetitions: validatedRepetitions.value,&#13;
            repeatedElement: validateRepeatedElement.value,&#13;
            blockWrongAnswers: ModelValidationUtils.validateBoolean(model["Block wrong answers"]),&#13;
            wrapItems: ModelValidationUtils.validateBoolean(model["wrapItems"]),&#13;
            isTabindexEnabled: isTabindexEnabled,&#13;
            langTag: model['langAttribute']&#13;
        };&#13;
    };&#13;
    &#13;
    presenter.destroyCommands = function Multiplegap_destroyCommands() {&#13;
        delete presenter.executeCommand;&#13;
        delete presenter.countItems;&#13;
        delete presenter.isAllOK;&#13;
        delete presenter.isAttempted;&#13;
        delete presenter.show;&#13;
        delete presenter.hide;&#13;
        delete presenter.getMaxScore;&#13;
        delete presenter.getScore;&#13;
        delete presenter.getErrorCount;&#13;
        delete presenter.setShowErrorsMode;&#13;
        delete presenter.setWorkMode;&#13;
        delete presenter.reset;&#13;
        delete presenter.getState;&#13;
        delete presenter.setState;&#13;
    };&#13;
    &#13;
    presenter.createView = function Multiplegap_createView () {&#13;
        var container = $('&lt;div class="multiplegap_container"&gt;&lt;/div&gt;');&#13;
&#13;
        if (this.configuration.isTabindexEnabled) {&#13;
            container.attr("tabindex", "0");&#13;
        }&#13;
&#13;
        container.click (function (event) {&#13;
            event.stopPropagation ();&#13;
            event.preventDefault ();&#13;
        });&#13;
        var placeholders = $('&lt;div class="multiplegap_placeholders"&gt;&lt;/div&gt;');&#13;
        &#13;
        container.append(placeholders);&#13;
        &#13;
        container.addClass("multiplegap_" + (presenter.configuration.orientation == presenter.ORIENTATIONS.HORIZONTAL ? "horizontal" : "vertical"));&#13;
        container.addClass("multiplegap_" + (presenter.configuration.sourceType == presenter.SOURCE_TYPES.TEXTS ? "texts" : "images" ));&#13;
        &#13;
        container.css ({&#13;
            width: presenter.$view.css ('width'),&#13;
            height: presenter.$view.css ('height')&#13;
        });&#13;
        &#13;
        container.click (presenter.acceptDraggable);&#13;
        container.droppable ({&#13;
            drop: function (event, ui) {&#13;
                if (!presenter.configuration.isVisible) {&#13;
                    return;&#13;
                }&#13;
                event.stopPropagation();&#13;
                event.preventDefault();&#13;
                container.click();&#13;
            }&#13;
        });&#13;
&#13;
        presenter.container = container;&#13;
        presenter.$view.append(container);&#13;
    };&#13;
    &#13;
    presenter.setUpEventListeners = function Multiplegap_setUpEventListeners (isPreview) {&#13;
        if (!isPreview) {&#13;
            presenter.pageLoadedDeferred = new $.Deferred();&#13;
            presenter.pageLoaded = presenter.pageLoadedDeferred.promise ();&#13;
            &#13;
            presenter.eventBus.addEventListener ('ItemSelected', presenter.eventListener);&#13;
            presenter.eventBus.addEventListener ('ItemConsumed', presenter.eventListener);&#13;
            presenter.eventBus.addEventListener ('PageLoaded', this);&#13;
            presenter.eventBus.addEventListener ('ShowAnswers', this);&#13;
            presenter.eventBus.addEventListener ('HideAnswers', this);&#13;
            presenter.eventBus.addEventListener ('NotAllAttempted', this);&#13;
            presenter.eventBus.addEventListener ('Submitted', this);&#13;
        }&#13;
    };&#13;
    presenter.createLogic = function Multiplegap_createLogic (view, model, isPreview) {&#13;
        presenter.$view = $(view);&#13;
        presenter.addonID = model.ID;&#13;
        &#13;
        var upgradedModel = presenter.upgradeModel(model);&#13;
        presenter.configuration = presenter.validateModel(upgradedModel);&#13;
        presenter.setItemCounterModeValue();&#13;
        &#13;
        if (presenter.configuration.isError) {&#13;
            DOMOperationsUtils.showErrorMessage(view, presenter.ERROR_CODES, presenter.configuration.errorCode);&#13;
            presenter.destroyCommands ();&#13;
            return;&#13;
        }&#13;
        &#13;
        presenter.setUpEventListeners(isPreview);&#13;
        presenter.createView();&#13;
        &#13;
        if (!presenter.configuration.isVisibleByDefault) {&#13;
            presenter.hide();&#13;
        }&#13;
&#13;
        presenter.buildKeyboardController();&#13;
    };&#13;
    &#13;
    presenter.setItemCounterModeValue = function MultipleGap_setItemCounterModeValue () {&#13;
        if (presenter.configuration.repetitions !== undefined &amp;&amp;&#13;
          presenter.configuration.repeatedElement !== undefined &amp;&amp;&#13;
          presenter.configuration.repetitions !== 0 &amp;&amp;&#13;
          presenter.configuration.repeatedElement !== "")&#13;
        {&#13;
            presenter.itemCounterMode = true;&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.eventListener = {&#13;
        onEventReceived: function(eventName, eventData) {&#13;
            if(presenter.showErrorsMode || presenter.isShowAnswersActive) return;&#13;
            &#13;
            if (eventName === "ItemConsumed") {&#13;
                presenter.$view.find('.handler').show();&#13;
                presenter.isItemChecked = false;&#13;
            }&#13;
            &#13;
            if (eventName === "ItemSelected" &amp;&amp; eventData.value !== null &amp;&amp; eventData.value !== "") {&#13;
                presenter.$view.find('.handler').hide();&#13;
                presenter.isItemChecked = true;&#13;
            } else if (eventName === "ItemSelected" ) {&#13;
                presenter.$view.find('.handler').show();&#13;
                presenter.isItemChecked = false;&#13;
            }&#13;
            &#13;
            if(typeof(eventData.item) == "undefined" || eventData.item === null) {&#13;
                presenter.clearSelected();&#13;
            } else if(presenter.configuration.sourceType == presenter.SOURCE_TYPES.IMAGES &amp;&amp; eventData.type == "image") {&#13;
                presenter.saveSelected(eventData);&#13;
                &#13;
            } else if(presenter.configuration.sourceType == presenter.SOURCE_TYPES.TEXTS &amp;&amp; eventData.type == "string") {&#13;
                presenter.saveSelected(eventData);&#13;
            } else {&#13;
                presenter.clearSelected();&#13;
            }&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.selectorRootClass = function() {&#13;
        switch(presenter.configuration.sourceType) {&#13;
            case presenter.SOURCE_TYPES.IMAGES:&#13;
                return ".multiplegap_images";&#13;
            &#13;
            case presenter.SOURCE_TYPES.TEXTS:&#13;
                return ".multiplegap_texts";&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.clearSelected = function() {&#13;
        presenter.selectedItem = null;&#13;
        $(presenter.selectorRootClass() + '.multiplegap_active').removeClass('multiplegap_active');&#13;
        &#13;
        $(presenter.selectorRootClass() + ' .placeholder_inactive').removeClass('placeholder_inactive');&#13;
        &#13;
        $(presenter.selectorRootClass() + ' .handler_disabled')&#13;
          .click(presenter.removeDraggable)&#13;
          .removeClass('handler_disabled');&#13;
        &#13;
        $(presenter.selectorRootClass() + '&gt;.handler').hide();&#13;
    };&#13;
    &#13;
    presenter.saveSelected = function(eventData) {&#13;
        presenter.selectedItem = eventData;&#13;
        &#13;
        if(!presenter.maximumItemCountReached()) {&#13;
            presenter.$view.find('.multiplegap_container').addClass('multiplegap_active');&#13;
        }&#13;
        &#13;
        if (!presenter.isItemChecked) {&#13;
            presenter.$view.find('.multiplegap_container').removeClass('multiplegap_active');&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.acceptDraggable = function(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        &#13;
        if(presenter.showErrorsMode || presenter.isShowAnswersActive || !presenter.isItemChecked) {&#13;
            return;&#13;
        }&#13;
        &#13;
        presenter.performAcceptDraggable($(e.target), presenter.selectedItem, true, false, false);&#13;
        presenter.$view.find('.handler').show();&#13;
        presenter.$view.find('.multiplegap_container').removeClass('multiplegap_active');&#13;
        presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());&#13;
&#13;
        if (presenter.configuration.isTabindexEnabled) {&#13;
            presenter.container.removeAttr("tabindex");&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.maximumItemCountReached = function() {&#13;
        return presenter.countItems() &gt;= presenter.configuration.items.maximumCount;&#13;
    };&#13;
    &#13;
    presenter.parseItemValue = function (item) {&#13;
        if(item.indexOf("**") &gt; -1 || item.indexOf("__") &gt; -1){&#13;
            return item.replace(/\*\*(.*?)\*\*/g, "&lt;b&gt;$1&lt;/b&gt;").replace(/__(.*?)__/g, "&lt;i&gt;$1&lt;/i&gt;").replace(/__(.*?)_/g, "&lt;i&gt;$1_&lt;/i&gt;").replace(/\*\*(.*?)\*/g, "&lt;b&gt;$1*&lt;/b&gt;").replace(/_(.*?)__/g, "_$1").replace(/\*(.*?)\*\*/g, "*$1");&#13;
        }else{&#13;
            return item;&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.getImageURL = function (elem) {&#13;
        var imageSourceModule = presenter.playerController.getModule(elem.item);&#13;
        &#13;
        if (imageSourceModule == null || !imageSourceModule.hasOwnProperty('getImageUrl')) {&#13;
            return '';&#13;
        }&#13;
&#13;
        return imageSourceModule.getImageUrl();&#13;
    };&#13;
    &#13;
    presenter.updateLaTeX = function (element) {&#13;
        MathJax.CallBack.Queue().Push(function () {&#13;
            MathJax.Hub.Typeset(element)&#13;
        });&#13;
    };&#13;
&#13;
    presenter.getAltText = function (id) {&#13;
        var imageSourceModule = presenter.playerController.getModule(id);&#13;
        if (imageSourceModule == null || !imageSourceModule.hasOwnProperty('getAltText')) {&#13;
            return '';&#13;
        }&#13;
        return imageSourceModule.getAltText();&#13;
    };&#13;
&#13;
    presenter.getItemLangAttribute = function (id) {&#13;
        var imageSourceModule = presenter.playerController.getModule(id);&#13;
        if (imageSourceModule == null || !imageSourceModule.hasOwnProperty('getLangAttribute')) {&#13;
            return '';&#13;
        }&#13;
        return imageSourceModule.getLangAttribute();&#13;
    };&#13;
    &#13;
    presenter.calculateElementPositions = function () {&#13;
        var orientation = presenter.configuration.orientation;&#13;
        var wrapItems = presenter.configuration.wrapItems;&#13;
        var isHorizontalOrientation = orientation === presenter.ORIENTATIONS.HORIZONTAL;&#13;
        var isVerticalOrientation = orientation === presenter.ORIENTATIONS.VERTICAL;&#13;
        var elementWidth = presenter.configuration.items.width;&#13;
        var elementHeight = presenter.configuration.items.height;&#13;
        var rowPositions;&#13;
        &#13;
        var positions;&#13;
        if (isHorizontalOrientation &amp;&amp; !wrapItems) {&#13;
            positions = {&#13;
                left: presenter.calculateSpaceUsedByElements(presenter.configuration.items.width),&#13;
                top: 0&#13;
            };&#13;
        } else if (isVerticalOrientation &amp;&amp; !wrapItems) {&#13;
            positions = {&#13;
                left: 0,&#13;
                top: presenter.calculateSpaceUsedByElements(presenter.configuration.items.height)&#13;
            };&#13;
        } else if (isHorizontalOrientation &amp;&amp; wrapItems) {&#13;
            rowPositions = presenter.calculatePositionsInRow(presenter.getContainerWidth(), elementWidth, elementHeight);&#13;
            positions = {&#13;
                top: rowPositions.rowPosition,&#13;
                left: rowPositions.positionInRow&#13;
            };&#13;
        } else if (isVerticalOrientation &amp;&amp; wrapItems) {&#13;
            rowPositions = presenter.calculatePositionsInRow(presenter.getContainerHeight(), elementHeight, elementWidth);&#13;
            positions = {&#13;
                top: rowPositions.positionInRow,&#13;
                left: rowPositions.rowPosition&#13;
            };&#13;
        }&#13;
        &#13;
        return positions;&#13;
    };&#13;
    &#13;
    presenter.calculatePositionsInRow = function (containerSize, elementSize, rowSize, itemsCountFixed) {&#13;
        var elementSpacing = presenter.configuration.items.spacing;&#13;
        var howManyInRow = presenter.calculateHowManyElementsInContainer(containerSize, elementSize, elementSpacing);&#13;
        var countItems = presenter.countItems(itemsCountFixed);&#13;
        var row = parseInt(countItems / howManyInRow, 10);&#13;
        &#13;
        var rowPosition = 0;&#13;
        var positionInRow = presenter.calculateSpaceUsedByElements(elementSize, countItems);&#13;
        if (row &gt; 0) {&#13;
            var itemInRow = countItems - (howManyInRow * row);&#13;
            rowPosition = row * (rowSize + elementSpacing);&#13;
            positionInRow = itemInRow * (elementSize + elementSpacing);&#13;
        }&#13;
        &#13;
        return {&#13;
            rowPosition: rowPosition,&#13;
            positionInRow: positionInRow&#13;
        };&#13;
    };&#13;
    &#13;
    presenter.calculateHowManyElementsInContainer = function (containerSize, elementSize, spacing) {&#13;
        var howManyInContainer = 1;&#13;
        var usedSize = elementSize;&#13;
        &#13;
        while (true) {&#13;
            usedSize += spacing;&#13;
            usedSize += elementSize;&#13;
            &#13;
            if (usedSize &lt;= containerSize) {&#13;
                howManyInContainer++;&#13;
            } else {&#13;
                break;&#13;
            }&#13;
        }&#13;
        &#13;
        return howManyInContainer;&#13;
    };&#13;
    &#13;
    presenter.calculateSpaceUsedByElements = function (elementSize, itemsToCount) {&#13;
        return presenter.countItems(itemsToCount) * (elementSize + presenter.configuration.items.spacing);&#13;
    };&#13;
    &#13;
    presenter.getContainerWidth = function () {&#13;
        return presenter.$view.width();&#13;
    };&#13;
    &#13;
    presenter.getContainerHeight = function () {&#13;
        return presenter.$view.height();&#13;
    };&#13;
    &#13;
    presenter.performAcceptDraggable = function(handler, item, sendEvents, force, isState) {&#13;
        if(!presenter.isShowAnswersActive){&#13;
            if(!force &amp;&amp; presenter.selectedItem == null) return;&#13;
            if(presenter.maximumItemCountReached()) return;&#13;
            if(presenter.configuration.blockWrongAnswers &amp;&amp; !presenter.isElementCorrect(item.item)) {&#13;
                sendEvent(item, false);&#13;
                return;&#13;
            }&#13;
        }&#13;
        &#13;
        var child;&#13;
        var placeholder;&#13;
        if(presenter.isShowAnswersActive){&#13;
            placeholder = $('&lt;div class="placeholder placeholder-show-answers"&gt;&lt;/div&gt;');&#13;
        }else{&#13;
            placeholder = $('&lt;div class="placeholder"&gt;&lt;/div&gt;');&#13;
        }&#13;
        &#13;
        placeholder.css({&#13;
            width: presenter.configuration.items.width + 'px',&#13;
            height: presenter.configuration.items.height + 'px'&#13;
        });&#13;
&#13;
        if (presenter.configuration.isTabindexEnabled) {&#13;
            placeholder.attr("tabindex", "0");&#13;
        }&#13;
        &#13;
        var positions = presenter.calculateElementPositions();&#13;
        placeholder.css({&#13;
            top: positions.top + 'px',&#13;
            left: positions.left + 'px'&#13;
        });&#13;
        &#13;
        presenter.$view.find('.multiplegap_placeholders').append(placeholder);&#13;
        &#13;
        switch(presenter.configuration.sourceType) {&#13;
            case presenter.SOURCE_TYPES.IMAGES:&#13;
                child = $('&lt;img class="contents" alt="' + presenter.getAltText(item.item) + '" lang="'+ presenter.getItemLangAttribute(item.item) +'" /&gt;');&#13;
                child.attr('src', presenter.getImageURL(item));&#13;
&#13;
                if(presenter.configuration.stretchImages) {&#13;
                    child.css({&#13;
                        width: presenter.configuration.items.width + 'px',&#13;
                        height: presenter.configuration.items.height + 'px'&#13;
                    });&#13;
                }&#13;
                break;&#13;
            &#13;
            case presenter.SOURCE_TYPES.TEXTS:&#13;
                child = $('&lt;p class="contents"&gt;&lt;/p&gt;');&#13;
                child.html(presenter.parseItemValue(item.value));&#13;
                break;&#13;
        }&#13;
        &#13;
        placeholder&#13;
          .attr({&#13;
              draggableValue: item.value,&#13;
              draggableItem: item.item,&#13;
              draggableType: item.type&#13;
          })&#13;
          .append(child);&#13;
        &#13;
        if (!isState) {&#13;
            presenter.updateLaTeX(child[0]);&#13;
        }&#13;
        &#13;
        var placeholderPadding = DOMOperationsUtils.getOuterDimensions(placeholder).padding,&#13;
          placeholderVerticalPadding = placeholderPadding.left + placeholderPadding.right,&#13;
          placeholderHorizontalPadding = placeholderPadding.top + placeholderPadding.bottom;&#13;
        &#13;
        switch(presenter.configuration.items.horizontalAlign) {&#13;
            case 'left':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    left: 0&#13;
                });&#13;
                break;&#13;
            case 'center':&#13;
                &#13;
                switch(presenter.configuration.sourceType) {&#13;
                    case presenter.SOURCE_TYPES.TEXTS:&#13;
                        child.css({&#13;
                            position: 'absolute',&#13;
                            width: '100%',&#13;
                            textAlign: 'center'&#13;
                        });&#13;
                        break;&#13;
                    &#13;
                    case presenter.SOURCE_TYPES.IMAGES:&#13;
                        child.css({&#13;
                            position: 'absolute',&#13;
                            left: Math.round((presenter.configuration.items.width - placeholderHorizontalPadding - parseInt(child.css('width'))) / 2) + 'px'&#13;
                        });&#13;
                        break;&#13;
                }&#13;
                break;&#13;
            case 'right':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    right: 0&#13;
                });&#13;
                break;&#13;
        }&#13;
        &#13;
        switch(presenter.configuration.items.horizontalAlign) {&#13;
            case 'top':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    top: 0&#13;
                });&#13;
                break;&#13;
            case 'center':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    top: Math.round((presenter.configuration.items.height - placeholderVerticalPadding - parseInt(child.css('height'))) / 2) + 'px'&#13;
                });&#13;
                break;&#13;
            case 'bottom':&#13;
                child.css({&#13;
                    position: 'absolute',&#13;
                    bottom: 0&#13;
                });&#13;
                break;&#13;
        }&#13;
        &#13;
        handler = $('&lt;div class="handler" style="color: rgba(0,0,0,0.0); font-size:1px"&gt;' + presenter.getAltText(item.item) + '&lt;/div&gt;');&#13;
        &#13;
        // Workaround for IE bug: empty divs in IE are not clickable so let's&#13;
        // make them not empty and appear as empty.&#13;
        if($.browser.msie) {&#13;
            handler.css({backgroundColor: "#000000", opacity: 0 });&#13;
        }&#13;
        &#13;
        handler.click(presenter.removeDraggable);&#13;
        placeholder.append(handler);&#13;
        &#13;
        if(sendEvents) {&#13;
            sendEvent(item, true);&#13;
        }&#13;
        &#13;
        $(presenter.selectorRootClass() + '&gt;.handler').hide();&#13;
        &#13;
        presenter.clearSelected();&#13;
        &#13;
        if (isState) {&#13;
            presenter.placeholders2drag.push(placeholder);&#13;
        } else {&#13;
            presenter.makePlaceholderDraggable(placeholder);&#13;
        }&#13;
&#13;
        if(isWCAGOn) {&#13;
            var altText = "";&#13;
            var langTag = "";&#13;
            var voicesArray = [];&#13;
            voicesArray.push(getTextVoiceObject(presenter.speechTexts.inserted));&#13;
            if (presenter.configuration.sourceType === presenter.SOURCE_TYPES.IMAGES) {&#13;
                altText = child.attr('alt');&#13;
                langTag = child.attr('lang');&#13;
            } else {&#13;
                altText = child.text();&#13;
                langTag = presenter.configuration.langTag;&#13;
            }&#13;
            voicesArray.push(getTextVoiceObject(altText,langTag));&#13;
            presenter.speak(voicesArray);&#13;
        }&#13;
&#13;
    };&#13;
    &#13;
    function sendEvent(item, consumed) {&#13;
        if (consumed) {&#13;
            presenter.eventBus.sendEvent('ItemConsumed', item);&#13;
        }&#13;
        &#13;
        var score;&#13;
        if(presenter.isElementCorrect(item.item)){&#13;
            score = 1;&#13;
        }else{&#13;
            score = 0;&#13;
        }&#13;
&#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item'  : '' + item.item, // ensure that we send string&#13;
            'value' : 'add',&#13;
            'score' : score&#13;
        });&#13;
        &#13;
        if (presenter.isAllOK()) sendAllOKEvent();&#13;
    }&#13;
    &#13;
    presenter.isElementCorrect = function (item) {&#13;
        return presenter.configuration.itemsAnswersID.indexOf(item) &gt; -1;&#13;
    };&#13;
    &#13;
    presenter.makePlaceholderDraggable = function(placeholder) {&#13;
        placeholder.draggable({&#13;
            revert : false,&#13;
            helper: function() {&#13;
                placeholder.addClass('dragging');&#13;
                if (!presenter.isDragPossible()) {&#13;
                    return $('&lt;div&gt;&lt;/div&gt;');&#13;
                }&#13;
                &#13;
                presenter.itemDragged(placeholder);&#13;
                return getDraggedSrc(placeholder).clone().show();&#13;
            },&#13;
            cursorAt: calculateCursorPosition(placeholder),&#13;
            appendTo: getDraggedSrc(placeholder) === placeholder ? 'parent' : placeholder.parents('.ic_page:first'),&#13;
            start : function(event, ui) {&#13;
                if (!presenter.isDragPossible()) {&#13;
                    event.stopPropagation();&#13;
                    event.preventDefault();&#13;
                    return;&#13;
                }&#13;
                ui.helper.zIndex(100);&#13;
            },&#13;
            stop : function(event, ui) {&#13;
                placeholder.removeClass('dragging');&#13;
                ui.helper.zIndex(0);&#13;
                ui.helper.remove();&#13;
                presenter.itemStopped(placeholder);&#13;
                ui.helper.remove();&#13;
            }&#13;
        });&#13;
    };&#13;
    &#13;
    var getDraggedSrc = function(placeholder) {&#13;
        if (placeholder.parents('.multiplegap_container').css("overflow") == "hidden") {&#13;
            if (presenter.configuration.sourceType == presenter.SOURCE_TYPES.IMAGES) {&#13;
                return $("[id='" + placeholder.attr('draggableitem') + "']");&#13;
            } else {&#13;
                var item_id = placeholder.attr('draggableitem');&#13;
                var container_id = item_id.replace(/\-[0-9]+$/, '');&#13;
                return $(presenter.playerController.getModule(container_id).getItemView(item_id));&#13;
            }&#13;
        } else {&#13;
            return placeholder;&#13;
        }&#13;
    };&#13;
    &#13;
    var calculateCursorPosition = function(placeholder) {&#13;
        var obj = getDraggedSrc(placeholder);&#13;
        var position;&#13;
        if (obj === placeholder) {&#13;
            position = {&#13;
                left: Math.round(obj.outerWidth() / 2),&#13;
                top: Math.round(obj.outerHeight() / 2)&#13;
            };&#13;
        } else {&#13;
            var src = obj.clone();&#13;
            src.width(obj.width());&#13;
            src.height(obj.height());&#13;
            presenter.$view.parents('.ic_page:first').append(src);&#13;
            position = {&#13;
                left:  Math.round(src.outerWidth()/2),&#13;
                top: Math.round(src.outerHeight()/2)&#13;
            };&#13;
            src.remove();&#13;
        }&#13;
        return position;&#13;
    };&#13;
    &#13;
    presenter.isDragPossible = function() {&#13;
        if (presenter.showErrorsMode || presenter.isShowAnswersActive) {&#13;
            return false;&#13;
        }&#13;
        return true;&#13;
    };&#13;
    &#13;
    presenter.itemDragged = function(placeholder) {&#13;
        var evnt = {&#13;
            source: presenter.configuration.ID,&#13;
            value: placeholder.attr('draggableValue'),&#13;
            item: placeholder.attr('draggableItem'),&#13;
            type: placeholder.attr('draggableType')&#13;
        };&#13;
        presenter.performRemoveDraggable(placeholder.find('.handler'), true);&#13;
        presenter.eventBus.sendEvent('itemDragged', evnt);&#13;
    };&#13;
    &#13;
    presenter.itemStopped = function(placeholder) {&#13;
        var value = placeholder.attr('draggableValue') + '';&#13;
        var item = placeholder.attr('draggableItem') + '';&#13;
        var type = placeholder.attr('draggableType') + '';&#13;
        placeholder.remove();&#13;
&#13;
        var evnt = {&#13;
            source: presenter.configuration.ID,&#13;
            value: value,&#13;
            item: item,&#13;
            type: type&#13;
        };&#13;
        presenter.eventBus.sendEvent('itemStopped', evnt);&#13;
        presenter.$view.find('.placeholder').each(presenter.movePlaceholdersAfterRemove);&#13;
    };&#13;
    &#13;
    presenter.removeDraggable = function(e) {&#13;
        e.stopPropagation();&#13;
        e.preventDefault();&#13;
        &#13;
        if(presenter.showErrorsMode || presenter.isShowAnswersActive) {&#13;
            return;&#13;
        }&#13;
        presenter.performRemoveDraggable($(e.target));&#13;
        presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());&#13;
&#13;
        if(presenter.configuration.isTabindexEnabled &amp;&amp; presenter.$view.find('.placeholder').length === 0) {&#13;
            presenter.container.attr("tabindex", "0");&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.performRemoveDraggable = function(handler) {&#13;
&#13;
        var placeholder = handler.parent();&#13;
        var child = placeholder.find('.contents');&#13;
        if(isWCAGOn) {&#13;
            var altText = "";&#13;
            var langTag = "";&#13;
            var voicesArray = [];&#13;
            voicesArray.push(getTextVoiceObject(presenter.speechTexts.removed));&#13;
            if (presenter.configuration.sourceType === presenter.SOURCE_TYPES.IMAGES) {&#13;
                altText = child.attr('alt');&#13;
                langTag = child.attr('lang');&#13;
            } else {&#13;
                altText = child.text();&#13;
                langTag = presenter.configuration.langTag;&#13;
            }&#13;
            voicesArray.push(getTextVoiceObject(altText,langTag));&#13;
            presenter.speak(voicesArray);&#13;
        }&#13;
&#13;
        if (arguments[1]) {&#13;
            placeholder.hide();&#13;
            if (placeholder.is(":visible")) {&#13;
                placeholder.style("display", "none", "important");&#13;
            }&#13;
        } else {&#13;
            placeholder.remove();&#13;
        }&#13;
        &#13;
        presenter.$view.find('.placeholder').each(presenter.movePlaceholdersAfterRemove);&#13;
        &#13;
        presenter.eventBus.sendEvent('ItemReturned', {&#13;
            value: placeholder.attr('draggableValue'),&#13;
            item: placeholder.attr('draggableItem'),&#13;
            type: placeholder.attr('draggableType')&#13;
        });&#13;
        &#13;
        presenter.eventBus.sendEvent('ValueChanged', {&#13;
            'source': presenter.configuration.ID,&#13;
            'item'  : '' + placeholder.attr('draggableItem'), // ensure that we send string&#13;
            'value' : 'remove',&#13;
            'score' : '0'&#13;
        });&#13;
        &#13;
        if (presenter.isAllOK()) sendAllOKEvent();&#13;
    };&#13;
        &#13;
    presenter.movePlaceholdersAfterRemove = function (index, element) {&#13;
        var orientation = presenter.configuration.orientation;&#13;
        var wrapItems = presenter.configuration.wrapItems;&#13;
        var isHorizontalOrientation = orientation === presenter.ORIENTATIONS.HORIZONTAL;&#13;
        var isVerticalOrientation = orientation === presenter.ORIENTATIONS.VERTICAL;&#13;
        var positions;&#13;
        var rowPositions;&#13;
        var elementWidth = presenter.configuration.items.width;&#13;
        var elementHeight = presenter.configuration.items.height;&#13;
        &#13;
        if (isHorizontalOrientation &amp;&amp; !wrapItems) {&#13;
            positions = {&#13;
                left: presenter.calculateSpaceUsedByElements(presenter.configuration.items.width, index),&#13;
                top: 0&#13;
            };&#13;
        } else if (isVerticalOrientation &amp;&amp; !wrapItems) {&#13;
            positions = {&#13;
                left: 0,&#13;
                top: presenter.calculateSpaceUsedByElements(presenter.configuration.items.height, index)&#13;
            };&#13;
        } else if (isHorizontalOrientation &amp;&amp; wrapItems) {&#13;
            rowPositions = presenter.calculatePositionsInRow(presenter.getContainerWidth(), elementWidth, elementHeight, index);&#13;
            positions = {&#13;
                top: rowPositions.rowPosition,&#13;
                left: rowPositions.positionInRow&#13;
            };&#13;
            &#13;
        } else if (isVerticalOrientation &amp;&amp; wrapItems) {&#13;
            rowPositions = presenter.calculatePositionsInRow(presenter.getContainerHeight(), elementHeight, elementWidth, index);&#13;
            positions = {&#13;
                top: rowPositions.positionInRow,&#13;
                left: rowPositions.rowPosition&#13;
            };&#13;
        }&#13;
        &#13;
        $(element).css({&#13;
            left: positions.left + 'px',&#13;
            top: positions.top + 'px'&#13;
        });&#13;
    };&#13;
&#13;
    presenter.setPlayerController = function(controller) {&#13;
        presenter.playerController = controller;&#13;
        presenter.eventBus = presenter.playerController.getEventBus();&#13;
    };&#13;
    &#13;
    function sendAllOKEvent () {&#13;
        var eventData = {&#13;
            'source': presenter.addonID,&#13;
            'item': 'all',&#13;
            'value': '',&#13;
            'score': ''&#13;
        };&#13;
        &#13;
        presenter.eventBus.sendEvent('ValueChanged', eventData);&#13;
    }&#13;
    &#13;
    function getItemsLength(items) {&#13;
        return (items.length == 1 &amp;&amp; items[0] == '') ? 0 : items.length;&#13;
    }&#13;
    &#13;
    presenter.getMaxScore = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        &#13;
        if (presenter.itemCounterMode) {&#13;
            return presenter.configuration.isActivity ? 1 : 0;&#13;
        }&#13;
        &#13;
        return presenter.configuration.isActivity ? getItemsLength(presenter.configuration.itemsAnswersID) : 0;&#13;
    };&#13;
    &#13;
    function getItemsCount() {&#13;
        return presenter.$view.find('.placeholder').not('.dragging').length;&#13;
    }&#13;
    &#13;
    function isAllCorrect () {&#13;
        return getItemsCount() === presenter.configuration.repetitions;&#13;
    }&#13;
    &#13;
    presenter.getScore = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.itemCounterMode) {&#13;
            var score = isAllCorrect() ? 1 : 0;&#13;
&#13;
            return presenter.configuration.isActivity ? score : 0;&#13;
        }&#13;
&#13;
        if (!presenter.configuration.isActivity) return 0;&#13;
&#13;
        var invalidAndRedundantItems = presenter.getInvalidItems();&#13;
        var invalidItems = invalidAndRedundantItems.remainingItems;&#13;
&#13;
        return presenter.configuration.itemsAnswersID.length - invalidItems.length;&#13;
&#13;
    };&#13;
    &#13;
    presenter.getErrorCount = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        if (presenter.itemCounterMode) {&#13;
            var isEmpty = getItemsCount() === 0,&#13;
              result = 0;&#13;
            &#13;
            if (!isAllCorrect() &amp;&amp; !isEmpty) {&#13;
                result = 1;&#13;
            }&#13;
&#13;
            return presenter.configuration.isActivity ? result : 0;&#13;
        }&#13;
&#13;
        return presenter.configuration.isActivity ? presenter.countItems() - presenter.getScore() : 0;&#13;
    };&#13;
    &#13;
    presenter.isAllOK = function() {&#13;
        if (!presenter.configuration.isActivity) return;&#13;
        &#13;
        if (presenter.itemCounterMode) {&#13;
            return isAllCorrect() ? 1 : 0;&#13;
        }&#13;
&#13;
        return presenter.getMaxScore() === presenter.getScore() &amp;&amp; presenter.getErrorCount() === 0;&#13;
    };&#13;
    &#13;
    presenter.getInvalidItems = function() {&#13;
        var remainingItems = presenter.configuration.itemsAnswersID.slice(0), currentItem;&#13;
        var redundantItems = [];&#13;
&#13;
        presenter.$view.find('.placeholder').not('.dragging').each(function(index, placeholder) {&#13;
            currentItem = $(placeholder).attr('draggableItem');&#13;
            var currentItemIndex = remainingItems.indexOf(currentItem);&#13;
            &#13;
            if (currentItemIndex !== -1) {&#13;
                remainingItems.splice(currentItemIndex, 1);&#13;
            } else {&#13;
                redundantItems.push(currentItem);&#13;
            }&#13;
        });&#13;
&#13;
        return {remainingItems: remainingItems, redundantItems: redundantItems};&#13;
    };&#13;
    &#13;
    function markInactive () {&#13;
        presenter.$view.find('.multiplegap_container').addClass('multiplegap_inactive');&#13;
    }&#13;
    &#13;
    function removeInactivityMark () {&#13;
        presenter.$view.find('.multiplegap_container').removeClass('multiplegap_inactive');&#13;
    }&#13;
    &#13;
    presenter.setShowErrorsMode = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.showErrorsMode = true;&#13;
        markInactive();&#13;
        if (!presenter.configuration.isActivity) return;&#13;
        &#13;
        if (presenter.itemCounterMode) {&#13;
            if (isAllCorrect()) {&#13;
                presenter.$view.find('.multiplegap_placeholders').addClass('placeholder_valid');&#13;
            } else if (getItemsCount() === 0) {&#13;
                presenter.$view.find('.multiplegap_container').addClass('multiplegap_inactive');&#13;
            } else {&#13;
                presenter.$view.find('.multiplegap_placeholders').addClass('placeholder_invalid');&#13;
            }&#13;
        } else {&#13;
            var remainingItems = presenter.configuration.itemsAnswersID.slice(0), currentItem;&#13;
            presenter.$view.find('.placeholder').each(function(index, placeholder) {&#13;
                currentItem = $(placeholder).attr('draggableItem');&#13;
                var currentItemIndex = remainingItems.indexOf(currentItem);&#13;
                if (currentItemIndex !== -1) {&#13;
                    remainingItems.splice(currentItemIndex, 1);&#13;
                    $(placeholder).addClass('placeholder_valid');&#13;
                }&#13;
            });&#13;
            &#13;
            presenter.$view.find('.placeholder:not(.placeholder_valid)').addClass('placeholder_invalid');&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.setWorkMode = function() {&#13;
        presenter.showErrorsMode = false;&#13;
        removeInactivityMark();&#13;
        if (!presenter.configuration.isActivity) return;&#13;
        &#13;
        presenter.$view.find('.placeholder_valid').removeClass('placeholder_valid');&#13;
        presenter.$view.find('.placeholder_invalid').removeClass('placeholder_invalid');&#13;
        &#13;
    };&#13;
    &#13;
    presenter.reset = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        &#13;
        presenter.$view.find('.placeholder').remove();&#13;
        &#13;
        presenter.setWorkMode();&#13;
        &#13;
        presenter.clearSelected();&#13;
        &#13;
        if (presenter.configuration.isVisibleByDefault) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
        presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());&#13;
    };&#13;
    &#13;
    presenter.getState = function() {&#13;
        if(presenter.isShowAnswersActive){&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        &#13;
        var placeholders = jQuery.map(presenter.$view.find('.placeholder:not(.placeholder-show-answers)'), function(placeholder) {&#13;
            return {&#13;
                item : $(placeholder).attr('draggableItem'),&#13;
                value : $(placeholder).attr('draggableValue'),&#13;
                type : $(placeholder).attr('draggableType')&#13;
            };&#13;
        });&#13;
        &#13;
        return JSON.stringify({&#13;
            placeholders: placeholders,&#13;
            isVisible: presenter.configuration.isVisible&#13;
        });&#13;
    };&#13;
    &#13;
    presenter.upgradeState = function (parsedState) {&#13;
        return presenter.upgradeStateForVisibility(parsedState);&#13;
    };&#13;
    &#13;
    presenter.upgradeStateForVisibility = function (parsedState) {&#13;
        if (parsedState.constructor == Array) {&#13;
            // Before introducing show and hide commands, whole state was an array of&#13;
            // entered by user elements (called placeholders).&#13;
            return {&#13;
                placeholders: parsedState,&#13;
                isVisible: true&#13;
            };&#13;
        }&#13;
        &#13;
        return parsedState;&#13;
    };&#13;
    &#13;
    presenter.setState = function(state) {&#13;
        if (!state) {&#13;
            return;&#13;
        }&#13;
        &#13;
        var parsedState = JSON.parse(state),&#13;
          upgradedState = presenter.upgradeState(parsedState);&#13;
        &#13;
        for(var i = 0; i &lt; upgradedState.placeholders.length; i++) {&#13;
            presenter.performAcceptDraggable(presenter.$view.find('.multiplegap_container&gt;.handler'), upgradedState.placeholders[i], false, true, true);&#13;
        }&#13;
        &#13;
        if (upgradedState.isVisible) {&#13;
            presenter.show();&#13;
        } else {&#13;
            presenter.hide();&#13;
        }&#13;
        &#13;
        presenter.pageLoaded.then(function() {&#13;
            presenter.updateLaTeX(presenter.getContainerElement());&#13;
            for (var i=0; i&lt;presenter.placeholders2drag.length; i++) {&#13;
                var placeholder = presenter.placeholders2drag[i];&#13;
                presenter.makePlaceholderDraggable(placeholder);&#13;
            }&#13;
        });&#13;
&#13;
        presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());&#13;
    };&#13;
    &#13;
    presenter.getContainerElement = function () {&#13;
        return presenter.$view.find('.multiplegap_container')[0];&#13;
    };&#13;
    &#13;
    presenter.countItems = function(itemsToCount) {&#13;
        var countItems;&#13;
        if (itemsToCount !== null &amp;&amp; itemsToCount !== undefined) {&#13;
            countItems = itemsToCount;&#13;
        } else {&#13;
            countItems = presenter.$view.find('.placeholder:visible').not('.ui-draggable-dragging').length;&#13;
        }&#13;
        &#13;
        return countItems;&#13;
    };&#13;
    &#13;
    presenter.isAttemptedCommand = function() {&#13;
        return presenter.isAttempted();&#13;
    };&#13;
    &#13;
    presenter.isAttempted = function() {&#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        &#13;
        return presenter.countItems() &gt; 0;&#13;
    };&#13;
    &#13;
    presenter.setVisibility = function (isVisible) {&#13;
        presenter.$view.css('visibility', isVisible ? 'visible' : 'hidden');&#13;
    };&#13;
    &#13;
    presenter.hide = function () {&#13;
        if (presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(false);&#13;
            presenter.configuration.isVisible = false;&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.show = function () {&#13;
        if (!presenter.configuration.isVisible) {&#13;
            presenter.setVisibility(true);&#13;
            presenter.configuration.isVisible = true;&#13;
            presenter.updateLaTeX(presenter.getContainerElement());&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.executeCommand = function(name, params) {&#13;
        var commands = {&#13;
            'countItems': presenter.countItems,&#13;
            'isAllOK': presenter.isAllOK,&#13;
            'isAttempted' : presenter.isAttempted,&#13;
            'show': presenter.show,&#13;
            'hide': presenter.hide&#13;
        };&#13;
        &#13;
        return Commands.dispatch(commands, name, params, presenter);&#13;
    };&#13;
    &#13;
    presenter.onEventReceived = function(eventName) {&#13;
        if (eventName == 'PageLoaded') {&#13;
            presenter.pageLoadedDeferred.resolve();&#13;
        }&#13;
        &#13;
        if (eventName == "ShowAnswers") {&#13;
            presenter.showAnswers();&#13;
        }&#13;
        &#13;
        if (eventName == "HideAnswers" || eventName == "NotAllAttempted" || eventName == "Submitted") {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
    };&#13;
    &#13;
    presenter.getElementText = function (id, element) {&#13;
        var module = presenter.playerController.getModule(id);&#13;
        &#13;
        if (module == null || !module.hasOwnProperty('getItem')) {&#13;
            return '';&#13;
        }&#13;
        &#13;
        return module.getItem(element);&#13;
    };&#13;
    &#13;
    presenter.showAnswers = function () {&#13;
        if (!presenter.configuration.isActivity) return;&#13;
        &#13;
        if (presenter.isShowAnswersActive) {&#13;
            presenter.hideAnswers();&#13;
        }&#13;
        presenter.isShowAnswersActive = true;&#13;
        presenter.setWorkMode();&#13;
        &#13;
        presenter.tmpState = [];&#13;
        presenter.$view.find('.placeholder').each(function(i, placeholder) {&#13;
            presenter.tmpState.push({&#13;
                item : $(placeholder).attr('draggableItem'),&#13;
                value : $(placeholder).attr('draggableValue'),&#13;
                type : $(placeholder).attr('draggableType')&#13;
            });&#13;
        });&#13;
        &#13;
        presenter.$view.find('.placeholder').remove();&#13;
        var moduleID,&#13;
          iteratedObject;&#13;
        if (presenter.itemCounterMode) {&#13;
            iteratedObject = presenter.configuration.repetitions;&#13;
        } else {&#13;
            iteratedObject = presenter.configuration.itemsAnswersID.length;&#13;
        }&#13;
        &#13;
        for (var i = 0; i &lt; iteratedObject; i++) {&#13;
            if (presenter.itemCounterMode) {&#13;
                moduleID = presenter.configuration.repeatedElement;&#13;
            } else {&#13;
                moduleID = presenter.configuration.itemsAnswersID[i];&#13;
            }&#13;
            &#13;
            var value = '';&#13;
            if (presenter.configuration.sourceType != presenter.SOURCE_TYPES.IMAGES) {&#13;
                var elementId = moduleID.split('-')[0],&#13;
                  elementIndex = moduleID.split('-')[1];&#13;
                &#13;
                value = presenter.getElementText(elementId, elementIndex);&#13;
            }&#13;
&#13;
            presenter.performAcceptDraggable('&lt;div&gt;&lt;/div&gt;', {type:'string', value: value, item: moduleID}, false, false, false);&#13;
        }&#13;
&#13;
        presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());&#13;
    };&#13;
    &#13;
    presenter.hideAnswers = function () {&#13;
        presenter.$view.find('.placeholder-show-answers').remove();&#13;
        &#13;
        if(presenter.tmpState){&#13;
            for(var i = 0; i &lt; presenter.tmpState.length; i++) {&#13;
                presenter.performAcceptDraggable(presenter.$view.find('.multiplegap_container&gt;.handler'), presenter.tmpState[i], false, false, false);&#13;
            }&#13;
        }&#13;
        presenter.$view.find('.placeholder-show-answers').removeClass('placeholder-show-answers');&#13;
        presenter.isShowAnswersActive = false;&#13;
        presenter.keyboardControllerObject.setElements(presenter.getElementsForKeyboardNavigation());&#13;
    };&#13;
&#13;
    presenter.buildKeyboardController = function () {&#13;
        presenter.keyboardControllerObject = new MultipleGapKeyboardController(presenter.getElementsForKeyboardNavigation(), 1);&#13;
    };&#13;
&#13;
    presenter.getElementsForKeyboardNavigation = function () {&#13;
        return $.merge($(presenter.container), presenter.$view.find('.placeholder:visible').not('.ui-draggable-dragging'));&#13;
    };&#13;
&#13;
    presenter.keyboardController = function(keycode, isShiftKeyDown, event) {&#13;
        presenter.keyboardControllerObject.handle(keycode, isShiftKeyDown, event)&#13;
    };&#13;
&#13;
    function MultipleGapKeyboardController (elements, columnsCount) {&#13;
        KeyboardController.call(this, elements, columnsCount);&#13;
    }&#13;
&#13;
    MultipleGapKeyboardController.prototype = Object.create(window.KeyboardController.prototype);&#13;
    MultipleGapKeyboardController.prototype.constructor = MultipleGapKeyboardController;&#13;
&#13;
&#13;
    MultipleGapKeyboardController.prototype.getTarget = function (element, willBeClicked) {&#13;
        if (willBeClicked) {&#13;
            var handler = $(element).children(".handler");&#13;
            if (handler.length &gt; 0) {&#13;
                return handler;&#13;
            }&#13;
        }&#13;
&#13;
        return $(element);&#13;
    };&#13;
&#13;
    MultipleGapKeyboardController.prototype.switchElement = function (move) {&#13;
        if (this.keyboardNavigationElementsLen &lt; 2) {&#13;
            presenter.speak([getTextVoiceObject(presenter.speechTexts.empty)]);&#13;
            this.markCurrentElement(0);&#13;
        } else {&#13;
            var new_position_index = this.keyboardNavigationCurrentElementIndex + move;&#13;
            if (new_position_index &gt;= this.keyboardNavigationElementsLen) {&#13;
                new_position_index = this.keyboardNavigationElementsLen - 1;&#13;
            } else if ( new_position_index &lt; 1) {&#13;
                new_position_index = 1;&#13;
            }&#13;
            this.markCurrentElement(new_position_index);&#13;
            this.readActiveElement(new_position_index);&#13;
        }&#13;
    };&#13;
&#13;
    MultipleGapKeyboardController.prototype.readActiveElement = function (index) {&#13;
        var voicesArray = [];&#13;
        if(index === 0 ){&#13;
            voicesArray.push(getTextVoiceObject(presenter.speechTexts.empty));&#13;
        } else {&#13;
            var $element = this.getTarget(this.keyboardNavigationElements[index]);&#13;
            voicesArray = voicesArray.concat(presenter.getTextVoicesFromPlaceholder($element));&#13;
        }&#13;
        presenter.speak(voicesArray);&#13;
    };&#13;
&#13;
    MultipleGapKeyboardController.prototype.enter = function (event) {&#13;
        window.KeyboardController.prototype.enter.call(this, event);&#13;
        if(this.keyboardNavigationElementsLen &gt; 1) {&#13;
            var voicesArray = [];&#13;
            for(var i  = 1; i &lt;this.keyboardNavigationElementsLen; i++) {&#13;
                var $element = this.getTarget(this.keyboardNavigationElements[i]);&#13;
                voicesArray = voicesArray.concat(presenter.getTextVoicesFromPlaceholder($element));&#13;
            }&#13;
            presenter.speak(voicesArray);&#13;
        } else {&#13;
            presenter.speak([getTextVoiceObject(presenter.speechTexts.empty)]);&#13;
        }&#13;
    };&#13;
&#13;
    presenter.setWCAGStatus = function (isOn) {&#13;
        isWCAGOn = isOn;&#13;
    };&#13;
&#13;
    presenter.getTextToSpeechOrNull = function (playerController) {&#13;
        if (playerController) {&#13;
            return playerController.getModule('Text_To_Speech1');&#13;
        }&#13;
&#13;
        return null;&#13;
    };&#13;
&#13;
    presenter.getTextVoicesFromPlaceholder = function($placeholder) {&#13;
        var voicesArray =[];&#13;
&#13;
        if ($placeholder.length===0) return [];&#13;
&#13;
        if ($placeholder.hasClass('placeholder')) {&#13;
            var $child = $placeholder.find("img.contents");&#13;
            if ($child.length &gt; 0) {&#13;
                voicesArray.push(getTextVoiceObject($child.attr('alt'),$child.attr('lang')));&#13;
            } else {&#13;
                $child = $placeholder.find("p.contents");&#13;
                if ($child.length &gt; 0){&#13;
                    voicesArray.push(getTextVoiceObject($child.text(),presenter.configuration.langTag));&#13;
                }&#13;
            }&#13;
            if ($placeholder.hasClass('placeholder_invalid')) {&#13;
                voicesArray.push(getTextVoiceObject(presenter.speechTexts.wrong));&#13;
            } else if ($placeholder.hasClass('placeholder_valid')) {&#13;
                voicesArray.push(getTextVoiceObject(presenter.speechTexts.correct));&#13;
            }&#13;
        }&#13;
        return voicesArray;&#13;
    };&#13;
&#13;
    presenter.speak = function (data) {&#13;
        var tts = presenter.getTextToSpeechOrNull(presenter.playerController);&#13;
        if (tts &amp;&amp; isWCAGOn) {&#13;
            tts.speak(data);&#13;
        }&#13;
    };&#13;
&#13;
    return presenter;&#13;
}&#13;
</presenter></addon>