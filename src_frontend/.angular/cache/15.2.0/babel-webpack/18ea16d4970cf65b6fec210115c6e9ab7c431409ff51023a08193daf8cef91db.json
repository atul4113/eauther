{"ast":null,"code":"import { EventEmitter, NgZone } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nvar TinyMCEComponent = /** @class */function () {\n  function TinyMCEComponent(_zone) {\n    this._zone = _zone;\n    this.formatSelect = true;\n    this.valueChange = new EventEmitter();\n  }\n  TinyMCEComponent.prototype.ngOnInit = function () {\n    this.id = this.id + '_' + new Date().getTime();\n  };\n  TinyMCEComponent.prototype.ngAfterViewInit = function () {\n    var _this = this;\n    var intervalId = setInterval(function () {\n      var textAreaElement = document.getElementById(\"tiny-mce-\".concat(_this.id));\n      if (textAreaElement) {\n        clearInterval(intervalId);\n        _this.init();\n      }\n    }, 100);\n  };\n  TinyMCEComponent.prototype.doOnChange = function () {\n    if (this.editor) {\n      this._value = this.editor.getContent();\n      this.value = this._value;\n      this.valueChange.emit(this.value);\n    }\n  };\n  TinyMCEComponent.prototype.ngOnChanges = function (changes) {\n    if (this.editor && this.value !== this._value) {\n      this.editor.setContent(this.value || '');\n    }\n  };\n  TinyMCEComponent.prototype.ngOnDestroy = function () {\n    // this.editor.destroy();\n    // tinymce.remove();\n    this.editor = null;\n  };\n  TinyMCEComponent.prototype.init = function () {\n    var _this = this;\n    tinymce.init({\n      selector: '#tiny-mce-' + this.id,\n      height: 250,\n      menubar: 'insert table tools',\n      resize: false,\n      skin: 'lightgray',\n      statusbar: false,\n      plugins: 'emoticons',\n      toolbar: 'undo redo | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist' + (this.formatSelect ? ' | formatselect' : '') + ' | fontsizeselect | emoticons | submit',\n      fontsize_formats: '8pt 10pt 12pt 14pt 18pt 24pt 30pt 36pt',\n      setup: function (editor) {\n        editor.on('keyup change', function () {\n          _this._zone.run(function () {\n            _this.doOnChange();\n          });\n        });\n        editor.on('init', function () {\n          editor.getDoc().body.style.fontSize = '16px';\n        });\n        if (_this.submitOptions) {\n          editor.addButton('submit', {\n            text: _this.submitOptions.text,\n            icon: false,\n            onclick: function () {\n              _this.submitOptions.callback();\n            }\n          });\n        }\n      }\n    }).then(function (editors) {\n      _this.editor = editors[0];\n      if (_this.editor) {\n        _this.editor.setContent(_this.value || '');\n      }\n    });\n  };\n  TinyMCEComponent.ɵfac = function TinyMCEComponent_Factory(t) {\n    return new (t || TinyMCEComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  TinyMCEComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TinyMCEComponent,\n    selectors: [[\"tiny-mce\"]],\n    inputs: {\n      id: \"id\",\n      value: \"value\",\n      submitOptions: \"submitOptions\",\n      formatSelect: \"formatSelect\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"id\"]],\n    template: function TinyMCEComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"textarea\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵpropertyInterpolate1(\"id\", \"tiny-mce-\", ctx.id, \"\");\n      }\n    },\n    encapsulation: 2\n  });\n  return TinyMCEComponent;\n}();\nexport { TinyMCEComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}