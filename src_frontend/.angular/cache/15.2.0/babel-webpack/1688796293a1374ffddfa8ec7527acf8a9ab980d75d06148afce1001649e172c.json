{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nimport \"rxjs/add/observable/of\";\nimport { RestClientService } from './rest-client.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest-client.service\";\nvar TRANSLATIONS_URL = '/translations/';\nvar TranslationsService = /** @class */function () {\n  function TranslationsService(_restClient) {\n    var _this = this;\n    this._restClient = _restClient;\n    this.isReady = false;\n    this.translationsObservable = Observable.create(function (observer) {\n      _this.translationsObserver = observer;\n    }).pipe(share());\n    this.translationsObservable.subscribe(function (translations) {\n      return _this.translations = translations;\n    });\n  }\n  TranslationsService.prototype.getTranslations = function () {\n    if (this.translations) {\n      return Observable.of(this.translations);\n    } else if (this.translationsObservable) {\n      return this.translationsObservable;\n    } else {\n      return null;\n    }\n  };\n  TranslationsService.prototype.load = function (settings, user /*, profileService: ProfileService*/) {\n    var _this = this;\n    if (!this.isReady) {\n      this.isReady = true;\n      var language = this.getCurrentLanguage(settings, user);\n      this._restClient.getPublic(TRANSLATIONS_URL + (language ? language.id : '')).pipe(map(this.mapTranslations)).subscribe(function (translations) {\n        _this.translationsObserver.next(translations);\n        _this.translationsObserver.complete();\n      });\n    }\n  };\n  TranslationsService.prototype.getCurrentLanguage = function (settings, user) {\n    var currentLanguage = null;\n    var defaultLanguage = settings.getDefaultLanguage();\n    currentLanguage = currentLanguage || defaultLanguage;\n    return currentLanguage;\n  };\n  TranslationsService.prototype.mapTranslations = function (response) {\n    if (!response) {\n      return null;\n    } else {\n      return response;\n    }\n  };\n  TranslationsService.ɵfac = function TranslationsService_Factory(t) {\n    return new (t || TranslationsService)(i0.ɵɵinject(i1.RestClientService));\n  };\n  TranslationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TranslationsService,\n    factory: TranslationsService.ɵfac\n  });\n  return TranslationsService;\n}();\nexport { TranslationsService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}