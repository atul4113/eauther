{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport { RestClientService } from \"./rest-client.service\";\nimport { map, catchError, share } from 'rxjs/operators';\nimport \"rxjs/add/observable/of\";\nimport { Space } from \"../model/space\";\nimport { Subspace } from \"../model/subspace\";\nimport { RolePermissions } from \"../model/auth-user\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest-client.service\";\nvar PROJECTS_URL = '/projects/';\nvar ProjectsService = /** @class */function () {\n  function ProjectsService(_restClient) {\n    this._restClient = _restClient;\n    this.load();\n  }\n  ProjectsService.prototype.mapProjects = function (response) {\n    var spaces = response;\n    return spaces.map(function (space) {\n      return new Space(space);\n    });\n  };\n  ProjectsService.prototype.handleError = function (error) {\n    return Observable.of([]);\n  };\n  ProjectsService.prototype.get = function () {\n    if (this.projects) {\n      return Observable.of(this.projects);\n    } else if (this.observe) {\n      return this.observe;\n    } else {\n      return null;\n    }\n  };\n  ProjectsService.prototype.onChange = function () {\n    return this.changeObserve;\n  };\n  ProjectsService.prototype.getPublications = function (projectId) {\n    return this._restClient.get(PROJECTS_URL + projectId + '/publications').pipe(map(function (response) {\n      return response.map(function (publication) {\n        return new Space(publication);\n      });\n    }));\n  };\n  ProjectsService.prototype.getStructure = function (spaceId, recursive) {\n    if (recursive === void 0) {\n      recursive = false;\n    }\n    if (recursive) {\n      return this._restClient.get(PROJECTS_URL + spaceId + '/structure?recursive=true').pipe(map(function (response) {\n        return new Subspace(response);\n      }));\n    } else {\n      return this._restClient.get(PROJECTS_URL + spaceId + '/structure').pipe(map(function (response) {\n        return new Subspace(response);\n      }));\n    }\n  };\n  ProjectsService.prototype.load = function () {\n    var _this = this;\n    this.observe = this._restClient.get(PROJECTS_URL).pipe(map(this.mapProjects), catchError(this.handleError), share());\n    this.observe.subscribe(function (projects) {\n      return _this.projects = projects;\n    });\n    this.changeObserve = Observable.create(function (observer) {\n      _this.changeObserver = observer;\n    }).pipe(share());\n  };\n  ProjectsService.prototype.projectForPublication = function (spaceId) {\n    return this._restClient.get(PROJECTS_URL + spaceId + '/get_project').pipe(map(function (response) {\n      return new Space(response);\n    }));\n  };\n  ProjectsService.prototype.getSpacePermissions = function (spaceId) {\n    return this._restClient.get(PROJECTS_URL + \"permissions/\" + spaceId).pipe(map(function (permissions) {\n      return new RolePermissions(permissions);\n    }));\n  };\n  ProjectsService.ɵfac = function ProjectsService_Factory(t) {\n    return new (t || ProjectsService)(i0.ɵɵinject(i1.RestClientService));\n  };\n  ProjectsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectsService,\n    factory: ProjectsService.ɵfac\n  });\n  return ProjectsService;\n}();\nexport { ProjectsService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}