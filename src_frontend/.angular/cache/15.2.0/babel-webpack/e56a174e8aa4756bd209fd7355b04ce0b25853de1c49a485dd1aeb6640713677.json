{"ast":null,"code":"import { Http } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { map, share, catchError } from 'rxjs/operators';\nimport \"rxjs/add/observable/of\";\nimport \"rxjs/add/observable/throw\";\nimport * as i0 from \"@angular/core\";\nvar API_URL = '/api/v2';\nvar TOKEN_URL = '/jwt/session_token';\nvar TokenService = /** @class */function () {\n  function TokenService(_http) {\n    this._http = _http;\n  }\n  TokenService.prototype.extractData = function (res) {\n    if (res.status < 200 || res.status >= 300) {\n      throw new Error('BAD RESPONSE STATUS: ' + res.status);\n    }\n    var body = res.json();\n    return body.token;\n  };\n  TokenService.prototype.handleError = function (error) {\n    if (error.status === 400) {\n      return Observable.of(null);\n    } else {\n      var errMsg = error.message || 'Server error';\n      console.error(\"TokenService ERROR: \", errMsg);\n      return Observable.throw(errMsg);\n    }\n  };\n  TokenService.prototype.get = function () {\n    var _this = this;\n    if (this.token !== undefined) {\n      return Observable.of(this.token);\n    } else if (this.observe) {\n      return this.observe;\n    } else {\n      this.observe = this._http.get(API_URL + TOKEN_URL).pipe(map(this.extractData), catchError(this.handleError), share());\n      this.observe.subscribe(function (token) {\n        return _this.token = token;\n      }, function (error) {\n        return _this.token = null;\n      });\n      return this.observe;\n    }\n  };\n  TokenService.prototype.clear = function () {\n    this.token = undefined;\n    this.observe = undefined;\n  };\n  TokenService.prototype.getFreshToken = function () {\n    this.clear();\n    return this.get();\n  };\n  TokenService.ɵfac = function TokenService_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n  TokenService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenService,\n    factory: TokenService.ɵfac\n  });\n  return TokenService;\n}();\nexport { TokenService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}