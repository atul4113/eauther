{"ast":null,"code":"var SupportedLanguage = /** @class */function () {\n  function SupportedLanguage(lang) {\n    this.id = lang.id;\n    this.key = lang.key;\n    this.description = lang.description;\n    this.iconKey = this.normalizeIconKey(lang.key);\n  }\n  SupportedLanguage.prototype.normalizeIconKey = function (key) {\n    if (key.length >= 2) {\n      return key.substr(0, 2).toLocaleLowerCase();\n    } else {\n      return 'en';\n    }\n  };\n  return SupportedLanguage;\n}();\nexport { SupportedLanguage };\nvar Settings = /** @class */function () {\n  function Settings(settings) {\n    if (settings) {\n      this.applicationId = settings.application_id;\n      this.email = settings.email;\n      this.languageCode = settings.lang;\n      this.selectUserLanguage = settings.select_user_language;\n      this.supportedLanguages = settings.supported_languages.map(function (lang) {\n        return new SupportedLanguage(lang);\n      }).sort(function (l1, l2) {\n        return l1.iconKey.localeCompare(l2.iconKey);\n      });\n      this.referrers = settings.referrers;\n    }\n  }\n  // public getPublisher (publisherId: number): Publisher {\n  //     return this.publishers.filter(publisher => publisher.id === publisherId)[0];\n  // }\n  Settings.prototype.getSupportedLanguage = function (langId) {\n    return this.supportedLanguages.filter(function (lang) {\n      return lang.id === langId;\n    })[0];\n  };\n  Settings.prototype.getSupportedLanguageByKey = function (langKey) {\n    return this.supportedLanguages.filter(function (lang) {\n      return lang.key.localeCompare(langKey) === 0;\n    })[0];\n  };\n  Settings.prototype.getDefaultLanguage = function () {\n    return this.getSupportedLanguageByKey(this.languageCode);\n  };\n  return Settings;\n}();\nexport { Settings };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}