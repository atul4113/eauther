{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport { AuthUser } from \"../model/auth-user\";\nimport { RestClientService } from \"./rest-client.service\";\nimport { map, share, catchError } from 'rxjs/operators';\nimport \"rxjs/add/observable/of\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest-client.service\";\nvar USER_URL = '/user/';\nvar AuthUserService = /** @class */function () {\n  function AuthUserService(_restClient) {\n    this._restClient = _restClient;\n    this.load();\n  }\n  AuthUserService.prototype.mapAuthUser = function (response) {\n    return new AuthUser(response);\n  };\n  AuthUserService.prototype.handleError = function (error) {\n    return Observable.of(new AuthUser());\n  };\n  AuthUserService.prototype.get = function () {\n    if (this.user) {\n      return Observable.of(this.user);\n    } else if (this.observe) {\n      return this.observe;\n    } else {\n      return null;\n    }\n  };\n  AuthUserService.prototype.onChange = function () {\n    return this.changeObserve;\n  };\n  AuthUserService.prototype.load = function () {\n    var _this = this;\n    this.observe = this._restClient.get(USER_URL).pipe(map(this.mapAuthUser), catchError(this.handleError), share());\n    this.observe.subscribe(function (user) {\n      return _this.user = user;\n    });\n    this.changeObserve = Observable.create(function (observer) {\n      _this.changeObserver = observer;\n    }).pipe(share());\n  };\n  AuthUserService.ɵfac = function AuthUserService_Factory(t) {\n    return new (t || AuthUserService)(i0.ɵɵinject(i1.RestClientService));\n  };\n  AuthUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthUserService,\n    factory: AuthUserService.ɵfac\n  });\n  return AuthUserService;\n}();\nexport { AuthUserService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}