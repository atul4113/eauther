{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nvar TrimText = /** @class */function () {\n  function TrimText(el) {\n    var _this = this;\n    this.separator = ' ';\n    this.onWindowResize = function () {\n      return _this.trim();\n    };\n    this.native = el.nativeElement;\n  }\n  TrimText.prototype.ngAfterViewInit = function () {\n    if (this.params && this.params.text.length > 0) {\n      this.native.innerHTML = this.params.text;\n      this.trim();\n      window.addEventListener('resize', this.onWindowResize);\n    }\n  };\n  TrimText.prototype.ngOnChanges = function (changes) {\n    if (this.params && this.params.text.length > 0) {\n      this.native.innerHTML = this.params.text;\n      this.trim();\n    }\n  };\n  TrimText.prototype.ngOnDestroy = function () {\n    window.removeEventListener('resize', this.onWindowResize);\n  };\n  TrimText.prototype.trim = function () {\n    var text = this.params.text;\n    while (this.native.clientHeight > this.params.height) {\n      text = this.cutLastWord(text);\n      this.native.innerHTML = text + '...';\n    }\n  };\n  TrimText.prototype.cutLastWord = function (text) {\n    var parts = text.split(this.separator);\n    parts.pop();\n    return parts.join(this.separator);\n  };\n  TrimText.ɵfac = function TrimText_Factory(t) {\n    return new (t || TrimText)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  TrimText.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: TrimText,\n    selectors: [[\"\", \"trim-text\", \"\"]],\n    inputs: {\n      params: [\"trim-text\", \"params\"],\n      separator: [\"trim-separator\", \"separator\"]\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return TrimText;\n}();\nexport { TrimText };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}