{"ast":null,"code":"import { CookieOptions } from './base-cookie-options';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./base-cookie-options\";\nvar CookieService = /** @class */function () {\n  function CookieService(_defaultOptions) {\n    this._defaultOptions = _defaultOptions;\n  }\n  /**\r\n   * @name CookieService#get\r\n   *\r\n   * @description\r\n   * Returns the value of given cookie key.\r\n   *\r\n   * @param {string} key Id to use for lookup.\r\n   * @returns {string} Raw cookie value.\r\n   */\n  CookieService.prototype.get = function (key) {\n    return this._cookieReader()[key];\n  };\n  /**\r\n   * @name CookieService#getObject\r\n   *\r\n   * @description\r\n   * Returns the deserialized value of given cookie key.\r\n   *\r\n   * @param {string} key Id to use for lookup.\r\n   * @returns {Object} Deserialized cookie value.\r\n   */\n  CookieService.prototype.getObject = function (key) {\n    var value = this.get(key);\n    return value ? JSON.parse(value) : value;\n  };\n  /**\r\n   * @name CookieService#getAll\r\n   *\r\n   * @description\r\n   * Returns a key value object with all the cookies.\r\n   *\r\n   * @returns {Object} All cookies\r\n   */\n  CookieService.prototype.getAll = function () {\n    return this._cookieReader();\n  };\n  /**\r\n   * @name CookieService#put\r\n   *\r\n   * @description\r\n   * Sets a value for given cookie key.\r\n   *\r\n   * @param {string} key Id for the `value`.\r\n   * @param {string} value Raw value to be stored.\r\n   * @param {CookieOptionsArgs} options (Optional) Options object.\r\n   */\n  CookieService.prototype.put = function (key, value, options) {\n    this._cookieWriter()(key, value, options);\n  };\n  /**\r\n   * @name CookieService#putObject\r\n   *\r\n   * @description\r\n   * Serializes and sets a value for given cookie key.\r\n   *\r\n   * @param {string} key Id for the `value`.\r\n   * @param {Object} value Value to be stored.\r\n   * @param {CookieOptionsArgs} options (Optional) Options object.\r\n   */\n  CookieService.prototype.putObject = function (key, value, options) {\n    this.put(key, JSON.stringify(value), options);\n  };\n  /**\r\n   * @name CookieService#remove\r\n   *\r\n   * @description\r\n   * Remove given cookie.\r\n   *\r\n   * @param {string} key Id of the key-value pair to delete.\r\n   * @param {CookieOptionsArgs} options (Optional) Options object.\r\n   */\n  CookieService.prototype.remove = function (key, options) {\n    this._cookieWriter()(key, undefined, options);\n  };\n  /**\r\n   * @name CookieService#removeAll\r\n   *\r\n   * @description\r\n   * Remove all cookies.\r\n   */\n  CookieService.prototype.removeAll = function () {\n    var _this = this;\n    var cookies = this.getAll();\n    Object.keys(cookies).forEach(function (key) {\n      _this.remove(key);\n    });\n  };\n  CookieService.prototype._cookieReader = function () {\n    var rawDocument = document;\n    var lastCookies = {};\n    var lastCookieString = '';\n    var that = this;\n    var cookieArray, cookie, i, index, name;\n    var currentCookieString = rawDocument.cookie || '';\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookieArray = lastCookieString.split('; ');\n      lastCookies = {};\n      for (i = 0; i < cookieArray.length; i++) {\n        cookie = cookieArray[i];\n        index = cookie.indexOf('=');\n        if (index > 0) {\n          // ignore nameless cookies\n          name = that._safeDecodeURIComponent(cookie.substring(0, index));\n          // the first value that is seen for a cookie is the most\n          // specific one.  values for the same cookie name that\n          // follow are for less specific paths.\n          if (this.isBlank(lastCookies[name])) {\n            lastCookies[name] = that._safeDecodeURIComponent(cookie.substring(index + 1));\n          }\n        }\n      }\n    }\n    return lastCookies;\n  };\n  CookieService.prototype._cookieWriter = function () {\n    var that = this;\n    var rawDocument = document;\n    return function (name, value, options) {\n      rawDocument.cookie = that._buildCookieString(name, value, options);\n    };\n  };\n  CookieService.prototype._safeDecodeURIComponent = function (str) {\n    try {\n      return decodeURIComponent(str);\n    } catch (e) {\n      return str;\n    }\n  };\n  CookieService.prototype._buildCookieString = function (name, value, options) {\n    var cookiePath = '/';\n    var path, expires;\n    var defaultOpts = this._defaultOptions || new CookieOptions({\n      path: cookiePath\n    });\n    var opts = this._mergeOptions(defaultOpts, options);\n    expires = opts.expires;\n    if (this.isBlank(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (this.isString(expires)) {\n      expires = new Date(expires);\n    }\n    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n    str += opts.path ? ';path=' + opts.path : '';\n    str += opts.domain ? ';domain=' + opts.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += opts.secure ? ';secure' : '';\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    var cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n      console.log(\"Cookie '\".concat(name, \"' possibly not set or overflowed because it was too \\n      large (\").concat(cookieLength, \" > 4096 bytes)!\"));\n    }\n    return str;\n  };\n  CookieService.prototype._mergeOptions = function (defaultOpts, providedOpts) {\n    var newOpts = defaultOpts;\n    if (this.isPresent(providedOpts)) {\n      return newOpts.merge(new CookieOptions(providedOpts));\n    }\n    return newOpts;\n  };\n  CookieService.prototype.isBlank = function (obj) {\n    return obj === undefined || obj === null;\n  };\n  CookieService.prototype.isPresent = function (obj) {\n    return obj !== undefined && obj !== null;\n  };\n  CookieService.prototype.isString = function (obj) {\n    return typeof obj === 'string';\n  };\n  CookieService.ɵfac = function CookieService_Factory(t) {\n    return new (t || CookieService)(i0.ɵɵinject(i1.CookieOptions, 8));\n  };\n  CookieService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CookieService,\n    factory: CookieService.ɵfac\n  });\n  return CookieService;\n}();\nexport { CookieService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}