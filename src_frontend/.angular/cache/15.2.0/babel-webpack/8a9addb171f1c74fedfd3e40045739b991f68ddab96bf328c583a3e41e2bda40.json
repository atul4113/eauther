{"ast":null,"code":"var FileData = /** @class */function () {\n  function FileData(name, type, size, fileId, isUploaded) {\n    if (fileId === void 0) {\n      fileId = null;\n    }\n    if (isUploaded === void 0) {\n      isUploaded = false;\n    }\n    this.name = name;\n    this.type = type;\n    this.size = size;\n    this.fileId = fileId;\n    this.isUploaded = isUploaded;\n  }\n  FileData.fromRaw = function (fileData) {\n    return new FileData(fileData.filename, fileData.type, fileData.size, fileData.id, true);\n  };\n  FileData.prototype.getFormattedSize = function () {\n    var sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n    if (this.size === 0) return 'n/a';\n    var i = Math.floor(Math.floor(Math.log(this.size) / Math.log(1024)));\n    if (i === 0) return \"\".concat(this.size, \" \").concat(sizes[i]);\n    return \"\".concat((this.size / Math.pow(1024, i)).toFixed(1), \" \").concat(sizes[i]);\n  };\n  Object.defineProperty(FileData.prototype, \"link\", {\n    get: function () {\n      return '/file/serve/' + this.fileId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FileData;\n}();\nexport { FileData };\nvar UploadFileError = /** @class */function () {\n  function UploadFileError(response, status) {\n    this.response = response;\n    this.status = status;\n  }\n  return UploadFileError;\n}();\nexport { UploadFileError };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}