{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { InfoMessage, INFO_MESSAGE_TYPE } from '../model/info-message';\nimport * as i0 from \"@angular/core\";\nvar InfoMessageService = /** @class */function () {\n  function InfoMessageService() {\n    var _this = this;\n    this.messages = [];\n    this.observable = Observable.create(function (observer) {\n      _this.observer = observer;\n    }).pipe(share());\n    this.errorObservable = Observable.create(function (observer) {\n      _this.errorObserver = observer;\n    }).pipe(share());\n    this.observable.subscribe();\n    this.errorObservable.subscribe();\n  }\n  InfoMessageService.prototype.init = function () {}; // method for forcing service initialization\n  InfoMessageService.prototype.addSuccess = function (message, closeable, autoClose) {\n    if (closeable === void 0) {\n      closeable = true;\n    }\n    if (autoClose === void 0) {\n      autoClose = true;\n    }\n    this.addMessage(new InfoMessage(INFO_MESSAGE_TYPE.SUCCESS, message, closeable, autoClose));\n  };\n  InfoMessageService.prototype.addError = function (message, closeable, autoClose) {\n    if (closeable === void 0) {\n      closeable = true;\n    }\n    if (autoClose === void 0) {\n      autoClose = true;\n    }\n    this.addMessage(new InfoMessage(INFO_MESSAGE_TYPE.ERROR, message, closeable, autoClose));\n  };\n  InfoMessageService.prototype.addWarning = function (message, closeable, autoClose) {\n    if (closeable === void 0) {\n      closeable = true;\n    }\n    if (autoClose === void 0) {\n      autoClose = true;\n    }\n    this.addMessage(new InfoMessage(INFO_MESSAGE_TYPE.WARNING, message, closeable, autoClose));\n  };\n  InfoMessageService.prototype.addInfo = function (message, closeable, autoClose) {\n    if (closeable === void 0) {\n      closeable = true;\n    }\n    if (autoClose === void 0) {\n      autoClose = true;\n    }\n    this.addMessage(new InfoMessage(INFO_MESSAGE_TYPE.INFO, message, closeable, autoClose));\n  };\n  InfoMessageService.prototype.clear = function () {\n    this.observer.next(null);\n  };\n  InfoMessageService.prototype.error500 = function () {\n    this.errorObserver.next(500);\n  };\n  InfoMessageService.prototype.error404 = function () {\n    this.errorObserver.next(404);\n  };\n  InfoMessageService.prototype.errors = function () {\n    return this.errorObservable;\n  };\n  InfoMessageService.prototype.get = function () {\n    return this.observable;\n  };\n  InfoMessageService.prototype.getAll = function () {\n    return this.messages;\n  };\n  InfoMessageService.prototype.addMessage = function (message) {\n    this.messages.push(message);\n    this.observer.next(message);\n  };\n  InfoMessageService.ɵfac = function InfoMessageService_Factory(t) {\n    return new (t || InfoMessageService)();\n  };\n  InfoMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InfoMessageService,\n    factory: InfoMessageService.ɵfac\n  });\n  return InfoMessageService;\n}();\nexport { InfoMessageService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}