{"ast":null,"code":"import { Observable } from \"rxjs\";\nimport { map, share } from \"rxjs/operators\";\nimport \"rxjs/add/observable/of\";\nimport { Settings } from \"../model\";\nimport { RestClientService } from \"./rest-client.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./rest-client.service\";\nvar SETTINGS_URL = \"/settings\";\nvar SettingsService = /** @class */function () {\n  function SettingsService(_restClient) {\n    this._restClient = _restClient;\n    this.mapSettings = function (response) {\n      return new Settings(response);\n    };\n    this.load();\n  }\n  SettingsService.prototype.load = function () {\n    var _this = this;\n    this.settingsObservable = this._restClient.getPublic(SETTINGS_URL).pipe(map(this.mapSettings), share());\n    this.settingsObservable.subscribe(function (settings) {\n      return _this.settings = settings;\n    });\n  };\n  SettingsService.prototype.get = function () {\n    if (this.settings) {\n      return Observable.of(this.settings);\n    } else if (this.settingsObservable) {\n      return this.settingsObservable;\n    } else {\n      return null;\n    }\n  };\n  SettingsService.ɵfac = function SettingsService_Factory(t) {\n    return new (t || SettingsService)(i0.ɵɵinject(i1.RestClientService));\n  };\n  SettingsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SettingsService,\n    factory: SettingsService.ɵfac\n  });\n  return SettingsService;\n}();\nexport { SettingsService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}