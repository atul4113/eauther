{"ast":null,"code":"import { EventEmitter, ElementRef } from \"@angular/core\";\nimport { FileUploader } from \"ng2-file-upload\";\nimport { Observable } from \"rxjs\";\nimport { FileData, UploadFileError } from \"../../model/upload-file\";\nimport { UploadFileService, TokenService } from \"../../service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"ng2-file-upload\";\nvar _c0 = [\"fileInput\"];\nfunction BaseUploadFileComponent_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"input\", 1, 2);\n  }\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"uploader\", ctx_r0.uploader);\n  }\n}\nvar _c1 = [\"*\"];\nvar BaseUploadFileComponent = /** @class */function () {\n  function BaseUploadFileComponent(_uploadFile, _token) {\n    this._uploadFile = _uploadFile;\n    this._token = _token;\n    this.selected = new EventEmitter();\n  }\n  BaseUploadFileComponent.prototype.ngOnInit = function () {\n    this.init();\n  };\n  BaseUploadFileComponent.prototype.upload = function () {\n    var _this = this;\n    return Observable.create(function (observer) {\n      if (_this.observer) {\n        observer.error(new UploadFileError('File is already uploading.', 400));\n        observer.complete();\n      } else {\n        _this.observer = observer;\n        if (_this.file && !_this.file.isSuccess) {\n          Observable.forkJoin(_this._token.getFreshToken(), _this._uploadFile.getUploadUrl()).subscribe(function (_a) {\n            var token = _a[0],\n              uploadUrl = _a[1];\n            _this.uploader.setOptions({\n              url: uploadUrl,\n              authToken: 'JWT ' + token\n            });\n            _this.file.upload();\n          }, function (error) {\n            _this.observer.error(new UploadFileError('Could not get token', 401));\n            _this.observer.complete();\n          });\n        } else {\n          _this.observer.error(new UploadFileError('File not provided or file already uploaded.', 404));\n          _this.observer.complete();\n        }\n      }\n    });\n  };\n  BaseUploadFileComponent.prototype.openFilePicker = function () {\n    this.fileInput.nativeElement.click();\n  };\n  BaseUploadFileComponent.prototype.clear = function () {\n    this.init();\n  };\n  BaseUploadFileComponent.prototype.init = function () {\n    this.observer = null;\n    this.file = null;\n    this.initUploader();\n  };\n  BaseUploadFileComponent.prototype.initUploader = function () {\n    var _this = this;\n    this.uploader = new FileUploader({});\n    this.uploader.onAfterAddingFile = function (item) {\n      if (_this.file) {\n        _this.uploader.removeFromQueue(_this.file);\n      }\n      _this.file = item;\n      _this.observer = null;\n      _this.selected.emit(new FileData(item.file.name, item.file.type, item.file.size));\n    };\n    this.uploader.onSuccessItem = function (item, response, status, headers) {\n      var data = JSON.parse(response);\n      _this.uploader.clearQueue();\n      _this.observer.next(new FileData(item.file.name, item.file.type, item.file.size, data.uploaded_file_id, true));\n      _this.observer.complete();\n      _this.init();\n    };\n    this.uploader.onErrorItem = function (item, response, status, headers) {\n      _this.uploader.clearQueue();\n      _this.observer.error(new UploadFileError(response, status));\n      _this.observer.complete();\n      _this.init();\n    };\n  };\n  BaseUploadFileComponent.ɵfac = function BaseUploadFileComponent_Factory(t) {\n    return new (t || BaseUploadFileComponent)(i0.ɵɵdirectiveInject(i1.UploadFileService), i0.ɵɵdirectiveInject(i1.TokenService));\n  };\n  BaseUploadFileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BaseUploadFileComponent,\n    selectors: [[\"base-upload-file\"]],\n    viewQuery: function BaseUploadFileComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        var _t = void 0;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);\n      }\n    },\n    outputs: {\n      selected: \"selected\"\n    },\n    features: [i0.ɵɵProvidersFeature([UploadFileService])],\n    ngContentSelectors: _c1,\n    decls: 2,\n    vars: 1,\n    consts: [[\"type\", \"file\", \"ng2FileSelect\", \"\", 3, \"uploader\", 4, \"ngIf\"], [\"type\", \"file\", \"ng2FileSelect\", \"\", 3, \"uploader\"], [\"fileInput\", \"\"]],\n    template: function BaseUploadFileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, BaseUploadFileComponent_input_0_Template, 2, 1, \"input\", 0);\n        i0.ɵɵprojection(1);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.uploader);\n      }\n    },\n    dependencies: [i2.NgIf, i3.FileSelectDirective],\n    encapsulation: 2\n  });\n  return BaseUploadFileComponent;\n}();\nexport { BaseUploadFileComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}